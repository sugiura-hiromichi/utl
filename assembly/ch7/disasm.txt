libsystem_platform.dylib:
(__TEXT,__text) section
_os_unfair_lock_lock_with_options:
0000000000000fa0	mov	w8, #0x0
0000000000000fa4	mrs	x9, TPIDRRO_EL0
0000000000000fa8	ldr	w3, [x9, #0x18]
0000000000000fac	casa	w8, w3, [x0]
0000000000000fb0	cmp	w8, #0x0
0000000000000fb4	b.ne	0xfbc
0000000000000fb8	ret
0000000000000fbc	mov	x2, #0x0
0000000000000fc0	b	__os_unfair_lock_lock_slow
_os_unfair_lock_unlock:
0000000000000fc4	mrs	x8, TPIDRRO_EL0
0000000000000fc8	ldr	w1, [x8, #0x18]
0000000000000fcc	swpl	wzr, w2, [x0]
0000000000000fd0	cmp	w2, w1
0000000000000fd4	b.ne	0xfdc
0000000000000fd8	ret
0000000000000fdc	b	__os_unfair_lock_unlock_slow
_os_unfair_recursive_lock_lock_with_options:
0000000000000fe0	mov	w8, #0x0
0000000000000fe4	mrs	x9, TPIDRRO_EL0
0000000000000fe8	ldr	w3, [x9, #0x18]
0000000000000fec	casa	w8, w3, [x0]
0000000000000ff0	cmp	w8, #0x0
0000000000000ff4	b.ne	0xffc
0000000000000ff8	ret
0000000000000ffc	orr	w8, w8, #0x1
0000000000001000	cmp	w8, w3
0000000000001004	b.ne	0x1018
0000000000001008	ldr	w8, [x0, #0x4]
000000000000100c	add	w8, w8, #0x1
0000000000001010	str	w8, [x0, #0x4]
0000000000001014	ret
0000000000001018	mov	x2, #0x0
000000000000101c	b	__os_unfair_lock_lock_slow
__platform_strcmp:
0000000000001020	adrp	x16, 5 ; 0x6000
0000000000001024	add	x16, x16, #0x7b0
0000000000001028	paciza	x16
000000000000102c	mov	x0, x16
0000000000001030	ret
_os_unfair_recursive_lock_unlock:
0000000000001034	pacibsp
0000000000001038	stp	x29, x30, [sp, #-0x10]!
000000000000103c	mov	x29, sp
0000000000001040	mrs	x8, TPIDRRO_EL0
0000000000001044	ldr	w1, [x8, #0x18]
0000000000001048	ldr	w9, [x0, #0x4]
000000000000104c	cbnz	w9, 0x1064
0000000000001050	swpl	wzr, w2, [x0]
0000000000001054	cmp	w2, w1
0000000000001058	b.ne	0x1080
000000000000105c	ldp	x29, x30, [sp], #0x10
0000000000001060	retab
0000000000001064	ldr	w8, [x0]
0000000000001068	orr	w8, w8, #0x1
000000000000106c	cmp	w8, w1
0000000000001070	b.ne	0x1098
0000000000001074	sub	w8, w9, #0x1
0000000000001078	str	w8, [x0, #0x4]
000000000000107c	b	0x105c
0000000000001080	ldp	x29, x30, [sp], #0x10
0000000000001084	autibsp
0000000000001088	eor	x16, x30, x30, lsl #1
000000000000108c	tbz	x16, #0x3e, 0x1094
0000000000001090	brk	#0xc471
0000000000001094	b	__os_unfair_lock_unlock_slow
0000000000001098	mov	x0, x8
000000000000109c	bl	__os_unfair_lock_unowned_abort
__platform_strncmp:
00000000000010a0	adrp	x16, 5 ; 0x6000
00000000000010a4	add	x16, x16, #0x8b0
00000000000010a8	paciza	x16
00000000000010ac	mov	x0, x16
00000000000010b0	ret
00000000000010b4	udf	#0x0
00000000000010b8	udf	#0x0
00000000000010bc	udf	#0x0
00000000000010c0	.long	0x03020100
00000000000010c4	.long	0x07060504
00000000000010c8	add	w8, w8, w10, lsl #2
00000000000010cc	.long	0x0f0e0d0c
00000000000010d0	udf	#0x0
00000000000010d4	udf	#0x0
00000000000010d8	udf	#0x0
00000000000010dc	udf	#0x0
__os_once:
00000000000011e0	ldapr	x8, [x0]
00000000000011e4	and	x9, x8, #0x3
00000000000011e8	cmp	x9, #0x1
00000000000011ec	b.ne	0x121c
00000000000011f0	mov	x9, #0xfffff0000
00000000000011f4	movk	x9, #0xc180
00000000000011f8	ldr	x9, [x9]
00000000000011fc	lsl	x9, x9, #2
0000000000001200	sub	x8, x9, x8
0000000000001204	sub	x8, x8, #0xf
0000000000001208	cmn	x8, #0x11
000000000000120c	b.hi	0x1218
0000000000001210	mov	x8, #-0x1
0000000000001214	str	x8, [x0]
0000000000001218	ret
000000000000121c	mov	x8, #0x0
0000000000001220	mrs	x9, TPIDRRO_EL0
0000000000001224	ldr	x3, [x9, #0x18]
0000000000001228	and	x9, x3, #0xffffffff
000000000000122c	casa	x8, x9, [x0]
0000000000001230	cmp	x8, #0x0
0000000000001234	b.ne	0x123c
0000000000001238	b	__os_once_callout
000000000000123c	b	__os_once_gate_wait
__os_once_callout:
0000000000001240	pacibsp
0000000000001244	stp	x20, x19, [sp, #-0x20]!
0000000000001248	stp	x29, x30, [sp, #0x10]
000000000000124c	add	x29, sp, #0x10
0000000000001250	mov	x19, x3
0000000000001254	mov	x20, x0
0000000000001258	mov	x0, x1
000000000000125c	blraaz	x2
0000000000001260	mov	x8, #0xfffff0000
0000000000001264	movk	x8, #0xc180
0000000000001268	ldr	x8, [x8]
000000000000126c	mov	w9, #0x1
0000000000001270	orr	x8, x9, x8, lsl #2
0000000000001274	swpl	x8, x1, [x20]
0000000000001278	cmp	w1, w19
000000000000127c	b.ne	0x128c
0000000000001280	ldp	x29, x30, [sp, #0x10]
0000000000001284	ldp	x20, x19, [sp], #0x20
0000000000001288	retab
000000000000128c	mov	x0, x20
0000000000001290	mov	x2, x19
0000000000001294	ldp	x29, x30, [sp, #0x10]
0000000000001298	ldp	x20, x19, [sp], #0x20
000000000000129c	autibsp
00000000000012a0	eor	x16, x30, x30, lsl #1
00000000000012a4	tbz	x16, #0x3e, 0x12ac
00000000000012a8	brk	#0xc471
00000000000012ac	b	__os_once_gate_broadcast
_os_unfair_lock_lock:
00000000000012b0	mov	w8, #0x0
00000000000012b4	mrs	x9, TPIDRRO_EL0
00000000000012b8	ldr	w3, [x9, #0x18]
00000000000012bc	casa	w8, w3, [x0]
00000000000012c0	cmp	w8, #0x0
00000000000012c4	b.ne	0x12cc
00000000000012c8	ret
00000000000012cc	mov	w1, #0x0
00000000000012d0	mov	x2, #0x0
00000000000012d4	b	__os_unfair_lock_lock_slow
_os_unfair_lock_assert_owner:
00000000000012d8	pacibsp
00000000000012dc	stp	x29, x30, [sp, #-0x10]!
00000000000012e0	mov	x29, sp
00000000000012e4	mrs	x8, TPIDRRO_EL0
00000000000012e8	ldr	w8, [x8, #0x18]
00000000000012ec	ldr	w0, [x0]
00000000000012f0	orr	w9, w0, #0x1
00000000000012f4	cmp	w9, w8
00000000000012f8	b.ne	0x1304
00000000000012fc	ldp	x29, x30, [sp], #0x10
0000000000001300	retab
0000000000001304	bl	_os_unfair_lock_assert_owner.cold.1
_ffs:
0000000000001308	neg	w3, w0
000000000000130c	and	w0, w0, w3
0000000000001310	clz	w0, w0
0000000000001314	mov	w3, #0x20
0000000000001318	sub	w0, w3, w0
000000000000131c	ret
_ffsl:
0000000000001320	neg	x3, x0
0000000000001324	and	x0, x0, x3
0000000000001328	clz	x0, x0
000000000000132c	mov	x3, #0x40
0000000000001330	sub	x0, x3, x0
0000000000001334	ret
_fls:
0000000000001338	clz	w0, w0
000000000000133c	mov	w9, #0x20
0000000000001340	sub	w0, w9, w0
0000000000001344	ret
_flsl:
0000000000001348	clz	x0, x0
000000000000134c	mov	x9, #0x40
0000000000001350	sub	x0, x9, x0
0000000000001354	ret
__os_alloc_once:
0000000000001358	pacibsp
000000000000135c	sub	sp, sp, #0x40
0000000000001360	stp	x20, x19, [sp, #0x20]
0000000000001364	stp	x29, x30, [sp, #0x30]
0000000000001368	add	x29, sp, #0x30
000000000000136c	mov	x19, x0
0000000000001370	stp	x0, x1, [sp, #0x8]
0000000000001374	str	x2, [sp, #0x18]
0000000000001378	adrp	x16, 0 ; 0x1000
000000000000137c	add	x16, x16, #0x3a4
0000000000001380	paciza	x16
0000000000001384	mov	x2, x16
0000000000001388	add	x1, sp, #0x8
000000000000138c	bl	__os_once
0000000000001390	ldr	x0, [x19, #0x8]
0000000000001394	ldp	x29, x30, [sp, #0x30]
0000000000001398	ldp	x20, x19, [sp, #0x20]
000000000000139c	add	sp, sp, #0x40
00000000000013a0	retab
__os_alloc:
00000000000013a4	pacibsp
00000000000013a8	stp	x20, x19, [sp, #-0x20]!
00000000000013ac	stp	x29, x30, [sp, #0x10]
00000000000013b0	add	x29, sp, #0x10
00000000000013b4	ldr	w8, [x0, #0x8]
00000000000013b8	add	w9, w8, #0xf
00000000000013bc	adrp	x8, 7 ; 0x8000
00000000000013c0	ldr	x8, [x8, #0x18] ; literal pool symbol address: _vm_page_size
00000000000013c4	and	x1, x9, #0xfffffff0
00000000000013c8	ldr	x9, [x8]
00000000000013cc	lsl	x9, x9, #1
00000000000013d0	sub	x9, x9, #0x10
00000000000013d4	sub	x10, x1, #0x1
00000000000013d8	cmp	x10, x9
00000000000013dc	b.hs	0x1454
00000000000013e0	mov	x19, x0
00000000000013e4	adrp	x9, 19 ; 0x14000
00000000000013e8	ldr	x0, [x9, #0x18]
00000000000013ec	cbz	x0, 0x140c
00000000000013f0	ldadd	x1, x9, [x0]
00000000000013f4	ldr	x8, [x8]
00000000000013f8	lsl	x8, x8, #1
00000000000013fc	sub	x8, x8, #0x10
0000000000001400	add	x10, x9, x1
0000000000001404	cmp	x10, x8
0000000000001408	b.ls	0x1414
000000000000140c	bl	__os_alloc_slow
0000000000001410	b	0x141c
0000000000001414	add	x8, x0, x9
0000000000001418	add	x0, x8, #0x10
000000000000141c	ldr	x8, [x19]
0000000000001420	str	x0, [x8, #0x8]
0000000000001424	ldr	x1, [x19, #0x10]
0000000000001428	cbz	x1, 0x1448
000000000000142c	ldp	x29, x30, [sp, #0x10]
0000000000001430	ldp	x20, x19, [sp], #0x20
0000000000001434	autibsp
0000000000001438	eor	x16, x30, x30, lsl #1
000000000000143c	tbz	x16, #0x3e, 0x1444
0000000000001440	brk	#0xc471
0000000000001444	braaz	x1
0000000000001448	ldp	x29, x30, [sp, #0x10]
000000000000144c	ldp	x20, x19, [sp], #0x20
0000000000001450	retab
0000000000001454	mov	x0, x1
0000000000001458	bl	__os_alloc.cold.1
__platform_strcpy:
000000000000145c	pacibsp
0000000000001460	stp	x20, x19, [sp, #-0x20]!
0000000000001464	stp	x29, x30, [sp, #0x10]
0000000000001468	add	x29, sp, #0x10
000000000000146c	mov	x19, x1
0000000000001470	mov	x20, x0
0000000000001474	mov	x0, x1
0000000000001478	bl	__platform_strlen
000000000000147c	add	x2, x0, #0x1
0000000000001480	mov	x0, x20
0000000000001484	mov	x1, x19
0000000000001488	bl	__platform_memmove
000000000000148c	mov	x0, x20
0000000000001490	ldp	x29, x30, [sp, #0x10]
0000000000001494	ldp	x20, x19, [sp], #0x20
0000000000001498	retab
000000000000149c	udf	#0x0
00000000000014a0	.long	0x03020100
00000000000014a4	.long	0x07060504
00000000000014a8	add	w8, w8, w10, lsl #2
00000000000014ac	.long	0x0f0e0d0c
00000000000014b0	udf	#0x0
00000000000014b4	udf	#0x0
00000000000014b8	udf	#0x0
00000000000014bc	udf	#0x0
__platform_memchr:
00000000000014c0	tst	x2, x2
00000000000014c4	b.eq	0x151c
00000000000014c8	b.mi	0x1550
00000000000014cc	dup.16b	v1, w1
00000000000014d0	and	x1, x0, #0xf
00000000000014d4	and	x0, x0, #0xfffffffffffffff0
00000000000014d8	ldr	q0, [x0]
00000000000014dc	sub.16b	v0, v0, v1
00000000000014e0	adr	x3, #-64
00000000000014e4	ldr	q3, [x3], #0x10
00000000000014e8	sub	x3, x3, x1
00000000000014ec	ldr	q2, [x3]
00000000000014f0	orr.16b	v0, v0, v2
00000000000014f4	adds	x2, x2, x1
00000000000014f8	b	0x1508
00000000000014fc	nop
0000000000001500	ldr	q0, [x0, #0x10]!
0000000000001504	sub.16b	v0, v0, v1
0000000000001508	uminv.16b	b2, v0
000000000000150c	fmov	w3, s2
0000000000001510	cbz	w3, 0x1528
0000000000001514	subs	x2, x2, #0x10
0000000000001518	b.hi	0x1500
000000000000151c	eor.16b	v0, v0, v0
0000000000001520	eor	x0, x0, x0
0000000000001524	ret
0000000000001528	eor.16b	v1, v1, v1
000000000000152c	cmhi.16b	v0, v0, v1
0000000000001530	orr.16b	v0, v0, v3
0000000000001534	uminv.16b	b0, v0
0000000000001538	fmov	w3, s0
000000000000153c	add	x0, x0, x3
0000000000001540	eor	x1, x1, x1
0000000000001544	cmp	x3, x2
0000000000001548	csel	x0, x1, x0, hs
000000000000154c	ret
0000000000001550	dup.16b	v1, w1
0000000000001554	and	x1, x0, #0xf
0000000000001558	and	x0, x0, #0xfffffffffffffff0
000000000000155c	ldr	q0, [x0]
0000000000001560	sub.16b	v0, v0, v1
0000000000001564	adr	x3, #-196
0000000000001568	ldr	q3, [x3], #0x10
000000000000156c	sub	x3, x3, x1
0000000000001570	ldr	q2, [x3]
0000000000001574	orr.16b	v0, v0, v2
0000000000001578	b	0x1588
000000000000157c	nop
0000000000001580	ldr	q0, [x0, #0x10]!
0000000000001584	sub.16b	v0, v0, v1
0000000000001588	uminv.16b	b2, v0
000000000000158c	fmov	w3, s2
0000000000001590	cbnz	w3, 0x1580
0000000000001594	eor.16b	v1, v1, v1
0000000000001598	cmhi.16b	v0, v0, v1
000000000000159c	orr.16b	v0, v0, v3
00000000000015a0	uminv.16b	b0, v0
00000000000015a4	fmov	w3, s0
00000000000015a8	add	x0, x0, x3
00000000000015ac	ret
00000000000015b0	udf	#0x0
00000000000015b4	udf	#0x0
00000000000015b8	udf	#0x0
00000000000015bc	udf	#0x0
00000000000015c0	.long	0x03020100
00000000000015c4	.long	0x07060504
00000000000015c8	add	w8, w8, w10, lsl #2
00000000000015cc	.long	0x0f0e0d0c
__platform_memcmp:
00000000000015d0	subs	x2, x2, #0x10
00000000000015d4	b.lo	0x165c
00000000000015d8	b.eq	0x1618
00000000000015dc	add	x4, x0, x2
00000000000015e0	add	x5, x1, x2
00000000000015e4	nop
00000000000015e8	nop
00000000000015ec	nop
00000000000015f0	ldr	q0, [x0], #0x10
00000000000015f4	ldr	q1, [x1], #0x10
00000000000015f8	cmeq.16b	v1, v0, v1
00000000000015fc	uminv.16b	b0, v1
0000000000001600	fmov	w3, s0
0000000000001604	cbz	w3, 0x1638
0000000000001608	subs	x2, x2, #0x10
000000000000160c	b.hi	0x15f0
0000000000001610	mov	x0, x4
0000000000001614	mov	x1, x5
0000000000001618	ldr	q0, [x0], #0x10
000000000000161c	ldr	q1, [x1], #0x10
0000000000001620	cmeq.16b	v1, v0, v1
0000000000001624	uminv.16b	b0, v1
0000000000001628	fmov	w3, s0
000000000000162c	cbz	w3, 0x1638
0000000000001630	eor	x0, x0, x0
0000000000001634	ret
0000000000001638	ldr	q0, 0x15c0
000000000000163c	orr.16b	v1, v1, v0
0000000000001640	uminv.16b	b1, v1
0000000000001644	fmov	w3, s1
0000000000001648	sub	x3, x3, #0x10
000000000000164c	ldrb	w0, [x0, x3]
0000000000001650	ldrb	w1, [x1, x3]
0000000000001654	sub	x0, x0, x1
0000000000001658	ret
000000000000165c	adds	x2, x2, #0x8
0000000000001660	b.lo	0x1678
0000000000001664	ldr	x4, [x0], #0x8
0000000000001668	ldr	x5, [x1], #0x8
000000000000166c	subs	x3, x4, x5
0000000000001670	b.ne	0x16a0
0000000000001674	sub	x2, x2, #0x8
0000000000001678	adds	x2, x2, #0x4
000000000000167c	b.lo	0x1694
0000000000001680	ldr	w4, [x0], #0x4
0000000000001684	ldr	w5, [x1], #0x4
0000000000001688	subs	x3, x4, x5
000000000000168c	b.ne	0x16a0
0000000000001690	b	0x16e0
0000000000001694	add	x2, x2, #0x4
0000000000001698	eor	x3, x3, x3
000000000000169c	b	0x16e0
00000000000016a0	rev	x3, x3
00000000000016a4	clz	x3, x3
00000000000016a8	and	x3, x3, #0xfffffffffffffff8
00000000000016ac	lsr	x4, x4, x3
00000000000016b0	lsr	x5, x5, x3
00000000000016b4	uxtb	w4, w4
00000000000016b8	uxtb	w5, w5
00000000000016bc	sub	x0, x4, x5
00000000000016c0	ret
00000000000016c4	nop
00000000000016c8	nop
00000000000016cc	nop
00000000000016d0	ldrb	w4, [x0], #0x1
00000000000016d4	ldrb	w5, [x1], #0x1
00000000000016d8	subs	x3, x4, x5
00000000000016dc	b.ne	0x16e8
00000000000016e0	subs	x2, x2, #0x1
00000000000016e4	b.hs	0x16d0
00000000000016e8	mov	x0, x3
00000000000016ec	ret
_OSAtomicDequeue:
00000000000016f0	tst	x0, #0xf
00000000000016f4	b.ne	0x1748
00000000000016f8	ldapr	x2, [x0]
00000000000016fc	ldr	x8, [x0, #0x8]
0000000000001700	cbz	x2, 0x1740
0000000000001704	ldr	x4, [x2, x1]
0000000000001708	add	x5, x8, #0x1
000000000000170c	mov	x3, x8
0000000000001710	mov	x6, x2
0000000000001714	mov	x7, x3
0000000000001718	caspa	x6, x7, x4, x5, [x0]
000000000000171c	cmp	x7, x8
0000000000001720	cset	w9, eq
0000000000001724	cmp	x6, x2
0000000000001728	cset	w10, eq
000000000000172c	ands	w9, w10, w9
0000000000001730	csel	x2, x2, x6, ne
0000000000001734	csel	x8, x8, x7, ne
0000000000001738	tbnz	w9, #0x0, 0x1740
000000000000173c	cbnz	x2, 0x1704
0000000000001740	mov	x0, x2
0000000000001744	ret
0000000000001748	b	__OSAtomicDequeue_misalign
__platform_strlcpy:
000000000000174c	pacibsp
0000000000001750	stp	x22, x21, [sp, #-0x30]!
0000000000001754	stp	x20, x19, [sp, #0x10]
0000000000001758	stp	x29, x30, [sp, #0x20]
000000000000175c	add	x29, sp, #0x20
0000000000001760	mov	x22, x2
0000000000001764	mov	x21, x1
0000000000001768	mov	x20, x0
000000000000176c	mov	x0, x1
0000000000001770	bl	__platform_strlen
0000000000001774	mov	x19, x0
0000000000001778	cmp	x0, x22
000000000000177c	b.hs	0x1794
0000000000001780	add	x2, x19, #0x1
0000000000001784	mov	x0, x20
0000000000001788	mov	x1, x21
000000000000178c	bl	__platform_memmove
0000000000001790	b	0x17b0
0000000000001794	cbz	x22, 0x17b0
0000000000001798	sub	x22, x22, #0x1
000000000000179c	mov	x0, x20
00000000000017a0	mov	x1, x21
00000000000017a4	mov	x2, x22
00000000000017a8	bl	__platform_memmove
00000000000017ac	strb	wzr, [x20, x22]
00000000000017b0	mov	x0, x19
00000000000017b4	ldp	x29, x30, [sp, #0x20]
00000000000017b8	ldp	x20, x19, [sp, #0x10]
00000000000017bc	ldp	x22, x21, [sp], #0x30
00000000000017c0	retab
00000000000017c4	udf	#0x0
00000000000017c8	udf	#0x0
00000000000017cc	udf	#0x0
00000000000017d0	udf	#0x0
00000000000017d4	udf	#0x0
00000000000017d8	udf	#0x0
00000000000017dc	udf	#0x0
__platform_memset_pattern4:
00000000000017e0	ld1r.4s	{ v0 }, [x1]
00000000000017e4	cmp	x2, #0x40
00000000000017e8	b.lo	0x1930
00000000000017ec	cmp	x2, #0x8, lsl #12
00000000000017f0	b.lo	0x18b0
00000000000017f4	b	0x1834
00000000000017f8	nop
00000000000017fc	nop
__platform_memset_pattern8:
0000000000001800	ld1r.2d	{ v0 }, [x1]
0000000000001804	cmp	x2, #0x40
0000000000001808	b.lo	0x1930
000000000000180c	cmp	x2, #0x8, lsl #12
0000000000001810	b.lo	0x18b0
0000000000001814	b	0x1834
0000000000001818	nop
000000000000181c	nop
__platform_memset_pattern16:
0000000000001820	ld1.16b	{ v0 }, [x1]
0000000000001824	cmp	x2, #0x40
0000000000001828	b.lo	0x1930
000000000000182c	cmp	x2, #0x8, lsl #12
0000000000001830	b.lo	0x18b0
0000000000001834	mov.16b	v1, v0
0000000000001838	stnp	q0, q1, [x0]
000000000000183c	stnp	q0, q1, [x0, #0x20]
0000000000001840	add	x3, x0, #0x40
0000000000001844	and	x3, x3, #0xffffffffffffffc0
0000000000001848	add	x2, x2, x0
000000000000184c	sub	x1, x3, x0
0000000000001850	add	x4, x3, #0x40
0000000000001854	subs	x2, x2, x4
0000000000001858	adr	x4, #296
000000000000185c	and	x1, x1, #0xf
0000000000001860	add	x5, x1, x4
0000000000001864	b.ls	0x1888
0000000000001868	ld1.16b	{ v1 }, [x5]
000000000000186c	tbl.16b	v1, { v0 }, v1
0000000000001870	mov.16b	v2, v1
0000000000001874	stnp	q1, q2, [x3]
0000000000001878	stnp	q1, q2, [x3, #0x20]
000000000000187c	add	x3, x3, #0x40
0000000000001880	subs	x2, x2, #0x40
0000000000001884	b.hi	0x1874
0000000000001888	add	x1, x1, x2
000000000000188c	and	x1, x1, #0xf
0000000000001890	add	x1, x1, x4
0000000000001894	ld1.16b	{ v1 }, [x1]
0000000000001898	tbl.16b	v1, { v0 }, v1
000000000000189c	mov.16b	v2, v1
00000000000018a0	add	x3, x3, x2
00000000000018a4	stnp	q1, q2, [x3]
00000000000018a8	stnp	q1, q2, [x3, #0x20]
00000000000018ac	ret
00000000000018b0	mov.16b	v1, v0
00000000000018b4	stp	q0, q1, [x0]
00000000000018b8	stp	q0, q1, [x0, #0x20]
00000000000018bc	add	x3, x0, #0x40
00000000000018c0	and	x3, x3, #0xffffffffffffffc0
00000000000018c4	add	x2, x2, x0
00000000000018c8	sub	x1, x3, x0
00000000000018cc	add	x4, x3, #0x40
00000000000018d0	subs	x2, x2, x4
00000000000018d4	adr	x4, #172
00000000000018d8	and	x1, x1, #0xf
00000000000018dc	add	x5, x1, x4
00000000000018e0	b.ls	0x1904
00000000000018e4	ld1.16b	{ v1 }, [x5]
00000000000018e8	tbl.16b	v1, { v0 }, v1
00000000000018ec	mov.16b	v2, v1
00000000000018f0	stp	q1, q2, [x3]
00000000000018f4	stp	q1, q2, [x3, #0x20]
00000000000018f8	add	x3, x3, #0x40
00000000000018fc	subs	x2, x2, #0x40
0000000000001900	b.hi	0x18f0
0000000000001904	add	x1, x1, x2
0000000000001908	and	x1, x1, #0xf
000000000000190c	add	x1, x1, x4
0000000000001910	ld1.16b	{ v1 }, [x1]
0000000000001914	tbl.16b	v1, { v0 }, v1
0000000000001918	mov.16b	v2, v1
000000000000191c	add	x3, x3, x2
0000000000001920	stp	q1, q2, [x3]
0000000000001924	stp	q1, q2, [x3, #0x20]
0000000000001928	ret
000000000000192c	str	q0, [x0], #0x10
0000000000001930	subs	x2, x2, #0x10
0000000000001934	b.hs	0x192c
0000000000001938	adds	x2, x2, #0x10
000000000000193c	b.eq	0x1960
0000000000001940	mov.d	x4, v0[0]
0000000000001944	mov.d	x5, v0[1]
0000000000001948	strb	w4, [x0], #0x1
000000000000194c	lsr	x4, x4, #8
0000000000001950	orr	x4, x4, x5, lsl #56
0000000000001954	lsr	x5, x5, #8
0000000000001958	subs	x2, x2, #0x1
000000000000195c	b.ne	0x1948
0000000000001960	ret
0000000000001964	nop
0000000000001968	nop
000000000000196c	nop
0000000000001970	nop
0000000000001974	nop
0000000000001978	nop
000000000000197c	nop
0000000000001980	.long	0x03020100
0000000000001984	.long	0x07060504
0000000000001988	add	w8, w8, w10, lsl #2
000000000000198c	.long	0x0f0e0d0c
0000000000001990	.long	0x03020100
0000000000001994	.long	0x07060504
0000000000001998	add	w8, w8, w10, lsl #2
000000000000199c	.long	0x0f0e0d0c
_os_unfair_lock_assert_not_owner:
00000000000019a0	pacibsp
00000000000019a4	stp	x29, x30, [sp, #-0x10]!
00000000000019a8	mov	x29, sp
00000000000019ac	mrs	x8, TPIDRRO_EL0
00000000000019b0	ldr	w8, [x8, #0x18]
00000000000019b4	ldr	w0, [x0]
00000000000019b8	orr	w9, w0, #0x1
00000000000019bc	cmp	w9, w8
00000000000019c0	b.eq	0x19cc
00000000000019c4	ldp	x29, x30, [sp], #0x10
00000000000019c8	retab
00000000000019cc	bl	_os_unfair_lock_assert_not_owner.cold.1
_OSAtomicEnqueue:
00000000000019d0	mov	x4, x1
00000000000019d4	tst	x0, #0xf
00000000000019d8	b.ne	0x1a10
00000000000019dc	ldr	x6, [x0]
00000000000019e0	ldr	x7, [x0, #0x8]
00000000000019e4	str	x6, [x4, x2]
00000000000019e8	add	x5, x7, #0x1
00000000000019ec	mov	x8, x6
00000000000019f0	mov	x9, x7
00000000000019f4	caspl	x8, x9, x4, x5, [x0]
00000000000019f8	cmp	x9, x7
00000000000019fc	ccmp	x8, x6, #0x0, eq
0000000000001a00	mov	x6, x8
0000000000001a04	mov	x7, x9
0000000000001a08	b.ne	0x19e4
0000000000001a0c	ret
0000000000001a10	mov	x1, x4
0000000000001a14	b	__OSAtomicEnqueue_misalign
__os_unfair_lock_lock_slow:
0000000000001a18	pacibsp
0000000000001a1c	stp	x26, x25, [sp, #-0x50]!
0000000000001a20	stp	x24, x23, [sp, #0x10]
0000000000001a24	stp	x22, x21, [sp, #0x20]
0000000000001a28	stp	x20, x19, [sp, #0x30]
0000000000001a2c	stp	x29, x30, [sp, #0x40]
0000000000001a30	add	x29, sp, #0x40
0000000000001a34	mov	x20, x1
0000000000001a38	mov	w8, #-0x3050001
0000000000001a3c	tst	w1, w8
0000000000001a40	b.ne	0x1b1c
0000000000001a44	mov	x19, x3
0000000000001a48	mov	x21, x2
0000000000001a4c	mov	x22, x0
0000000000001a50	mov	w25, #0x0
0000000000001a54	mov	w8, #0x2
0000000000001a58	movk	w8, #0x100, lsl #16
0000000000001a5c	orr	w23, w20, w8
0000000000001a60	bic	w26, w19, w25
0000000000001a64	ldr	w24, [x22]
0000000000001a68	cbnz	w24, 0x1a78
0000000000001a6c	casa	w24, w26, [x22]
0000000000001a70	cmp	w24, #0x0
0000000000001a74	b.eq	0x1b00
0000000000001a78	tst	w20, #0x1000000
0000000000001a7c	orr	w8, w24, #0x1
0000000000001a80	ccmn	w8, #0x1, #0x0, ne
0000000000001a84	cset	w9, ne
0000000000001a88	cmp	w8, w19
0000000000001a8c	ccmp	w9, #0x0, #0x4, eq
0000000000001a90	b.ne	0x1b44
0000000000001a94	and	w8, w24, #0xfffffffe
0000000000001a98	cmp	w24, w8
0000000000001a9c	b.eq	0x1ab4
0000000000001aa0	mov	x9, x24
0000000000001aa4	cas	w9, w8, [x22]
0000000000001aa8	cmp	w9, w24
0000000000001aac	mov	x24, x8
0000000000001ab0	b.ne	0x1a64
0000000000001ab4	mov	w2, w24
0000000000001ab8	mov	x0, x23
0000000000001abc	mov	x1, x22
0000000000001ac0	mov	x3, x21
0000000000001ac4	mov	x4, #0x0
0000000000001ac8	bl	0x7370 ; symbol stub for: ___ulock_wait2
0000000000001acc	tbz	w0, #0x1f, 0x1af4
0000000000001ad0	neg	w8, w0
0000000000001ad4	cmp	w8, #0xd
0000000000001ad8	b.le	0x1ae8
0000000000001adc	cmp	w8, #0xe
0000000000001ae0	b.eq	0x1a64
0000000000001ae4	b	0x1b4c
0000000000001ae8	cmp	w8, #0x4
0000000000001aec	b.eq	0x1a64
0000000000001af0	b	0x1b68
0000000000001af4	cmp	w0, #0x0
0000000000001af8	csinc	w25, w25, wzr, eq
0000000000001afc	b	0x1a60
0000000000001b00	mov	w0, #0x1
0000000000001b04	ldp	x29, x30, [sp, #0x40]
0000000000001b08	ldp	x20, x19, [sp, #0x30]
0000000000001b0c	ldp	x22, x21, [sp, #0x20]
0000000000001b10	ldp	x24, x23, [sp, #0x10]
0000000000001b14	ldp	x26, x25, [sp], #0x50
0000000000001b18	retab
0000000000001b1c	and	w8, w20, #0xfeffffff
0000000000001b20	stp	x20, x21, [sp, #-0x10]!
0000000000001b24	adrp	x20, 6 ; 0x7000
0000000000001b28	add	x20, x20, #0xb48 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Invalid options"
0000000000001b2c	adrp	x21, 15 ; 0x10000
0000000000001b30	add	x21, x21, #0x0
0000000000001b34	str	x20, [x21, #0x8]
0000000000001b38	str	x8, [x21, #0x38]
0000000000001b3c	ldp	x20, x21, [sp], #0x10
0000000000001b40	brk	#0x1
0000000000001b44	mov	x0, x19
0000000000001b48	bl	__os_unfair_lock_recursive_abort
0000000000001b4c	mov	w0, #0x0
0000000000001b50	cmp	w8, #0x3c
0000000000001b54	b.eq	0x1b04
0000000000001b58	cmp	w8, #0x69
0000000000001b5c	b.ne	0x1b68
0000000000001b60	mov	x0, x24
0000000000001b64	bl	__os_unfair_lock_corruption_abort
0000000000001b68	stp	x20, x21, [sp, #-0x10]!
0000000000001b6c	adrp	x20, 6 ; 0x7000
0000000000001b70	add	x20, x20, #0xb76 ; literal pool for: "BUG IN LIBPLATFORM: ulock_wait2 failure"
0000000000001b74	adrp	x21, 15 ; 0x10000
0000000000001b78	add	x21, x21, #0x0
0000000000001b7c	str	x20, [x21, #0x8]
0000000000001b80	str	x8, [x21, #0x38]
0000000000001b84	ldp	x20, x21, [sp], #0x10
0000000000001b88	brk	#0x1
__os_unfair_lock_unlock_slow:
0000000000001b8c	pacibsp
0000000000001b90	stp	x20, x19, [sp, #-0x20]!
0000000000001b94	stp	x29, x30, [sp, #0x10]
0000000000001b98	add	x29, sp, #0x10
0000000000001b9c	mov	x19, x0
0000000000001ba0	orr	w0, w2, #0x1
0000000000001ba4	cmp	w0, w1
0000000000001ba8	b.ne	0x1be8
0000000000001bac	tbnz	w2, #0x0, 0x1bec
0000000000001bb0	mov	w0, #0x2
0000000000001bb4	movk	w0, #0x100, lsl #16
0000000000001bb8	mov	x1, x19
0000000000001bbc	mov	x2, #0x0
0000000000001bc0	bl	0x7380 ; symbol stub for: ___ulock_wake
0000000000001bc4	tbz	w0, #0x1f, 0x1bdc
0000000000001bc8	cmn	w0, #0x4
0000000000001bcc	b.eq	0x1bb0
0000000000001bd0	neg	w8, w0
0000000000001bd4	cmp	w8, #0x2
0000000000001bd8	b.ne	0x1c14
0000000000001bdc	ldp	x29, x30, [sp, #0x10]
0000000000001be0	ldp	x20, x19, [sp], #0x20
0000000000001be4	retab
0000000000001be8	bl	__os_unfair_lock_unowned_abort
0000000000001bec	mov	w8, w2
0000000000001bf0	stp	x20, x21, [sp, #-0x10]!
0000000000001bf4	adrp	x20, 6 ; 0x7000
0000000000001bf8	add	x20, x20, #0xb9e ; literal pool for: "BUG IN LIBPLATFORM: unlock_slow with no waiters"
0000000000001bfc	adrp	x21, 15 ; 0x10000
0000000000001c00	add	x21, x21, #0x0
0000000000001c04	str	x20, [x21, #0x8]
0000000000001c08	str	x8, [x21, #0x38]
0000000000001c0c	ldp	x20, x21, [sp], #0x10
0000000000001c10	brk	#0x1
0000000000001c14	stp	x20, x21, [sp, #-0x10]!
0000000000001c18	adrp	x20, 6 ; 0x7000
0000000000001c1c	add	x20, x20, #0xbce ; literal pool for: "BUG IN LIBPLATFORM: ulock_wake failure"
0000000000001c20	adrp	x21, 15 ; 0x10000
0000000000001c24	add	x21, x21, #0x0
0000000000001c28	str	x20, [x21, #0x8]
0000000000001c2c	str	x8, [x21, #0x38]
0000000000001c30	ldp	x20, x21, [sp], #0x10
0000000000001c34	brk	#0x1
__platform_strstr:
0000000000001c38	pacibsp
0000000000001c3c	stp	x24, x23, [sp, #-0x40]!
0000000000001c40	stp	x22, x21, [sp, #0x10]
0000000000001c44	stp	x20, x19, [sp, #0x20]
0000000000001c48	stp	x29, x30, [sp, #0x30]
0000000000001c4c	add	x29, sp, #0x30
0000000000001c50	mov	x19, x1
0000000000001c54	mov	x20, x0
0000000000001c58	ldrb	w23, [x19], #0x1
0000000000001c5c	cbz	w23, 0x1c9c
0000000000001c60	mov	x0, x19
0000000000001c64	bl	__platform_strlen
0000000000001c68	mov	x22, x0
0000000000001c6c	ldrb	w8, [x20]
0000000000001c70	cbz	w8, 0x1ca4
0000000000001c74	mov	x21, x20
0000000000001c78	add	x20, x20, #0x1
0000000000001c7c	cmp	w8, w23
0000000000001c80	b.ne	0x1c6c
0000000000001c84	mov	x0, x20
0000000000001c88	mov	x1, x19
0000000000001c8c	mov	x2, x22
0000000000001c90	bl	0x72e4 ; symbol stub for: __platform_strncmp
0000000000001c94	cbnz	w0, 0x1c6c
0000000000001c98	b	0x1ca8
0000000000001c9c	mov	x21, x20
0000000000001ca0	b	0x1ca8
0000000000001ca4	mov	x21, #0x0
0000000000001ca8	mov	x0, x21
0000000000001cac	ldp	x29, x30, [sp, #0x30]
0000000000001cb0	ldp	x20, x19, [sp, #0x20]
0000000000001cb4	ldp	x22, x21, [sp, #0x10]
0000000000001cb8	ldp	x24, x23, [sp], #0x40
0000000000001cbc	retab
__platform_strncpy:
0000000000001cc0	pacibsp
0000000000001cc4	stp	x24, x23, [sp, #-0x40]!
0000000000001cc8	stp	x22, x21, [sp, #0x10]
0000000000001ccc	stp	x20, x19, [sp, #0x20]
0000000000001cd0	stp	x29, x30, [sp, #0x30]
0000000000001cd4	add	x29, sp, #0x30
0000000000001cd8	mov	x21, x2
0000000000001cdc	mov	x20, x1
0000000000001ce0	mov	x19, x0
0000000000001ce4	mov	x0, x1
0000000000001ce8	mov	x1, x2
0000000000001cec	bl	__platform_strnlen
0000000000001cf0	subs	x22, x21, x0
0000000000001cf4	b.ls	0x1d20
0000000000001cf8	mov	x23, x0
0000000000001cfc	mov	x0, x19
0000000000001d00	mov	x1, x20
0000000000001d04	mov	x2, x23
0000000000001d08	bl	__platform_memmove
0000000000001d0c	add	x0, x19, x23
0000000000001d10	mov	w1, #0x0
0000000000001d14	mov	x2, x22
0000000000001d18	bl	__platform_memset
0000000000001d1c	b	0x1d30
0000000000001d20	mov	x0, x19
0000000000001d24	mov	x1, x20
0000000000001d28	mov	x2, x21
0000000000001d2c	bl	__platform_memmove
0000000000001d30	mov	x0, x19
0000000000001d34	ldp	x29, x30, [sp, #0x30]
0000000000001d38	ldp	x20, x19, [sp, #0x20]
0000000000001d3c	ldp	x22, x21, [sp, #0x10]
0000000000001d40	ldp	x24, x23, [sp], #0x40
0000000000001d44	retab
_os_unfair_lock_trylock:
0000000000001d48	mov	w8, #0x0
0000000000001d4c	mrs	x9, TPIDRRO_EL0
0000000000001d50	ldr	w9, [x9, #0x18]
0000000000001d54	casa	w8, w9, [x0]
0000000000001d58	cmp	w8, #0x0
0000000000001d5c	cset	w0, eq
0000000000001d60	ret
__os_nospin_lock_lock:
0000000000001d64	mov	w8, #0x0
0000000000001d68	mrs	x9, TPIDRRO_EL0
0000000000001d6c	ldr	w9, [x9, #0x18]
0000000000001d70	casa	w8, w9, [x0]
0000000000001d74	cmp	w8, #0x0
0000000000001d78	b.ne	0x1d80
0000000000001d7c	ret
0000000000001d80	b	__os_nospin_lock_lock_slow
__os_nospin_lock_unlock:
0000000000001d84	mrs	x8, TPIDRRO_EL0
0000000000001d88	ldr	w8, [x8, #0x18]
0000000000001d8c	swpl	wzr, w1, [x0]
0000000000001d90	cmp	w1, w8
0000000000001d94	b.ne	0x1d9c
0000000000001d98	ret
0000000000001d9c	b	__os_nospin_lock_unlock_slow
__os_nospin_lock_trylock:
0000000000001da0	mov	w8, #0x0
0000000000001da4	mrs	x9, TPIDRRO_EL0
0000000000001da8	ldr	w9, [x9, #0x18]
0000000000001dac	casa	w8, w9, [x0]
0000000000001db0	cmp	w8, #0x0
0000000000001db4	cset	w0, eq
0000000000001db8	ret
_os_unfair_recursive_lock_tryunlock4objc:
0000000000001dbc	pacibsp
0000000000001dc0	stp	x20, x19, [sp, #-0x20]!
0000000000001dc4	stp	x29, x30, [sp, #0x10]
0000000000001dc8	add	x29, sp, #0x10
0000000000001dcc	ldr	w8, [x0]
0000000000001dd0	orr	w19, w8, #0x1
0000000000001dd4	mrs	x8, TPIDRRO_EL0
0000000000001dd8	ldr	w20, [x8, #0x18]
0000000000001ddc	cmp	w19, w20
0000000000001de0	b.ne	0x1df8
0000000000001de4	ldr	w9, [x0, #0x4]
0000000000001de8	cbnz	w9, 0x1e0c
0000000000001dec	swpl	wzr, w2, [x0]
0000000000001df0	cmp	w2, w19
0000000000001df4	b.ne	0x1e28
0000000000001df8	cmp	w19, w20
0000000000001dfc	cset	w0, eq
0000000000001e00	ldp	x29, x30, [sp, #0x10]
0000000000001e04	ldp	x20, x19, [sp], #0x20
0000000000001e08	retab
0000000000001e0c	ldr	w8, [x0]
0000000000001e10	orr	w8, w8, #0x1
0000000000001e14	cmp	w8, w19
0000000000001e18	b.ne	0x1e34
0000000000001e1c	sub	w8, w9, #0x1
0000000000001e20	str	w8, [x0, #0x4]
0000000000001e24	b	0x1df8
0000000000001e28	mov	x1, x19
0000000000001e2c	bl	__os_unfair_lock_unlock_slow
0000000000001e30	b	0x1df8
0000000000001e34	mov	x0, x8
0000000000001e38	bl	__os_unfair_lock_unowned_abort
__setjmp:
0000000000001e3c	pacibsp
0000000000001e40	mov	x10, x29
0000000000001e44	pacdb	x10, sp
0000000000001e48	mov	x12, sp
0000000000001e4c	mov	w9, #0xcbed
0000000000001e50	pacdb	x12, x9
0000000000001e54	mrs	x16, TPIDRRO_EL0
0000000000001e58	ldr	x16, [x16, #0x38]
0000000000001e5c	eor	x10, x10, x16
0000000000001e60	eor	x11, x30, x16
0000000000001e64	eor	x12, x12, x16
0000000000001e68	stp	x19, x20, [x0]
0000000000001e6c	stp	x21, x22, [x0, #0x10]
0000000000001e70	stp	x23, x24, [x0, #0x20]
0000000000001e74	stp	x25, x26, [x0, #0x30]
0000000000001e78	stp	x27, x28, [x0, #0x40]
0000000000001e7c	stp	x10, x11, [x0, #0x50]
0000000000001e80	str	x12, [x0, #0x60]
0000000000001e84	stp	d8, d9, [x0, #0x70]
0000000000001e88	stp	d10, d11, [x0, #0x80]
0000000000001e8c	stp	d12, d13, [x0, #0x90]
0000000000001e90	stp	d14, d15, [x0, #0xa0]
0000000000001e94	mov	w0, #0x0
0000000000001e98	retab
__longjmp:
0000000000001e9c	ldp	x19, x20, [x0]
0000000000001ea0	ldp	x21, x22, [x0, #0x10]
0000000000001ea4	ldp	x23, x24, [x0, #0x20]
0000000000001ea8	ldp	x25, x26, [x0, #0x30]
0000000000001eac	ldp	x27, x28, [x0, #0x40]
0000000000001eb0	ldp	x10, x11, [x0, #0x50]
0000000000001eb4	ldr	x12, [x0, #0x60]
0000000000001eb8	ldp	d8, d9, [x0, #0x70]
0000000000001ebc	ldp	d10, d11, [x0, #0x80]
0000000000001ec0	ldp	d12, d13, [x0, #0x90]
0000000000001ec4	ldp	d14, d15, [x0, #0xa0]
0000000000001ec8	mrs	x16, TPIDRRO_EL0
0000000000001ecc	ldr	x16, [x16, #0x38]
0000000000001ed0	eor	x10, x10, x16
0000000000001ed4	eor	x30, x11, x16
0000000000001ed8	eor	x12, x12, x16
0000000000001edc	mov	w9, #0xcbed
0000000000001ee0	autdb	x12, x9
0000000000001ee4	ldr	xzr, [x12]
0000000000001ee8	mov	sp, x12
0000000000001eec	autdb	x10, sp
0000000000001ef0	mov	x29, x10
0000000000001ef4	cmp	w1, #0x0
0000000000001ef8	csinc	w0, w1, wzr, ne
0000000000001efc	retab
_sigsetjmp:
0000000000001f00	str	w1, [x0, #0xb8]
0000000000001f04	cbnz	w1, _setjmp
0000000000001f08	b	__setjmp
_setjmp:
0000000000001f0c	pacibsp
0000000000001f10	stp	x21, x30, [x0]
0000000000001f14	mov	x21, x0
0000000000001f18	orr	w0, wzr, #0x1
0000000000001f1c	mov	x1, #0x0
0000000000001f20	add	x2, x21, #0xb0
0000000000001f24	bl	0x74b0 ; symbol stub for: _sigprocmask
0000000000001f28	mov	x0, x21
0000000000001f2c	ldp	x21, x30, [x0]
0000000000001f30	autibsp
0000000000001f34	eor	x16, x30, x30, lsl #1
0000000000001f38	tbz	x16, #0x3e, __setjmp
0000000000001f3c	brk	#0xc471
_siglongjmp:
0000000000001f40	ldr	w8, [x0, #0xb8]
0000000000001f44	cbnz	w8, _longjmp
0000000000001f48	b	__longjmp
_longjmp:
0000000000001f4c	sub	sp, sp, #0x10
0000000000001f50	mov	x21, x0
0000000000001f54	mov	x22, x1
0000000000001f58	ldr	x8, [x21, #0xb0]
0000000000001f5c	str	x8, [sp, #0x8]
0000000000001f60	orr	w0, wzr, #0x3
0000000000001f64	add	x1, sp, #0x8
0000000000001f68	mov	x2, #0x0
0000000000001f6c	bl	0x74b0 ; symbol stub for: _sigprocmask
0000000000001f70	ldur	x0, [x21, #0xbc]
0000000000001f74	bl	__sigunaltstack
0000000000001f78	mov	x0, x21
0000000000001f7c	mov	x1, x22
0000000000001f80	add	sp, sp, #0x10
0000000000001f84	b	__longjmp
__platform_strlcat:
0000000000001f88	pacibsp
0000000000001f8c	stp	x24, x23, [sp, #-0x40]!
0000000000001f90	stp	x22, x21, [sp, #0x10]
0000000000001f94	stp	x20, x19, [sp, #0x20]
0000000000001f98	stp	x29, x30, [sp, #0x30]
0000000000001f9c	add	x29, sp, #0x30
0000000000001fa0	mov	x21, x2
0000000000001fa4	mov	x22, x1
0000000000001fa8	mov	x23, x0
0000000000001fac	mov	x0, x1
0000000000001fb0	bl	__platform_strlen
0000000000001fb4	mov	x19, x0
0000000000001fb8	mov	x0, x23
0000000000001fbc	mov	x1, x21
0000000000001fc0	bl	__platform_strnlen
0000000000001fc4	subs	x8, x21, x0
0000000000001fc8	b.ne	0x1fd4
0000000000001fcc	mov	x20, x21
0000000000001fd0	b	0x2008
0000000000001fd4	mov	x20, x0
0000000000001fd8	add	x0, x23, x0
0000000000001fdc	cmp	x19, x8
0000000000001fe0	b.hs	0x1ff4
0000000000001fe4	add	x2, x19, #0x1
0000000000001fe8	mov	x1, x22
0000000000001fec	bl	__platform_memmove
0000000000001ff0	b	0x2008
0000000000001ff4	sub	x2, x8, #0x1
0000000000001ff8	mov	x1, x22
0000000000001ffc	bl	__platform_memmove
0000000000002000	add	x8, x21, x23
0000000000002004	sturb	wzr, [x8, #-0x1]
0000000000002008	add	x0, x20, x19
000000000000200c	ldp	x29, x30, [sp, #0x30]
0000000000002010	ldp	x20, x19, [sp, #0x20]
0000000000002014	ldp	x22, x21, [sp, #0x10]
0000000000002018	ldp	x24, x23, [sp], #0x40
000000000000201c	retab
__simple_salloc:
0000000000002020	pacibsp
0000000000002024	sub	sp, sp, #0x30
0000000000002028	stp	x20, x19, [sp, #0x10]
000000000000202c	stp	x29, x30, [sp, #0x20]
0000000000002030	add	x29, sp, #0x20
0000000000002034	adrp	x8, 6 ; 0x8000
0000000000002038	ldr	x8, [x8, #0x10] ; literal pool symbol address: _mach_task_self_
000000000000203c	ldr	w0, [x8]
0000000000002040	adrp	x19, 6 ; 0x8000
0000000000002044	ldr	x19, [x19, #0x18] ; literal pool symbol address: _vm_page_size
0000000000002048	ldr	x2, [x19]
000000000000204c	add	x1, sp, #0x8
0000000000002050	mov	w3, #0x1
0000000000002054	bl	0x74e0 ; symbol stub for: _vm_allocate
0000000000002058	cbz	w0, 0x2064
000000000000205c	mov	x0, #0x0
0000000000002060	b	0x2094
0000000000002064	ldr	x8, [sp, #0x8]
0000000000002068	add	x9, x8, #0x28
000000000000206c	str	x9, [x8]
0000000000002070	ldr	x0, [sp, #0x8]
0000000000002074	ldr	x8, [x19]
0000000000002078	add	x8, x0, x8
000000000000207c	sub	x8, x8, #0x1
0000000000002080	stp	x9, x8, [x0, #0x8]
0000000000002084	adrp	x16, 3 ; 0x5000
0000000000002088	add	x16, x16, #0x5cc
000000000000208c	paciza	x16
0000000000002090	str	x16, [x0, #0x20]
0000000000002094	ldp	x29, x30, [sp, #0x20]
0000000000002098	ldp	x20, x19, [sp, #0x10]
000000000000209c	add	sp, sp, #0x30
00000000000020a0	retab
__simple_vsprintf:
00000000000020a4	pacibsp
00000000000020a8	stp	x29, x30, [sp, #-0x10]!
00000000000020ac	mov	x29, sp
00000000000020b0	mov	x3, x2
00000000000020b4	mov	x2, x1
00000000000020b8	mov	x1, #0x0
00000000000020bc	bl	___simple_bprintf
00000000000020c0	mov	w0, #0x0
00000000000020c4	ldp	x29, x30, [sp], #0x10
00000000000020c8	retab
__simple_sprintf:
00000000000020cc	pacibsp
00000000000020d0	sub	sp, sp, #0x20
00000000000020d4	stp	x29, x30, [sp, #0x10]
00000000000020d8	add	x29, sp, #0x10
00000000000020dc	mov	x2, x1
00000000000020e0	add	x8, x29, #0x10
00000000000020e4	str	x8, [sp, #0x8]
00000000000020e8	add	x3, x29, #0x10
00000000000020ec	mov	x1, #0x0
00000000000020f0	bl	___simple_bprintf
00000000000020f4	mov	w0, #0x0
00000000000020f8	ldp	x29, x30, [sp, #0x10]
00000000000020fc	add	sp, sp, #0x20
0000000000002100	retab
_hex:
0000000000002104	pacibsp
0000000000002108	sub	sp, sp, #0x80
000000000000210c	stp	x28, x27, [sp, #0x20]
0000000000002110	stp	x26, x25, [sp, #0x30]
0000000000002114	stp	x24, x23, [sp, #0x40]
0000000000002118	stp	x22, x21, [sp, #0x50]
000000000000211c	stp	x20, x19, [sp, #0x60]
0000000000002120	stp	x29, x30, [sp, #0x70]
0000000000002124	add	x29, sp, #0x70
0000000000002128	mov	x22, x4
000000000000212c	mov	x23, x3
0000000000002130	mov	x19, x1
0000000000002134	mov	x20, x0
0000000000002138	adrp	x8, 5 ; 0x7000
000000000000213c	add	x8, x8, #0x72d ; literal pool for: "0123456789ABCDEF"
0000000000002140	adrp	x9, 5 ; 0x7000
0000000000002144	add	x9, x9, #0x73e ; literal pool for: "0123456789abcdef"
0000000000002148	cmp	w5, #0x0
000000000000214c	csel	x8, x9, x8, eq
0000000000002150	strb	wzr, [sp, #0x1f]
0000000000002154	mov	x9, sp
0000000000002158	cbz	x2, 0x2184
000000000000215c	add	x21, x9, #0x1f
0000000000002160	and	x9, x2, #0xf
0000000000002164	ldrb	w9, [x8, x9]
0000000000002168	strb	w9, [x21, #-0x1]!
000000000000216c	lsr	x9, x2, #4
0000000000002170	cmp	x2, #0x10
0000000000002174	mov	x2, x9
0000000000002178	b.hs	0x2160
000000000000217c	cbnz	w6, 0x2194
0000000000002180	b	0x2234
0000000000002184	add	x21, x9, #0x1e
0000000000002188	mov	w8, #0x30
000000000000218c	strb	w8, [sp, #0x1e]
0000000000002190	cbz	w6, 0x2234
0000000000002194	sub	w23, w23, #0x2
0000000000002198	cbz	w22, 0x223c
000000000000219c	adrp	x24, 5 ; 0x7000
00000000000021a0	add	x24, x24, #0x630
00000000000021a4	mov	w26, #0x30
00000000000021a8	adrp	x25, 5 ; 0x7000
00000000000021ac	add	x25, x25, #0x632
00000000000021b0	cbz	x19, 0x2200
00000000000021b4	and	w0, w26, #0xff
00000000000021b8	blraaz	x19
00000000000021bc	cbz	x0, 0x2200
00000000000021c0	ldrb	w26, [x0]
00000000000021c4	cbz	w26, 0x2228
00000000000021c8	add	x27, x0, #0x1
00000000000021cc	ldp	x8, x9, [x20, #0x8]
00000000000021d0	cmp	x8, x9
00000000000021d4	b.lo	0x21e8
00000000000021d8	ldr	x8, [x20, #0x20]
00000000000021dc	mov	x0, x20
00000000000021e0	blraaz	x8
00000000000021e4	ldr	x8, [x20, #0x8]
00000000000021e8	add	x9, x8, #0x1
00000000000021ec	str	x9, [x20, #0x8]
00000000000021f0	strb	w26, [x8]
00000000000021f4	ldrb	w26, [x27], #0x1
00000000000021f8	cbnz	w26, 0x21cc
00000000000021fc	b	0x2228
0000000000002200	ldp	x8, x9, [x20, #0x8]
0000000000002204	cmp	x8, x9
0000000000002208	b.lo	0x221c
000000000000220c	ldr	x8, [x20, #0x20]
0000000000002210	mov	x0, x20
0000000000002214	blraaz	x8
0000000000002218	ldr	x8, [x20, #0x8]
000000000000221c	add	x9, x8, #0x1
0000000000002220	str	x9, [x20, #0x8]
0000000000002224	strb	w26, [x8]
0000000000002228	ldrb	w26, [x24, #0x1]!
000000000000222c	cmp	x24, x25
0000000000002230	b.ne	0x21b0
0000000000002234	mov	w24, #0x1
0000000000002238	b	0x2240
000000000000223c	mov	w24, #0x0
0000000000002240	mov	x0, x21
0000000000002244	bl	__platform_strlen
0000000000002248	sub	w23, w23, w0
000000000000224c	cmp	w23, #0x1
0000000000002250	b.lt	0x22ec
0000000000002254	mov	w8, #0x30
0000000000002258	mov	w9, #0x20
000000000000225c	cmp	w22, #0x0
0000000000002260	csel	w22, w9, w8, eq
0000000000002264	cbz	x19, 0x22b4
0000000000002268	mov	x0, x22
000000000000226c	blraaz	x19
0000000000002270	cbz	x0, 0x22b4
0000000000002274	ldrb	w25, [x0]
0000000000002278	cbz	w25, 0x22dc
000000000000227c	add	x26, x0, #0x1
0000000000002280	ldp	x8, x9, [x20, #0x8]
0000000000002284	cmp	x8, x9
0000000000002288	b.lo	0x229c
000000000000228c	ldr	x8, [x20, #0x20]
0000000000002290	mov	x0, x20
0000000000002294	blraaz	x8
0000000000002298	ldr	x8, [x20, #0x8]
000000000000229c	add	x9, x8, #0x1
00000000000022a0	str	x9, [x20, #0x8]
00000000000022a4	strb	w25, [x8]
00000000000022a8	ldrb	w25, [x26], #0x1
00000000000022ac	cbnz	w25, 0x2280
00000000000022b0	b	0x22dc
00000000000022b4	ldp	x8, x9, [x20, #0x8]
00000000000022b8	cmp	x8, x9
00000000000022bc	b.lo	0x22d0
00000000000022c0	ldr	x8, [x20, #0x20]
00000000000022c4	mov	x0, x20
00000000000022c8	blraaz	x8
00000000000022cc	ldr	x8, [x20, #0x8]
00000000000022d0	add	x9, x8, #0x1
00000000000022d4	str	x9, [x20, #0x8]
00000000000022d8	strb	w22, [x8]
00000000000022dc	sub	w8, w23, #0x1
00000000000022e0	cmp	w23, #0x1
00000000000022e4	mov	x23, x8
00000000000022e8	b.gt	0x2264
00000000000022ec	tbnz	w24, #0x0, 0x2408
00000000000022f0	adrp	x22, 5 ; 0x7000
00000000000022f4	add	x22, x22, #0x630
00000000000022f8	mov	w24, #0x30
00000000000022fc	adrp	x23, 5 ; 0x7000
0000000000002300	add	x23, x23, #0x632
0000000000002304	cbz	x19, 0x2354
0000000000002308	and	w0, w24, #0xff
000000000000230c	blraaz	x19
0000000000002310	cbz	x0, 0x2354
0000000000002314	ldrb	w24, [x0]
0000000000002318	cbz	w24, 0x237c
000000000000231c	add	x25, x0, #0x1
0000000000002320	ldp	x8, x9, [x20, #0x8]
0000000000002324	cmp	x8, x9
0000000000002328	b.lo	0x233c
000000000000232c	ldr	x8, [x20, #0x20]
0000000000002330	mov	x0, x20
0000000000002334	blraaz	x8
0000000000002338	ldr	x8, [x20, #0x8]
000000000000233c	add	x9, x8, #0x1
0000000000002340	str	x9, [x20, #0x8]
0000000000002344	strb	w24, [x8]
0000000000002348	ldrb	w24, [x25], #0x1
000000000000234c	cbnz	w24, 0x2320
0000000000002350	b	0x237c
0000000000002354	ldp	x8, x9, [x20, #0x8]
0000000000002358	cmp	x8, x9
000000000000235c	b.lo	0x2370
0000000000002360	ldr	x8, [x20, #0x20]
0000000000002364	mov	x0, x20
0000000000002368	blraaz	x8
000000000000236c	ldr	x8, [x20, #0x8]
0000000000002370	add	x9, x8, #0x1
0000000000002374	str	x9, [x20, #0x8]
0000000000002378	strb	w24, [x8]
000000000000237c	ldrb	w24, [x22, #0x1]!
0000000000002380	cmp	x22, x23
0000000000002384	b.ne	0x2304
0000000000002388	b	0x2408
000000000000238c	cbz	x19, 0x23dc
0000000000002390	and	w0, w22, #0xff
0000000000002394	blraaz	x19
0000000000002398	cbz	x0, 0x23dc
000000000000239c	ldrb	w22, [x0]
00000000000023a0	cbz	w22, 0x2404
00000000000023a4	add	x23, x0, #0x1
00000000000023a8	ldp	x8, x9, [x20, #0x8]
00000000000023ac	cmp	x8, x9
00000000000023b0	b.lo	0x23c4
00000000000023b4	ldr	x8, [x20, #0x20]
00000000000023b8	mov	x0, x20
00000000000023bc	blraaz	x8
00000000000023c0	ldr	x8, [x20, #0x8]
00000000000023c4	add	x9, x8, #0x1
00000000000023c8	str	x9, [x20, #0x8]
00000000000023cc	strb	w22, [x8]
00000000000023d0	ldrb	w22, [x23], #0x1
00000000000023d4	cbnz	w22, 0x23a8
00000000000023d8	b	0x2404
00000000000023dc	ldp	x8, x9, [x20, #0x8]
00000000000023e0	cmp	x8, x9
00000000000023e4	b.lo	0x23f8
00000000000023e8	ldr	x8, [x20, #0x20]
00000000000023ec	mov	x0, x20
00000000000023f0	blraaz	x8
00000000000023f4	ldr	x8, [x20, #0x8]
00000000000023f8	add	x9, x8, #0x1
00000000000023fc	str	x9, [x20, #0x8]
0000000000002400	strb	w22, [x8]
0000000000002404	add	x21, x21, #0x1
0000000000002408	ldrb	w22, [x21]
000000000000240c	cbnz	w22, 0x238c
0000000000002410	ldp	x29, x30, [sp, #0x70]
0000000000002414	ldp	x20, x19, [sp, #0x60]
0000000000002418	ldp	x22, x21, [sp, #0x50]
000000000000241c	ldp	x24, x23, [sp, #0x40]
0000000000002420	ldp	x26, x25, [sp, #0x30]
0000000000002424	ldp	x28, x27, [sp, #0x20]
0000000000002428	add	sp, sp, #0x80
000000000000242c	retab
__simple_string:
0000000000002430	ldr	x8, [x0, #0x8]
0000000000002434	strb	wzr, [x8]
0000000000002438	ldr	x0, [x0]
000000000000243c	ret
__simple_sfree:
0000000000002440	cbz	x0, 0x2490
0000000000002444	pacibsp
0000000000002448	stp	x22, x21, [sp, #-0x30]!
000000000000244c	stp	x20, x19, [sp, #0x10]
0000000000002450	stp	x29, x30, [sp, #0x20]
0000000000002454	add	x29, sp, #0x20
0000000000002458	mov	x19, x0
000000000000245c	adrp	x21, 6 ; 0x8000
0000000000002460	ldr	x21, [x21, #0x18] ; literal pool symbol address: _vm_page_size
0000000000002464	ldr	x1, [x0]
0000000000002468	ldr	x8, [x21]
000000000000246c	sub	x8, x8, #0x1
0000000000002470	adrp	x20, 6 ; 0x8000
0000000000002474	ldr	x20, [x20, #0x10] ; literal pool symbol address: _mach_task_self_
0000000000002478	tst	x8, x1
000000000000247c	b.eq	0x2494
0000000000002480	ldr	x8, [x19, #0x10]
0000000000002484	sub	x8, x8, x19
0000000000002488	add	x2, x8, #0x1
000000000000248c	b	0x24ac
0000000000002490	ret
0000000000002494	ldr	w0, [x20]
0000000000002498	ldr	x8, [x19, #0x10]
000000000000249c	sub	x8, x8, x1
00000000000024a0	add	x2, x8, #0x1
00000000000024a4	bl	0x74f0 ; symbol stub for: _vm_deallocate
00000000000024a8	ldr	x2, [x21]
00000000000024ac	ldr	w0, [x20]
00000000000024b0	mov	x1, x19
00000000000024b4	ldp	x29, x30, [sp, #0x20]
00000000000024b8	ldp	x20, x19, [sp, #0x10]
00000000000024bc	ldp	x22, x21, [sp], #0x30
00000000000024c0	autibsp
00000000000024c4	eor	x16, x30, x30, lsl #1
00000000000024c8	tbz	x16, #0x3e, 0x24d0
00000000000024cc	brk	#0xc471
00000000000024d0	b	0x74f0 ; symbol stub for: _vm_deallocate
_dec:
00000000000024d4	pacibsp
00000000000024d8	sub	sp, sp, #0x70
00000000000024dc	stp	x26, x25, [sp, #0x20]
00000000000024e0	stp	x24, x23, [sp, #0x30]
00000000000024e4	stp	x22, x21, [sp, #0x40]
00000000000024e8	stp	x20, x19, [sp, #0x50]
00000000000024ec	stp	x29, x30, [sp, #0x60]
00000000000024f0	add	x29, sp, #0x60
00000000000024f4	mov	x19, x1
00000000000024f8	mov	x20, x0
00000000000024fc	asr	x8, x2, #63
0000000000002500	add	w22, w8, w3
0000000000002504	lsr	x23, x2, #63
0000000000002508	mov	x8, sp
000000000000250c	strb	wzr, [sp, #0x1f]
0000000000002510	cbz	x2, 0x25ac
0000000000002514	add	x21, x8, #0x1f
0000000000002518	cmp	x2, #0x0
000000000000251c	cneg	x8, x2, mi
0000000000002520	mov	x9, #-0x3333333333333334
0000000000002524	movk	x9, #0xcccd
0000000000002528	mov	w10, #0xa
000000000000252c	umulh	x11, x8, x9
0000000000002530	lsr	x11, x11, #3
0000000000002534	msub	w12, w11, w10, w8
0000000000002538	orr	w12, w12, #0x30
000000000000253c	strb	w12, [x21, #-0x1]!
0000000000002540	cmp	x8, #0xa
0000000000002544	mov	x8, x11
0000000000002548	b.hs	0x252c
000000000000254c	cmp	w4, #0x0
0000000000002550	cset	w25, ne
0000000000002554	tbz	x2, #0x3f, 0x25f8
0000000000002558	cbz	w4, 0x25f8
000000000000255c	cbz	x19, 0x25c4
0000000000002560	mov	w0, #0x2d
0000000000002564	blraaz	x19
0000000000002568	cbz	x0, 0x25c4
000000000000256c	ldrb	w23, [x0]
0000000000002570	cbz	w23, 0x25f4
0000000000002574	add	x24, x0, #0x1
0000000000002578	ldp	x8, x9, [x20, #0x8]
000000000000257c	cmp	x8, x9
0000000000002580	b.lo	0x2594
0000000000002584	ldr	x8, [x20, #0x20]
0000000000002588	mov	x0, x20
000000000000258c	blraaz	x8
0000000000002590	ldr	x8, [x20, #0x8]
0000000000002594	add	x9, x8, #0x1
0000000000002598	str	x9, [x20, #0x8]
000000000000259c	strb	w23, [x8]
00000000000025a0	ldrb	w23, [x24], #0x1
00000000000025a4	cbnz	w23, 0x2578
00000000000025a8	b	0x25f4
00000000000025ac	add	x21, x8, #0x1e
00000000000025b0	mov	w8, #0x30
00000000000025b4	strb	w8, [sp, #0x1e]
00000000000025b8	cmp	w4, #0x0
00000000000025bc	cset	w25, ne
00000000000025c0	b	0x25f8
00000000000025c4	ldp	x8, x9, [x20, #0x8]
00000000000025c8	cmp	x8, x9
00000000000025cc	b.lo	0x25e0
00000000000025d0	ldr	x8, [x20, #0x20]
00000000000025d4	mov	x0, x20
00000000000025d8	blraaz	x8
00000000000025dc	ldr	x8, [x20, #0x8]
00000000000025e0	mov	w23, #0x0
00000000000025e4	add	x9, x8, #0x1
00000000000025e8	str	x9, [x20, #0x8]
00000000000025ec	mov	w9, #0x2d
00000000000025f0	strb	w9, [x8]
00000000000025f4	mov	w25, #0x1
00000000000025f8	sxtw	x22, w22
00000000000025fc	mov	x0, x21
0000000000002600	bl	__platform_strlen
0000000000002604	sub	x24, x22, x0
0000000000002608	cmp	x24, #0x1
000000000000260c	b.lt	0x26a8
0000000000002610	mov	w8, #0x20
0000000000002614	mov	w9, #0x30
0000000000002618	cmp	w25, #0x0
000000000000261c	csel	w22, w9, w8, ne
0000000000002620	cbz	x19, 0x2670
0000000000002624	mov	x0, x22
0000000000002628	blraaz	x19
000000000000262c	cbz	x0, 0x2670
0000000000002630	ldrb	w25, [x0]
0000000000002634	cbz	w25, 0x2698
0000000000002638	add	x26, x0, #0x1
000000000000263c	ldp	x8, x9, [x20, #0x8]
0000000000002640	cmp	x8, x9
0000000000002644	b.lo	0x2658
0000000000002648	ldr	x8, [x20, #0x20]
000000000000264c	mov	x0, x20
0000000000002650	blraaz	x8
0000000000002654	ldr	x8, [x20, #0x8]
0000000000002658	add	x9, x8, #0x1
000000000000265c	str	x9, [x20, #0x8]
0000000000002660	strb	w25, [x8]
0000000000002664	ldrb	w25, [x26], #0x1
0000000000002668	cbnz	w25, 0x263c
000000000000266c	b	0x2698
0000000000002670	ldp	x8, x9, [x20, #0x8]
0000000000002674	cmp	x8, x9
0000000000002678	b.lo	0x268c
000000000000267c	ldr	x8, [x20, #0x20]
0000000000002680	mov	x0, x20
0000000000002684	blraaz	x8
0000000000002688	ldr	x8, [x20, #0x8]
000000000000268c	add	x9, x8, #0x1
0000000000002690	str	x9, [x20, #0x8]
0000000000002694	strb	w22, [x8]
0000000000002698	sub	x8, x24, #0x1
000000000000269c	cmp	x24, #0x1
00000000000026a0	mov	x24, x8
00000000000026a4	b.gt	0x2620
00000000000026a8	cbz	w23, 0x27a8
00000000000026ac	cbz	x19, 0x26fc
00000000000026b0	mov	w0, #0x2d
00000000000026b4	blraaz	x19
00000000000026b8	cbz	x0, 0x26fc
00000000000026bc	ldrb	w22, [x0]
00000000000026c0	cbz	w22, 0x27a8
00000000000026c4	add	x23, x0, #0x1
00000000000026c8	ldp	x8, x9, [x20, #0x8]
00000000000026cc	cmp	x8, x9
00000000000026d0	b.lo	0x26e4
00000000000026d4	ldr	x8, [x20, #0x20]
00000000000026d8	mov	x0, x20
00000000000026dc	blraaz	x8
00000000000026e0	ldr	x8, [x20, #0x8]
00000000000026e4	add	x9, x8, #0x1
00000000000026e8	str	x9, [x20, #0x8]
00000000000026ec	strb	w22, [x8]
00000000000026f0	ldrb	w22, [x23], #0x1
00000000000026f4	cbnz	w22, 0x26c8
00000000000026f8	b	0x27a8
00000000000026fc	ldp	x8, x9, [x20, #0x8]
0000000000002700	cmp	x8, x9
0000000000002704	b.lo	0x2718
0000000000002708	ldr	x8, [x20, #0x20]
000000000000270c	mov	x0, x20
0000000000002710	blraaz	x8
0000000000002714	ldr	x8, [x20, #0x8]
0000000000002718	add	x9, x8, #0x1
000000000000271c	str	x9, [x20, #0x8]
0000000000002720	mov	w9, #0x2d
0000000000002724	strb	w9, [x8]
0000000000002728	b	0x27a8
000000000000272c	cbz	x19, 0x277c
0000000000002730	and	w0, w22, #0xff
0000000000002734	blraaz	x19
0000000000002738	cbz	x0, 0x277c
000000000000273c	ldrb	w22, [x0]
0000000000002740	cbz	w22, 0x27a4
0000000000002744	add	x23, x0, #0x1
0000000000002748	ldp	x8, x9, [x20, #0x8]
000000000000274c	cmp	x8, x9
0000000000002750	b.lo	0x2764
0000000000002754	ldr	x8, [x20, #0x20]
0000000000002758	mov	x0, x20
000000000000275c	blraaz	x8
0000000000002760	ldr	x8, [x20, #0x8]
0000000000002764	add	x9, x8, #0x1
0000000000002768	str	x9, [x20, #0x8]
000000000000276c	strb	w22, [x8]
0000000000002770	ldrb	w22, [x23], #0x1
0000000000002774	cbnz	w22, 0x2748
0000000000002778	b	0x27a4
000000000000277c	ldp	x8, x9, [x20, #0x8]
0000000000002780	cmp	x8, x9
0000000000002784	b.lo	0x2798
0000000000002788	ldr	x8, [x20, #0x20]
000000000000278c	mov	x0, x20
0000000000002790	blraaz	x8
0000000000002794	ldr	x8, [x20, #0x8]
0000000000002798	add	x9, x8, #0x1
000000000000279c	str	x9, [x20, #0x8]
00000000000027a0	strb	w22, [x8]
00000000000027a4	add	x21, x21, #0x1
00000000000027a8	ldrb	w22, [x21]
00000000000027ac	cbnz	w22, 0x272c
00000000000027b0	ldp	x29, x30, [sp, #0x60]
00000000000027b4	ldp	x20, x19, [sp, #0x50]
00000000000027b8	ldp	x22, x21, [sp, #0x40]
00000000000027bc	ldp	x24, x23, [sp, #0x30]
00000000000027c0	ldp	x26, x25, [sp, #0x20]
00000000000027c4	add	sp, sp, #0x70
00000000000027c8	retab
__simple_asl_log:
00000000000027cc	pacibsp
00000000000027d0	stp	x22, x21, [sp, #-0x30]!
00000000000027d4	stp	x20, x19, [sp, #0x10]
00000000000027d8	stp	x29, x30, [sp, #0x20]
00000000000027dc	add	x29, sp, #0x20
00000000000027e0	mov	x19, x2
00000000000027e4	mov	x20, x1
00000000000027e8	mov	x21, x0
00000000000027ec	adrp	x8, 6 ; 0x8000
00000000000027f0	ldr	x8, [x8] ; literal pool symbol address: __os_alloc_once_table
00000000000027f4	ldr	x9, [x8, #0x150]
00000000000027f8	cmn	x9, #0x1
00000000000027fc	b.ne	0x2830
0000000000002800	mov	x0, x21
0000000000002804	bl	_os_log_simple_type_from_asl
0000000000002808	mov	x1, x20
000000000000280c	mov	x2, x19
0000000000002810	ldp	x29, x30, [sp, #0x20]
0000000000002814	ldp	x20, x19, [sp, #0x10]
0000000000002818	ldp	x22, x21, [sp], #0x30
000000000000281c	autibsp
0000000000002820	eor	x16, x30, x30, lsl #1
0000000000002824	tbz	x16, #0x3e, 0x282c
0000000000002828	brk	#0xc471
000000000000282c	b	__os_log_simple_shim
0000000000002830	add	x0, x8, #0x150
0000000000002834	adrp	x16, 1 ; 0x3000
0000000000002838	add	x16, x16, #0xa14
000000000000283c	paciza	x16
0000000000002840	mov	x2, x16
0000000000002844	mov	w1, #0x20
0000000000002848	bl	__os_alloc_once
000000000000284c	b	0x2800
__simple_asl_log_prog:
0000000000002850	pacibsp
0000000000002854	stp	x20, x19, [sp, #-0x20]!
0000000000002858	stp	x29, x30, [sp, #0x10]
000000000000285c	add	x29, sp, #0x10
0000000000002860	mov	x19, x2
0000000000002864	mov	x20, x1
0000000000002868	bl	_os_log_simple_type_from_asl
000000000000286c	mov	x1, x20
0000000000002870	mov	x2, x19
0000000000002874	ldp	x29, x30, [sp, #0x10]
0000000000002878	ldp	x20, x19, [sp], #0x20
000000000000287c	autibsp
0000000000002880	eor	x16, x30, x30, lsl #1
0000000000002884	tbz	x16, #0x3e, 0x288c
0000000000002888	brk	#0xc471
000000000000288c	b	__os_log_simple_shim
__simple_asl_msg_new:
0000000000002890	pacibsp
0000000000002894	stp	x20, x19, [sp, #-0x20]!
0000000000002898	stp	x29, x30, [sp, #0x10]
000000000000289c	add	x29, sp, #0x10
00000000000028a0	bl	__simple_salloc
00000000000028a4	mov	x19, x0
00000000000028a8	cbz	x0, 0x28cc
00000000000028ac	adrp	x1, 5 ; 0x7000
00000000000028b0	add	x1, x1, #0x6af ; literal pool for: "         0"
00000000000028b4	mov	x0, x19
00000000000028b8	bl	__simple_sprintf
00000000000028bc	cbz	w0, 0x28cc
00000000000028c0	mov	x0, x19
00000000000028c4	bl	__simple_sfree
00000000000028c8	mov	x19, #0x0
00000000000028cc	mov	x0, x19
00000000000028d0	ldp	x29, x30, [sp, #0x10]
00000000000028d4	ldp	x20, x19, [sp], #0x20
00000000000028d8	retab
__simple_asl_msg_set:
00000000000028dc	pacibsp
00000000000028e0	sub	sp, sp, #0x40
00000000000028e4	stp	x22, x21, [sp, #0x10]
00000000000028e8	stp	x20, x19, [sp, #0x20]
00000000000028ec	stp	x29, x30, [sp, #0x30]
00000000000028f0	add	x29, sp, #0x30
00000000000028f4	cbz	x0, 0x2940
00000000000028f8	mov	x20, x1
00000000000028fc	cbz	x1, 0x2940
0000000000002900	mov	x21, x2
0000000000002904	mov	x19, x0
0000000000002908	adrp	x1, 5 ; 0x7000
000000000000290c	add	x1, x1, #0x6ba ; literal pool for: " ["
0000000000002910	bl	__simple_sprintf
0000000000002914	cbnz	w0, 0x2940
0000000000002918	adrp	x2, 5 ; 0x7000
000000000000291c	add	x2, x2, #0x6bd ; literal pool for: "%s"
0000000000002920	str	x20, [sp]
0000000000002924	adrp	x16, 0 ; 0x2000
0000000000002928	add	x16, x16, #0xa50
000000000000292c	paciza	x16
0000000000002930	mov	x1, x16
0000000000002934	mov	x0, x19
0000000000002938	bl	__simple_esprintf
000000000000293c	cbz	w0, 0x2954
0000000000002940	ldp	x29, x30, [sp, #0x30]
0000000000002944	ldp	x20, x19, [sp, #0x20]
0000000000002948	ldp	x22, x21, [sp, #0x10]
000000000000294c	add	sp, sp, #0x40
0000000000002950	retab
0000000000002954	cbz	x21, 0x29f0
0000000000002958	adrp	x2, 5 ; 0x7000
000000000000295c	add	x2, x2, #0x6c0 ; literal pool for: " %s"
0000000000002960	str	x21, [sp]
0000000000002964	adrp	x16, 0 ; 0x2000
0000000000002968	add	x16, x16, #0xac4
000000000000296c	paciza	x16
0000000000002970	mov	x1, x16
0000000000002974	mov	x0, x19
0000000000002978	bl	__simple_esprintf
000000000000297c	cbnz	w0, 0x2940
0000000000002980	adrp	x1, 5 ; 0x7000
0000000000002984	add	x1, x1, #0x6c4 ; literal pool for: "Message"
0000000000002988	mov	x0, x20
000000000000298c	bl	0x72d8 ; symbol stub for: __platform_strcmp
0000000000002990	cbnz	w0, 0x29f0
0000000000002994	mov	x0, x19
0000000000002998	bl	__simple_string
000000000000299c	mov	x20, x0
00000000000029a0	bl	__platform_strlen
00000000000029a4	mov	x21, x0
00000000000029a8	add	x8, x20, x0
00000000000029ac	sub	x0, x8, #0x2
00000000000029b0	adrp	x1, 5 ; 0x7000
00000000000029b4	add	x1, x1, #0x6cc ; literal pool for: "\\n"
00000000000029b8	bl	0x72d8 ; symbol stub for: __platform_strcmp
00000000000029bc	cbnz	w0, 0x29e8
00000000000029c0	add	x8, x21, x20
00000000000029c4	sub	x20, x8, #0x4
00000000000029c8	adrp	x21, 5 ; 0x7000
00000000000029cc	add	x21, x21, #0x6cc ; literal pool for: "\\n"
00000000000029d0	strb	wzr, [x20, #0x2]
00000000000029d4	mov	x0, x20
00000000000029d8	mov	x1, x21
00000000000029dc	bl	0x72d8 ; symbol stub for: __platform_strcmp
00000000000029e0	sub	x20, x20, #0x2
00000000000029e4	cbz	w0, 0x29d0
00000000000029e8	mov	x0, x19
00000000000029ec	bl	__simple_sresize
00000000000029f0	adrp	x1, 5 ; 0x7000
00000000000029f4	add	x1, x1, #0x6cf ; literal pool for: "]"
00000000000029f8	mov	x0, x19
00000000000029fc	ldp	x29, x30, [sp, #0x30]
0000000000002a00	ldp	x20, x19, [sp, #0x20]
0000000000002a04	ldp	x22, x21, [sp, #0x10]
0000000000002a08	add	sp, sp, #0x40
0000000000002a0c	autibsp
0000000000002a10	eor	x16, x30, x30, lsl #1
0000000000002a14	tbz	x16, #0x3e, 0x2a1c
0000000000002a18	brk	#0xc471
0000000000002a1c	b	__simple_sappend
__simple_esprintf:
0000000000002a20	pacibsp
0000000000002a24	sub	sp, sp, #0x20
0000000000002a28	stp	x29, x30, [sp, #0x10]
0000000000002a2c	add	x29, sp, #0x10
0000000000002a30	add	x8, x29, #0x10
0000000000002a34	str	x8, [sp, #0x8]
0000000000002a38	add	x3, x29, #0x10
0000000000002a3c	bl	___simple_bprintf
0000000000002a40	mov	w0, #0x0
0000000000002a44	ldp	x29, x30, [sp, #0x10]
0000000000002a48	add	sp, sp, #0x20
0000000000002a4c	retab
__simple_asl_escape_key:
0000000000002a50	cmp	w0, #0x5a
0000000000002a54	b.le	0x2a7c
0000000000002a58	cmp	w0, #0x5d
0000000000002a5c	b.eq	0x2a98
0000000000002a60	cmp	w0, #0x5c
0000000000002a64	b.eq	0x2aa4
0000000000002a68	cmp	w0, #0x5b
0000000000002a6c	b.ne	0x2abc
0000000000002a70	adrp	x0, 5 ; 0x7000
0000000000002a74	add	x0, x0, #0x711 ; literal pool for: "\\["
0000000000002a78	ret
0000000000002a7c	cmp	w0, #0xa
0000000000002a80	b.eq	0x2ab0
0000000000002a84	cmp	w0, #0x20
0000000000002a88	b.ne	0x2abc
0000000000002a8c	adrp	x0, 5 ; 0x7000
0000000000002a90	add	x0, x0, #0x717 ; literal pool for: "\\s"
0000000000002a94	ret
0000000000002a98	adrp	x0, 5 ; 0x7000
0000000000002a9c	add	x0, x0, #0x714 ; literal pool for: "\\]"
0000000000002aa0	ret
0000000000002aa4	adrp	x0, 5 ; 0x7000
0000000000002aa8	add	x0, x0, #0x70e ; literal pool for: "\\\\"
0000000000002aac	ret
0000000000002ab0	adrp	x0, 5 ; 0x7000
0000000000002ab4	add	x0, x0, #0x6cc ; literal pool for: "\\n"
0000000000002ab8	ret
0000000000002abc	mov	x0, #0x0
0000000000002ac0	ret
__simple_asl_escape_val:
0000000000002ac4	cmp	w0, #0x5b
0000000000002ac8	b.gt	0x2ae8
0000000000002acc	cmp	w0, #0xa
0000000000002ad0	b.eq	0x2b0c
0000000000002ad4	cmp	w0, #0x5b
0000000000002ad8	b.ne	0x2b04
0000000000002adc	adrp	x0, 5 ; 0x7000
0000000000002ae0	add	x0, x0, #0x711 ; literal pool for: "\\["
0000000000002ae4	ret
0000000000002ae8	cmp	w0, #0x5c
0000000000002aec	b.eq	0x2b18
0000000000002af0	cmp	w0, #0x5d
0000000000002af4	b.ne	0x2b04
0000000000002af8	adrp	x0, 5 ; 0x7000
0000000000002afc	add	x0, x0, #0x714 ; literal pool for: "\\]"
0000000000002b00	ret
0000000000002b04	mov	x0, #0x0
0000000000002b08	ret
0000000000002b0c	adrp	x0, 5 ; 0x7000
0000000000002b10	add	x0, x0, #0x6cc ; literal pool for: "\\n"
0000000000002b14	ret
0000000000002b18	adrp	x0, 5 ; 0x7000
0000000000002b1c	add	x0, x0, #0x70e ; literal pool for: "\\\\"
0000000000002b20	ret
__simple_sappend:
0000000000002b24	pacibsp
0000000000002b28	stp	x22, x21, [sp, #-0x30]!
0000000000002b2c	stp	x20, x19, [sp, #0x10]
0000000000002b30	stp	x29, x30, [sp, #0x20]
0000000000002b34	add	x29, sp, #0x20
0000000000002b38	ldrb	w20, [x1]
0000000000002b3c	cbz	w20, 0x2b78
0000000000002b40	mov	x19, x0
0000000000002b44	add	x21, x1, #0x1
0000000000002b48	ldp	x8, x9, [x19, #0x8]
0000000000002b4c	cmp	x8, x9
0000000000002b50	b.lo	0x2b64
0000000000002b54	ldr	x8, [x19, #0x20]
0000000000002b58	mov	x0, x19
0000000000002b5c	blraaz	x8
0000000000002b60	ldr	x8, [x19, #0x8]
0000000000002b64	add	x9, x8, #0x1
0000000000002b68	str	x9, [x19, #0x8]
0000000000002b6c	strb	w20, [x8]
0000000000002b70	ldrb	w20, [x21], #0x1
0000000000002b74	cbnz	w20, 0x2b48
0000000000002b78	mov	w0, #0x0
0000000000002b7c	ldp	x29, x30, [sp, #0x20]
0000000000002b80	ldp	x20, x19, [sp, #0x10]
0000000000002b84	ldp	x22, x21, [sp], #0x30
0000000000002b88	retab
__simple_sresize:
0000000000002b8c	pacibsp
0000000000002b90	stp	x20, x19, [sp, #-0x20]!
0000000000002b94	stp	x29, x30, [sp, #0x10]
0000000000002b98	add	x29, sp, #0x10
0000000000002b9c	mov	x19, x0
0000000000002ba0	ldr	x20, [x0]
0000000000002ba4	mov	x0, x20
0000000000002ba8	bl	__platform_strlen
0000000000002bac	add	x8, x20, x0
0000000000002bb0	str	x8, [x19, #0x8]
0000000000002bb4	ldp	x29, x30, [sp, #0x10]
0000000000002bb8	ldp	x20, x19, [sp], #0x20
0000000000002bbc	retab
__simple_asl_send:
0000000000002bc0	pacibsp
0000000000002bc4	sub	sp, sp, #0x40
0000000000002bc8	stp	x20, x19, [sp, #0x20]
0000000000002bcc	stp	x29, x30, [sp, #0x30]
0000000000002bd0	add	x29, sp, #0x30
0000000000002bd4	mov	x20, x0
0000000000002bd8	bl	__simple_asl_get_fd
0000000000002bdc	tbnz	w0, #0x1f, 0x2d78
0000000000002be0	mov	x19, x0
0000000000002be4	add	x0, sp, #0x10
0000000000002be8	mov	x1, #0x0
0000000000002bec	bl	0x7300 ; symbol stub for: ___gettimeofday
0000000000002bf0	adrp	x1, 5 ; 0x7000
0000000000002bf4	add	x1, x1, #0x6d1 ; literal pool for: " [PID "
0000000000002bf8	mov	x0, x20
0000000000002bfc	bl	__simple_sprintf
0000000000002c00	cbnz	w0, 0x2d78
0000000000002c04	bl	0x73e0 ; symbol stub for: _getpid
0000000000002c08	adrp	x2, 5 ; 0x7000
0000000000002c0c	add	x2, x2, #0x6d8 ; literal pool for: "%u"
0000000000002c10	str	x0, [sp]
0000000000002c14	adrp	x16, 0 ; 0x2000
0000000000002c18	add	x16, x16, #0xac4
0000000000002c1c	paciza	x16
0000000000002c20	mov	x1, x16
0000000000002c24	mov	x0, x20
0000000000002c28	bl	__simple_esprintf
0000000000002c2c	cbnz	w0, 0x2d78
0000000000002c30	adrp	x1, 5 ; 0x7000
0000000000002c34	add	x1, x1, #0x6db ; literal pool for: "] [UID "
0000000000002c38	mov	x0, x20
0000000000002c3c	bl	__simple_sprintf
0000000000002c40	cbnz	w0, 0x2d78
0000000000002c44	bl	0x7400 ; symbol stub for: _getuid
0000000000002c48	adrp	x2, 5 ; 0x7000
0000000000002c4c	add	x2, x2, #0x6d8 ; literal pool for: "%u"
0000000000002c50	str	x0, [sp]
0000000000002c54	adrp	x16, 0 ; 0x2000
0000000000002c58	add	x16, x16, #0xac4
0000000000002c5c	paciza	x16
0000000000002c60	mov	x1, x16
0000000000002c64	mov	x0, x20
0000000000002c68	bl	__simple_esprintf
0000000000002c6c	cbnz	w0, 0x2d78
0000000000002c70	adrp	x1, 5 ; 0x7000
0000000000002c74	add	x1, x1, #0x6e3 ; literal pool for: "] [GID "
0000000000002c78	mov	x0, x20
0000000000002c7c	bl	__simple_sprintf
0000000000002c80	cbnz	w0, 0x2d78
0000000000002c84	bl	0x73d0 ; symbol stub for: _getgid
0000000000002c88	adrp	x2, 5 ; 0x7000
0000000000002c8c	add	x2, x2, #0x6d8 ; literal pool for: "%u"
0000000000002c90	str	x0, [sp]
0000000000002c94	adrp	x16, 0 ; 0x2000
0000000000002c98	add	x16, x16, #0xac4
0000000000002c9c	paciza	x16
0000000000002ca0	mov	x1, x16
0000000000002ca4	mov	x0, x20
0000000000002ca8	bl	__simple_esprintf
0000000000002cac	cbnz	w0, 0x2d78
0000000000002cb0	adrp	x1, 5 ; 0x7000
0000000000002cb4	add	x1, x1, #0x6eb ; literal pool for: "] [Time "
0000000000002cb8	mov	x0, x20
0000000000002cbc	bl	__simple_sprintf
0000000000002cc0	cbnz	w0, 0x2d78
0000000000002cc4	ldr	x8, [sp, #0x10]
0000000000002cc8	adrp	x2, 5 ; 0x7000
0000000000002ccc	add	x2, x2, #0x6f4 ; literal pool for: "%lu"
0000000000002cd0	str	x8, [sp]
0000000000002cd4	adrp	x16, 0 ; 0x2000
0000000000002cd8	add	x16, x16, #0xac4
0000000000002cdc	paciza	x16
0000000000002ce0	mov	x1, x16
0000000000002ce4	mov	x0, x20
0000000000002ce8	bl	__simple_esprintf
0000000000002cec	cbnz	w0, 0x2d78
0000000000002cf0	adrp	x1, 5 ; 0x7000
0000000000002cf4	add	x1, x1, #0x6f8 ; literal pool for: "] [TimeNanoSec "
0000000000002cf8	mov	x0, x20
0000000000002cfc	bl	__simple_sappend
0000000000002d00	cbnz	w0, 0x2d78
0000000000002d04	ldr	w8, [sp, #0x18]
0000000000002d08	mov	w9, #0x3e8
0000000000002d0c	mul	w8, w8, w9
0000000000002d10	adrp	x2, 5 ; 0x7000
0000000000002d14	add	x2, x2, #0x708 ; literal pool for: "%d"
0000000000002d18	str	x8, [sp]
0000000000002d1c	adrp	x16, 0 ; 0x2000
0000000000002d20	add	x16, x16, #0xac4
0000000000002d24	paciza	x16
0000000000002d28	mov	x1, x16
0000000000002d2c	mov	x0, x20
0000000000002d30	bl	__simple_esprintf
0000000000002d34	cbnz	w0, 0x2d78
0000000000002d38	adrp	x1, 5 ; 0x7000
0000000000002d3c	add	x1, x1, #0x70b ; literal pool for: "]\n"
0000000000002d40	mov	x0, x20
0000000000002d44	bl	__simple_sappend
0000000000002d48	cbnz	w0, 0x2d78
0000000000002d4c	mov	x0, x20
0000000000002d50	bl	__simple_string
0000000000002d54	mov	x20, x0
0000000000002d58	bl	__platform_strlen
0000000000002d5c	mov	x2, x0
0000000000002d60	mov	x0, x19
0000000000002d64	mov	x1, x20
0000000000002d68	mov	w3, #0x0
0000000000002d6c	mov	x4, #0x0
0000000000002d70	mov	w5, #0x0
0000000000002d74	bl	0x7320 ; symbol stub for: ___sendto
0000000000002d78	ldp	x29, x30, [sp, #0x30]
0000000000002d7c	ldp	x20, x19, [sp, #0x20]
0000000000002d80	add	sp, sp, #0x40
0000000000002d84	retab
__simple_asl_connect_once:
0000000000002d88	pacibsp
0000000000002d8c	stp	x20, x19, [sp, #-0x20]!
0000000000002d90	stp	x29, x30, [sp, #0x10]
0000000000002d94	add	x29, sp, #0x10
0000000000002d98	adrp	x8, 6 ; 0x8000
0000000000002d9c	ldr	x8, [x8] ; literal pool symbol address: __os_alloc_once_table
0000000000002da0	ldr	x9, [x8, #0x150]
0000000000002da4	cmn	x9, #0x1
0000000000002da8	b.ne	0x2dd0
0000000000002dac	ldr	x19, [x8, #0x158]
0000000000002db0	ldr	w8, [x19, #0x10]
0000000000002db4	cmn	w8, #0x1
0000000000002db8	b.ne	0x2dc4
0000000000002dbc	bl	__simple_asl_connect
0000000000002dc0	str	w0, [x19, #0x10]
0000000000002dc4	ldp	x29, x30, [sp, #0x10]
0000000000002dc8	ldp	x20, x19, [sp], #0x20
0000000000002dcc	retab
0000000000002dd0	add	x0, x8, #0x150
0000000000002dd4	adrp	x16, 1 ; 0x3000
0000000000002dd8	add	x16, x16, #0xa14
0000000000002ddc	paciza	x16
0000000000002de0	mov	x2, x16
0000000000002de4	mov	w1, #0x20
0000000000002de8	bl	__os_alloc_once
0000000000002dec	mov	x19, x0
0000000000002df0	b	0x2db0
_udec:
0000000000002df4	pacibsp
0000000000002df8	sub	sp, sp, #0x70
0000000000002dfc	stp	x26, x25, [sp, #0x20]
0000000000002e00	stp	x24, x23, [sp, #0x30]
0000000000002e04	stp	x22, x21, [sp, #0x40]
0000000000002e08	stp	x20, x19, [sp, #0x50]
0000000000002e0c	stp	x29, x30, [sp, #0x60]
0000000000002e10	add	x29, sp, #0x60
0000000000002e14	mov	x22, x4
0000000000002e18	mov	x19, x1
0000000000002e1c	mov	x20, x0
0000000000002e20	strb	wzr, [sp, #0x1f]
0000000000002e24	mov	x8, sp
0000000000002e28	cbz	x2, 0x2e60
0000000000002e2c	add	x21, x8, #0x1f
0000000000002e30	mov	x8, #-0x3333333333333334
0000000000002e34	movk	x8, #0xcccd
0000000000002e38	mov	w9, #0xa
0000000000002e3c	umulh	x10, x2, x8
0000000000002e40	lsr	x10, x10, #3
0000000000002e44	msub	w11, w10, w9, w2
0000000000002e48	orr	w11, w11, #0x30
0000000000002e4c	strb	w11, [x21, #-0x1]!
0000000000002e50	cmp	x2, #0xa
0000000000002e54	mov	x2, x10
0000000000002e58	b.hs	0x2e3c
0000000000002e5c	b	0x2e6c
0000000000002e60	add	x21, x8, #0x1e
0000000000002e64	mov	w8, #0x30
0000000000002e68	strb	w8, [sp, #0x1e]
0000000000002e6c	sxtw	x23, w3
0000000000002e70	mov	x0, x21
0000000000002e74	bl	__platform_strlen
0000000000002e78	sub	x23, x23, x0
0000000000002e7c	cmp	x23, #0x1
0000000000002e80	b.lt	0x2f9c
0000000000002e84	mov	w8, #0x30
0000000000002e88	mov	w9, #0x20
0000000000002e8c	cmp	w22, #0x0
0000000000002e90	csel	w22, w9, w8, eq
0000000000002e94	cbz	x19, 0x2ee4
0000000000002e98	mov	x0, x22
0000000000002e9c	blraaz	x19
0000000000002ea0	cbz	x0, 0x2ee4
0000000000002ea4	ldrb	w24, [x0]
0000000000002ea8	cbz	w24, 0x2f0c
0000000000002eac	add	x25, x0, #0x1
0000000000002eb0	ldp	x8, x9, [x20, #0x8]
0000000000002eb4	cmp	x8, x9
0000000000002eb8	b.lo	0x2ecc
0000000000002ebc	ldr	x8, [x20, #0x20]
0000000000002ec0	mov	x0, x20
0000000000002ec4	blraaz	x8
0000000000002ec8	ldr	x8, [x20, #0x8]
0000000000002ecc	add	x9, x8, #0x1
0000000000002ed0	str	x9, [x20, #0x8]
0000000000002ed4	strb	w24, [x8]
0000000000002ed8	ldrb	w24, [x25], #0x1
0000000000002edc	cbnz	w24, 0x2eb0
0000000000002ee0	b	0x2f0c
0000000000002ee4	ldp	x8, x9, [x20, #0x8]
0000000000002ee8	cmp	x8, x9
0000000000002eec	b.lo	0x2f00
0000000000002ef0	ldr	x8, [x20, #0x20]
0000000000002ef4	mov	x0, x20
0000000000002ef8	blraaz	x8
0000000000002efc	ldr	x8, [x20, #0x8]
0000000000002f00	add	x9, x8, #0x1
0000000000002f04	str	x9, [x20, #0x8]
0000000000002f08	strb	w22, [x8]
0000000000002f0c	sub	x8, x23, #0x1
0000000000002f10	cmp	x23, #0x1
0000000000002f14	mov	x23, x8
0000000000002f18	b.gt	0x2e94
0000000000002f1c	b	0x2f9c
0000000000002f20	cbz	x19, 0x2f70
0000000000002f24	and	w0, w22, #0xff
0000000000002f28	blraaz	x19
0000000000002f2c	cbz	x0, 0x2f70
0000000000002f30	ldrb	w22, [x0]
0000000000002f34	cbz	w22, 0x2f98
0000000000002f38	add	x23, x0, #0x1
0000000000002f3c	ldp	x8, x9, [x20, #0x8]
0000000000002f40	cmp	x8, x9
0000000000002f44	b.lo	0x2f58
0000000000002f48	ldr	x8, [x20, #0x20]
0000000000002f4c	mov	x0, x20
0000000000002f50	blraaz	x8
0000000000002f54	ldr	x8, [x20, #0x8]
0000000000002f58	add	x9, x8, #0x1
0000000000002f5c	str	x9, [x20, #0x8]
0000000000002f60	strb	w22, [x8]
0000000000002f64	ldrb	w22, [x23], #0x1
0000000000002f68	cbnz	w22, 0x2f3c
0000000000002f6c	b	0x2f98
0000000000002f70	ldp	x8, x9, [x20, #0x8]
0000000000002f74	cmp	x8, x9
0000000000002f78	b.lo	0x2f8c
0000000000002f7c	ldr	x8, [x20, #0x20]
0000000000002f80	mov	x0, x20
0000000000002f84	blraaz	x8
0000000000002f88	ldr	x8, [x20, #0x8]
0000000000002f8c	add	x9, x8, #0x1
0000000000002f90	str	x9, [x20, #0x8]
0000000000002f94	strb	w22, [x8]
0000000000002f98	add	x21, x21, #0x1
0000000000002f9c	ldrb	w22, [x21]
0000000000002fa0	cbnz	w22, 0x2f20
0000000000002fa4	ldp	x29, x30, [sp, #0x60]
0000000000002fa8	ldp	x20, x19, [sp, #0x50]
0000000000002fac	ldp	x22, x21, [sp, #0x40]
0000000000002fb0	ldp	x24, x23, [sp, #0x30]
0000000000002fb4	ldp	x26, x25, [sp, #0x20]
0000000000002fb8	add	sp, sp, #0x70
0000000000002fbc	retab
_OSAtomicCompareAndSwap64:
0000000000002fc0	mov	x8, x0
0000000000002fc4	cas	x8, x1, [x2]
0000000000002fc8	cmp	x8, x0
0000000000002fcc	cset	w0, eq
0000000000002fd0	ret
_os_unfair_recursive_lock_trylock:
0000000000002fd4	mov	w8, #0x0
0000000000002fd8	mrs	x9, TPIDRRO_EL0
0000000000002fdc	ldr	w9, [x9, #0x18]
0000000000002fe0	casa	w8, w9, [x0]
0000000000002fe4	cmp	w8, #0x0
0000000000002fe8	b.ne	0x2ff4
0000000000002fec	mov	w0, #0x1
0000000000002ff0	ret
0000000000002ff4	orr	w8, w8, #0x1
0000000000002ff8	cmp	w8, w9
0000000000002ffc	b.ne	0x3010
0000000000003000	ldr	w8, [x0, #0x4]
0000000000003004	add	w8, w8, #0x1
0000000000003008	str	w8, [x0, #0x4]
000000000000300c	b	0x2fec
0000000000003010	mov	w0, #0x0
0000000000003014	ret
__os_semaphore_create:
0000000000003018	pacibsp
000000000000301c	sub	sp, sp, #0x20
0000000000003020	stp	x29, x30, [sp, #0x10]
0000000000003024	add	x29, sp, #0x10
0000000000003028	adrp	x8, 5 ; 0x8000
000000000000302c	ldr	x8, [x8, #0x10] ; literal pool symbol address: _mach_task_self_
0000000000003030	ldr	w0, [x8]
0000000000003034	sub	x1, x29, #0x4
0000000000003038	mov	w2, #0x0
000000000000303c	mov	w3, #0x0
0000000000003040	bl	0x7470 ; symbol stub for: _semaphore_create
0000000000003044	cbnz	w0, 0x3058
0000000000003048	ldur	w0, [x29, #-0x4]
000000000000304c	ldp	x29, x30, [sp, #0x10]
0000000000003050	add	sp, sp, #0x20
0000000000003054	retab
0000000000003058	cmn	w0, #0x12d
000000000000305c	b.ne	0x3064
0000000000003060	bl	__os_semaphore_create.cold.2
0000000000003064	bl	__os_semaphore_create.cold.1
__os_semaphore_dispose:
0000000000003068	pacibsp
000000000000306c	stp	x29, x30, [sp, #-0x10]!
0000000000003070	mov	x29, sp
0000000000003074	mov	x1, x0
0000000000003078	adrp	x8, 5 ; 0x8000
000000000000307c	ldr	x8, [x8, #0x10] ; literal pool symbol address: _mach_task_self_
0000000000003080	ldr	w0, [x8]
0000000000003084	bl	0x7480 ; symbol stub for: _semaphore_destroy
0000000000003088	cbnz	w0, 0x3094
000000000000308c	ldp	x29, x30, [sp], #0x10
0000000000003090	retab
0000000000003094	bl	__os_semaphore_dispose.cold.1
___platform_sigaction:
0000000000003098	pacibsp
000000000000309c	sub	sp, sp, #0x30
00000000000030a0	stp	x29, x30, [sp, #0x20]
00000000000030a4	add	x29, sp, #0x20
00000000000030a8	sub	w8, w0, #0x20
00000000000030ac	cmn	w8, #0x1f
00000000000030b0	ccmp	w0, #0x11, #0x4, hs
00000000000030b4	ccmp	w0, #0x9, #0x4, ne
00000000000030b8	b.ne	0x30d8
00000000000030bc	bl	0x72f0 ; symbol stub for: ___error
00000000000030c0	mov	w8, #0x16
00000000000030c4	str	w8, [x0]
00000000000030c8	mov	w0, #-0x1
00000000000030cc	ldp	x29, x30, [sp, #0x20]
00000000000030d0	add	sp, sp, #0x30
00000000000030d4	retab
00000000000030d8	cbz	x1, 0x3100
00000000000030dc	ldr	x8, [x1]
00000000000030e0	adrp	x16, 0 ; 0x3000
00000000000030e4	add	x16, x16, #0xdcc
00000000000030e8	paciza	x16
00000000000030ec	stp	x8, x16, [sp, #0x8]
00000000000030f0	ldp	w8, w9, [x1, #0x8]
00000000000030f4	orr	w9, w9, #0x400
00000000000030f8	stp	w8, w9, [sp, #0x18]
00000000000030fc	add	x1, sp, #0x8
0000000000003100	bl	0x7330 ; symbol stub for: ___sigaction
0000000000003104	b	0x30cc
__os_once_gate_wait:
0000000000003108	pacibsp
000000000000310c	stp	x24, x23, [sp, #-0x40]!
0000000000003110	stp	x22, x21, [sp, #0x10]
0000000000003114	stp	x20, x19, [sp, #0x20]
0000000000003118	stp	x29, x30, [sp, #0x30]
000000000000311c	add	x29, sp, #0x30
0000000000003120	ldr	x23, [x0]
0000000000003124	cmn	x23, #0x1
0000000000003128	b.eq	0x3248
000000000000312c	mov	x20, x3
0000000000003130	mov	x21, x2
0000000000003134	mov	x22, x1
0000000000003138	mov	x19, x0
000000000000313c	mov	w24, w3
0000000000003140	and	x8, x23, #0x3
0000000000003144	cmp	x8, #0x1
0000000000003148	b.eq	0x321c
000000000000314c	cbz	x23, 0x31ac
0000000000003150	and	x9, x23, #0xfffffffffffffffe
0000000000003154	mov	x8, x23
0000000000003158	cmp	x9, x23
000000000000315c	b.eq	0x3174
0000000000003160	mov	x10, x23
0000000000003164	cas	x10, x9, [x19]
0000000000003168	mov	x8, x9
000000000000316c	cmp	x10, x23
0000000000003170	b.ne	0x31dc
0000000000003174	orr	w9, w23, #0x1
0000000000003178	cmp	w9, w20
000000000000317c	b.eq	0x325c
0000000000003180	and	x2, x8, #0xffffffff
0000000000003184	mov	w0, #0x2
0000000000003188	movk	w0, #0x100, lsl #16
000000000000318c	mov	x1, x19
0000000000003190	mov	w3, #0x0
0000000000003194	bl	0x7360 ; symbol stub for: ___ulock_wait
0000000000003198	tbnz	w0, #0x1f, 0x31c4
000000000000319c	ldr	x23, [x19]
00000000000031a0	cmn	x23, #0x1
00000000000031a4	b.ne	0x3140
00000000000031a8	b	0x3248
00000000000031ac	mov	x8, x23
00000000000031b0	cas	x8, x24, [x19]
00000000000031b4	cmp	x8, x23
00000000000031b8	b.eq	0x31e4
00000000000031bc	mov	x23, x8
00000000000031c0	b	0x31a0
00000000000031c4	cmn	w0, #0x4
00000000000031c8	b.eq	0x319c
00000000000031cc	neg	w8, w0
00000000000031d0	cmp	w8, #0xe
00000000000031d4	b.eq	0x319c
00000000000031d8	b	0x3264
00000000000031dc	mov	x23, x10
00000000000031e0	b	0x31a0
00000000000031e4	dmb	ishld
00000000000031e8	mov	x0, x19
00000000000031ec	mov	x1, x22
00000000000031f0	mov	x2, x21
00000000000031f4	mov	x3, x20
00000000000031f8	ldp	x29, x30, [sp, #0x30]
00000000000031fc	ldp	x20, x19, [sp, #0x20]
0000000000003200	ldp	x22, x21, [sp, #0x10]
0000000000003204	ldp	x24, x23, [sp], #0x40
0000000000003208	autibsp
000000000000320c	eor	x16, x30, x30, lsl #1
0000000000003210	tbz	x16, #0x3e, 0x3218
0000000000003214	brk	#0xc471
0000000000003218	b	__os_once_callout
000000000000321c	dmb	ishld
0000000000003220	mov	x8, #0xfffff0000
0000000000003224	movk	x8, #0xc180
0000000000003228	ldr	x8, [x8]
000000000000322c	lsl	x8, x8, #2
0000000000003230	sub	x8, x8, x23
0000000000003234	sub	x8, x8, #0xf
0000000000003238	cmn	x8, #0x11
000000000000323c	b.hi	0x3248
0000000000003240	mov	x8, #-0x1
0000000000003244	str	x8, [x19]
0000000000003248	ldp	x29, x30, [sp, #0x30]
000000000000324c	ldp	x20, x19, [sp, #0x20]
0000000000003250	ldp	x22, x21, [sp, #0x10]
0000000000003254	ldp	x24, x23, [sp], #0x40
0000000000003258	retab
000000000000325c	mov	x0, x20
0000000000003260	bl	__os_once_gate_recursive_abort
0000000000003264	cmp	w8, #0x69
0000000000003268	b.ne	0x3274
000000000000326c	mov	x0, x23
0000000000003270	bl	__os_once_gate_corruption_abort
0000000000003274	stp	x20, x21, [sp, #-0x10]!
0000000000003278	adrp	x20, 4 ; 0x7000
000000000000327c	add	x20, x20, #0xbf5 ; literal pool for: "BUG IN LIBPLATFORM: ulock_wait failure"
0000000000003280	adrp	x21, 13 ; 0x10000
0000000000003284	add	x21, x21, #0x0
0000000000003288	str	x20, [x21, #0x8]
000000000000328c	str	x8, [x21, #0x38]
0000000000003290	ldp	x20, x21, [sp], #0x10
0000000000003294	brk	#0x1
__os_once_gate_broadcast:
0000000000003298	pacibsp
000000000000329c	stp	x20, x19, [sp, #-0x20]!
00000000000032a0	stp	x29, x30, [sp, #0x10]
00000000000032a4	add	x29, sp, #0x10
00000000000032a8	mov	x19, x0
00000000000032ac	orr	w0, w1, #0x1
00000000000032b0	cmp	w0, w2
00000000000032b4	b.ne	0x32f4
00000000000032b8	tbnz	w1, #0x0, 0x32f8
00000000000032bc	mov	w0, #0x102
00000000000032c0	movk	w0, #0x100, lsl #16
00000000000032c4	mov	x1, x19
00000000000032c8	mov	x2, #0x0
00000000000032cc	bl	0x7380 ; symbol stub for: ___ulock_wake
00000000000032d0	tbz	w0, #0x1f, 0x32e8
00000000000032d4	cmn	w0, #0x4
00000000000032d8	b.eq	0x32bc
00000000000032dc	neg	w8, w0
00000000000032e0	cmp	w8, #0x2
00000000000032e4	b.ne	0x3320
00000000000032e8	ldp	x29, x30, [sp, #0x10]
00000000000032ec	ldp	x20, x19, [sp], #0x20
00000000000032f0	retab
00000000000032f4	bl	__os_once_gate_unowned_abort
00000000000032f8	mov	w8, w1
00000000000032fc	stp	x20, x21, [sp, #-0x10]!
0000000000003300	adrp	x20, 4 ; 0x7000
0000000000003304	add	x20, x20, #0xb9e ; literal pool for: "BUG IN LIBPLATFORM: unlock_slow with no waiters"
0000000000003308	adrp	x21, 13 ; 0x10000
000000000000330c	add	x21, x21, #0x0
0000000000003310	str	x20, [x21, #0x8]
0000000000003314	str	x8, [x21, #0x38]
0000000000003318	ldp	x20, x21, [sp], #0x10
000000000000331c	brk	#0x1
0000000000003320	stp	x20, x21, [sp, #-0x10]!
0000000000003324	adrp	x20, 4 ; 0x7000
0000000000003328	add	x20, x20, #0xbce ; literal pool for: "BUG IN LIBPLATFORM: ulock_wake failure"
000000000000332c	adrp	x21, 13 ; 0x10000
0000000000003330	add	x21, x21, #0x0
0000000000003334	str	x20, [x21, #0x8]
0000000000003338	str	x8, [x21, #0x38]
000000000000333c	ldp	x20, x21, [sp], #0x10
0000000000003340	brk	#0x1
__os_nospin_lock_lock_slow:
0000000000003344	pacibsp
0000000000003348	stp	x26, x25, [sp, #-0x50]!
000000000000334c	stp	x24, x23, [sp, #0x10]
0000000000003350	stp	x22, x21, [sp, #0x20]
0000000000003354	stp	x20, x19, [sp, #0x30]
0000000000003358	stp	x29, x30, [sp, #0x40]
000000000000335c	add	x29, sp, #0x40
0000000000003360	mov	x19, x0
0000000000003364	mov	w21, #0x0
0000000000003368	mrs	x8, TPIDRRO_EL0
000000000000336c	ldr	w22, [x8, #0x18]
0000000000003370	mov	w23, #0x1
0000000000003374	mov	w24, #0x3e8
0000000000003378	mul	w20, w23, w24
000000000000337c	bic	w25, w22, w21
0000000000003380	ldr	w8, [x19]
0000000000003384	cbnz	w8, 0x3394
0000000000003388	casa	w8, w25, [x19]
000000000000338c	cmp	w8, #0x0
0000000000003390	b.eq	0x3404
0000000000003394	and	w9, w8, #0xfffffffe
0000000000003398	cmp	w8, w9
000000000000339c	ccmp	w9, #0x0, #0x4, ne
00000000000033a0	b.eq	0x33b8
00000000000033a4	mov	x10, x8
00000000000033a8	cas	w10, w9, [x19]
00000000000033ac	cmp	w10, w8
00000000000033b0	mov	x8, x9
00000000000033b4	b.ne	0x3380
00000000000033b8	mov	w2, w8
00000000000033bc	mov	w0, #0x1
00000000000033c0	movk	w0, #0x100, lsl #16
00000000000033c4	mov	x1, x19
00000000000033c8	mov	x3, x20
00000000000033cc	bl	0x7360 ; symbol stub for: ___ulock_wait
00000000000033d0	tbz	w0, #0x1f, 0x33e8
00000000000033d4	neg	w8, w0
00000000000033d8	cmn	w0, #0x4
00000000000033dc	ccmp	w8, #0xe, #0x4, ne
00000000000033e0	b.eq	0x3380
00000000000033e4	b	0x33f4
00000000000033e8	cmp	w0, #0x0
00000000000033ec	csinc	w21, w21, wzr, eq
00000000000033f0	b	0x337c
00000000000033f4	cmp	w8, #0x3c
00000000000033f8	b.ne	0x341c
00000000000033fc	add	w23, w23, #0x1
0000000000003400	b	0x3378
0000000000003404	ldp	x29, x30, [sp, #0x40]
0000000000003408	ldp	x20, x19, [sp, #0x30]
000000000000340c	ldp	x22, x21, [sp, #0x20]
0000000000003410	ldp	x24, x23, [sp, #0x10]
0000000000003414	ldp	x26, x25, [sp], #0x50
0000000000003418	retab
000000000000341c	stp	x20, x21, [sp, #-0x10]!
0000000000003420	adrp	x20, 4 ; 0x7000
0000000000003424	add	x20, x20, #0xbf5 ; literal pool for: "BUG IN LIBPLATFORM: ulock_wait failure"
0000000000003428	adrp	x21, 13 ; 0x10000
000000000000342c	add	x21, x21, #0x0
0000000000003430	str	x20, [x21, #0x8]
0000000000003434	str	x8, [x21, #0x38]
0000000000003438	ldp	x20, x21, [sp], #0x10
000000000000343c	brk	#0x1
__os_nospin_lock_unlock_slow:
0000000000003440	pacibsp
0000000000003444	stp	x20, x19, [sp, #-0x20]!
0000000000003448	stp	x29, x30, [sp, #0x10]
000000000000344c	add	x29, sp, #0x10
0000000000003450	mrs	x8, TPIDRRO_EL0
0000000000003454	ldr	w8, [x8, #0x18]
0000000000003458	orr	w9, w1, #0x1
000000000000345c	cmp	w9, w8
0000000000003460	b.ne	0x3498
0000000000003464	tbnz	w1, #0x0, 0x34a4
0000000000003468	mov	x19, x0
000000000000346c	mov	w0, #0x1
0000000000003470	movk	w0, #0x100, lsl #16
0000000000003474	mov	x1, x19
0000000000003478	mov	x2, #0x0
000000000000347c	bl	0x7380 ; symbol stub for: ___ulock_wake
0000000000003480	tbz	w0, #0x1f, 0x3498
0000000000003484	cmn	w0, #0x4
0000000000003488	b.eq	0x346c
000000000000348c	neg	w8, w0
0000000000003490	cmp	w8, #0x2
0000000000003494	b.ne	0x34cc
0000000000003498	ldp	x29, x30, [sp, #0x10]
000000000000349c	ldp	x20, x19, [sp], #0x20
00000000000034a0	retab
00000000000034a4	mov	w8, w1
00000000000034a8	stp	x20, x21, [sp, #-0x10]!
00000000000034ac	adrp	x20, 4 ; 0x7000
00000000000034b0	add	x20, x20, #0xb9e ; literal pool for: "BUG IN LIBPLATFORM: unlock_slow with no waiters"
00000000000034b4	adrp	x21, 13 ; 0x10000
00000000000034b8	add	x21, x21, #0x0
00000000000034bc	str	x20, [x21, #0x8]
00000000000034c0	str	x8, [x21, #0x38]
00000000000034c4	ldp	x20, x21, [sp], #0x10
00000000000034c8	brk	#0x1
00000000000034cc	stp	x20, x21, [sp, #-0x10]!
00000000000034d0	adrp	x20, 4 ; 0x7000
00000000000034d4	add	x20, x20, #0xbce ; literal pool for: "BUG IN LIBPLATFORM: ulock_wake failure"
00000000000034d8	adrp	x21, 13 ; 0x10000
00000000000034dc	add	x21, x21, #0x0
00000000000034e0	str	x20, [x21, #0x8]
00000000000034e4	str	x8, [x21, #0x38]
00000000000034e8	ldp	x20, x21, [sp], #0x10
00000000000034ec	brk	#0x1
_OSAtomicIncrement32:
00000000000034f0	mov	w8, #0x1
00000000000034f4	ldadd	w8, w8, [x0]
00000000000034f8	add	w0, w8, #0x1
00000000000034fc	ret
_OSAtomicDecrement32:
0000000000003500	mov	w8, #-0x1
0000000000003504	ldadd	w8, w8, [x0]
0000000000003508	sub	w0, w8, #0x1
000000000000350c	ret
___libplatform_init:
0000000000003510	pacibsp
0000000000003514	stp	x20, x19, [sp, #-0x20]!
0000000000003518	stp	x29, x30, [sp, #0x10]
000000000000351c	add	x29, sp, #0x10
0000000000003520	mov	x19, x3
0000000000003524	mov	x0, x2
0000000000003528	mov	x20, x1
000000000000352c	bl	___pfz_setup
0000000000003530	mov	x0, x20
0000000000003534	mov	x1, x19
0000000000003538	bl	__simple_asl_init
000000000000353c	adrp	x0, 9 ; 0xc000
0000000000003540	add	x0, x0, #0x110
0000000000003544	ldp	x29, x30, [sp, #0x10]
0000000000003548	ldp	x20, x19, [sp], #0x20
000000000000354c	autibsp
0000000000003550	eor	x16, x30, x30, lsl #1
0000000000003554	tbz	x16, #0x3e, 0x355c
0000000000003558	brk	#0xc471
000000000000355c	b	0x7310 ; symbol stub for: ___libkernel_platform_init
___pfz_setup:
0000000000003560	pacibsp
0000000000003564	stp	x20, x19, [sp, #-0x20]!
0000000000003568	stp	x29, x30, [sp, #0x10]
000000000000356c	add	x29, sp, #0x10
0000000000003570	adrp	x1, 4 ; 0x7000
0000000000003574	add	x1, x1, #0x798 ; literal pool for: "pfz"
0000000000003578	bl	__simple_getenv
000000000000357c	cbz	x0, 0x3640
0000000000003580	ldrb	w8, [x0]
0000000000003584	cmp	w8, #0x30
0000000000003588	b.ne	0x3608
000000000000358c	ldrb	w8, [x0, #0x1]
0000000000003590	cmp	w8, #0x78
0000000000003594	b.ne	0x3608
0000000000003598	ldrb	w11, [x0, #0x2]
000000000000359c	cbz	w11, 0x3608
00000000000035a0	mov	x19, #0x0
00000000000035a4	mov	w8, #-0x57
00000000000035a8	add	x9, x0, #0x3
00000000000035ac	sxtb	x10, w11
00000000000035b0	sub	w11, w11, #0x30
00000000000035b4	and	w11, w11, #0xff
00000000000035b8	cmp	w11, #0xa
00000000000035bc	b.hs	0x35c8
00000000000035c0	add	x11, x8, #0x27
00000000000035c4	b	0x35f0
00000000000035c8	sub	w11, w10, #0x61
00000000000035cc	and	w12, w11, #0xff
00000000000035d0	mov	w11, #-0x57
00000000000035d4	cmp	w12, #0x6
00000000000035d8	b.lo	0x35f0
00000000000035dc	sub	w11, w10, #0x41
00000000000035e0	and	w11, w11, #0xff
00000000000035e4	cmp	w11, #0x5
00000000000035e8	b.hi	0x3608
00000000000035ec	add	x11, x8, #0x20
00000000000035f0	lsl	x12, x19, #4
00000000000035f4	add	w10, w11, w10
00000000000035f8	add	x19, x10, x12
00000000000035fc	ldrb	w11, [x9], #0x1
0000000000003600	cbnz	w11, 0x35ac
0000000000003604	b	0x360c
0000000000003608	mov	x19, #0x0
000000000000360c	sub	x20, x0, #0x4
0000000000003610	bl	__platform_strlen
0000000000003614	add	x1, x0, #0x4
0000000000003618	mov	x0, x20
000000000000361c	bl	__platform_bzero
0000000000003620	cbz	x19, 0x3640
0000000000003624	adrp	x8, 17 ; 0x14000
0000000000003628	add	x8, x8, #0x10
000000000000362c	mov	x16, x8
0000000000003630	movk	x16, #0xec6, lsl #48
0000000000003634	mov	x17, x19
0000000000003638	pacia1716
000000000000363c	str	x17, [x8]
0000000000003640	ldp	x29, x30, [sp, #0x10]
0000000000003644	ldp	x20, x19, [sp], #0x20
0000000000003648	retab
__simple_getenv:
000000000000364c	pacibsp
0000000000003650	stp	x22, x21, [sp, #-0x30]!
0000000000003654	stp	x20, x19, [sp, #0x10]
0000000000003658	stp	x29, x30, [sp, #0x20]
000000000000365c	add	x29, sp, #0x20
0000000000003660	mov	x19, x1
0000000000003664	mov	x20, x0
0000000000003668	mov	x0, x1
000000000000366c	bl	__platform_strlen
0000000000003670	cbz	x20, 0x36d8
0000000000003674	mov	x21, x0
0000000000003678	ldr	x0, [x20]
000000000000367c	cbz	x0, 0x36e8
0000000000003680	bl	__platform_strlen
0000000000003684	cmp	x0, x21
0000000000003688	b.lo	0x36cc
000000000000368c	ldr	x8, [x20]
0000000000003690	cbz	x21, 0x36c0
0000000000003694	mov	x9, x21
0000000000003698	mov	x10, x8
000000000000369c	mov	x11, x19
00000000000036a0	ldrb	w12, [x10]
00000000000036a4	ldrb	w13, [x11]
00000000000036a8	cmp	w12, w13
00000000000036ac	b.ne	0x36cc
00000000000036b0	add	x11, x11, #0x1
00000000000036b4	add	x10, x10, #0x1
00000000000036b8	subs	x9, x9, #0x1
00000000000036bc	b.ne	0x36a0
00000000000036c0	ldrb	w9, [x8, x21]
00000000000036c4	cmp	w9, #0x3d
00000000000036c8	b.eq	0x36e0
00000000000036cc	ldr	x0, [x20, #0x8]!
00000000000036d0	cbnz	x0, 0x3680
00000000000036d4	b	0x36e8
00000000000036d8	mov	x0, #0x0
00000000000036dc	b	0x36e8
00000000000036e0	add	x8, x21, x8
00000000000036e4	add	x0, x8, #0x1
00000000000036e8	ldp	x29, x30, [sp, #0x20]
00000000000036ec	ldp	x20, x19, [sp, #0x10]
00000000000036f0	ldp	x22, x21, [sp], #0x30
00000000000036f4	retab
00000000000036f8	udf	#0x0
00000000000036fc	udf	#0x0
__platform_bzero:
0000000000003700	mov	x2, x1
0000000000003704	eor.16b	v0, v0, v0
0000000000003708	eor	x1, x1, x1
000000000000370c	mov	x3, x0
0000000000003710	cmp	x2, #0x40
0000000000003714	b.lo	0x3814
0000000000003718	cmp	x2, #0x8, lsl #12
000000000000371c	b.lo	0x37cc
0000000000003720	stnp	q0, q0, [x0]
0000000000003724	stnp	q0, q0, [x0, #0x20]
0000000000003728	add	x3, x0, #0x40
000000000000372c	and	x3, x3, #0xffffffffffffffc0
0000000000003730	add	x2, x2, x0
0000000000003734	add	x4, x3, #0x40
0000000000003738	subs	x2, x2, x4
000000000000373c	b.ls	0x3750
0000000000003740	dc	zva, x3
0000000000003744	add	x3, x3, #0x40
0000000000003748	subs	x2, x2, #0x40
000000000000374c	b.hi	0x3740
0000000000003750	add	x3, x3, x2
0000000000003754	stnp	q0, q0, [x3]
0000000000003758	stnp	q0, q0, [x3, #0x20]
000000000000375c	ret
__platform_memset:
0000000000003760	and	x1, x1, #0xff
0000000000003764	mov	x3, #0x101010101010101
0000000000003768	mul	x1, x1, x3
000000000000376c	dup.2d	v0, x1
0000000000003770	mov	x3, x0
0000000000003774	cmp	x2, #0x40
0000000000003778	b.lo	0x3814
000000000000377c	cmp	x2, #0x8, lsl #12
0000000000003780	b.lo	0x37cc
0000000000003784	cbz	x1, 0x3720
0000000000003788	stnp	q0, q0, [x0]
000000000000378c	stnp	q0, q0, [x0, #0x20]
0000000000003790	add	x3, x0, #0x40
0000000000003794	and	x3, x3, #0xffffffffffffffc0
0000000000003798	add	x2, x2, x0
000000000000379c	add	x4, x3, #0x40
00000000000037a0	subs	x2, x2, x4
00000000000037a4	b.ls	0x37bc
00000000000037a8	stnp	q0, q0, [x3]
00000000000037ac	stnp	q0, q0, [x3, #0x20]
00000000000037b0	add	x3, x3, #0x40
00000000000037b4	subs	x2, x2, #0x40
00000000000037b8	b.hi	0x37a8
00000000000037bc	add	x3, x3, x2
00000000000037c0	stnp	q0, q0, [x3]
00000000000037c4	stnp	q0, q0, [x3, #0x20]
00000000000037c8	ret
00000000000037cc	stp	q0, q0, [x0]
00000000000037d0	stp	q0, q0, [x0, #0x20]
00000000000037d4	add	x3, x0, #0x40
00000000000037d8	and	x3, x3, #0xffffffffffffffc0
00000000000037dc	add	x2, x2, x0
00000000000037e0	add	x4, x3, #0x40
00000000000037e4	subs	x2, x2, x4
00000000000037e8	b.ls	0x3800
00000000000037ec	stp	q0, q0, [x3]
00000000000037f0	stp	q0, q0, [x3, #0x20]
00000000000037f4	add	x3, x3, #0x40
00000000000037f8	subs	x2, x2, #0x40
00000000000037fc	b.hi	0x37ec
0000000000003800	add	x3, x3, x2
0000000000003804	stp	q0, q0, [x3]
0000000000003808	stp	q0, q0, [x3, #0x20]
000000000000380c	ret
0000000000003810	str	x1, [x3], #0x8
0000000000003814	subs	x2, x2, #0x8
0000000000003818	b.hs	0x3810
000000000000381c	adds	x2, x2, #0x8
0000000000003820	b.eq	0x3830
0000000000003824	strb	w1, [x3], #0x1
0000000000003828	subs	x2, x2, #0x1
000000000000382c	b.ne	0x3824
0000000000003830	ret
__simple_asl_init:
0000000000003834	pacibsp
0000000000003838	stp	x22, x21, [sp, #-0x30]!
000000000000383c	stp	x20, x19, [sp, #0x10]
0000000000003840	stp	x29, x30, [sp, #0x20]
0000000000003844	add	x29, sp, #0x20
0000000000003848	mov	x19, x1
000000000000384c	mov	x21, x0
0000000000003850	adrp	x8, 5 ; 0x8000
0000000000003854	ldr	x8, [x8] ; literal pool symbol address: __os_alloc_once_table
0000000000003858	ldr	x9, [x8, #0x150]
000000000000385c	cmn	x9, #0x1
0000000000003860	b.ne	0x38b8
0000000000003864	ldr	x20, [x8, #0x158]
0000000000003868	adrp	x1, 4 ; 0x7000
000000000000386c	add	x1, x1, #0x658 ; literal pool for: "ASL_DISABLE"
0000000000003870	mov	x0, x21
0000000000003874	bl	__simple_getenv
0000000000003878	cbz	x0, 0x388c
000000000000387c	adrp	x1, 4 ; 0x7000
0000000000003880	add	x1, x1, #0x664 ; literal pool for: "1"
0000000000003884	bl	0x72d8 ; symbol stub for: __platform_strcmp
0000000000003888	cbz	w0, 0x38a8
000000000000388c	mov	w8, #0x1
0000000000003890	strb	w8, [x20]
0000000000003894	cbz	x19, 0x38a8
0000000000003898	ldr	x8, [x19, #0x20]
000000000000389c	cbz	x8, 0x38a8
00000000000038a0	ldr	x8, [x8]
00000000000038a4	str	x8, [x20, #0x8]
00000000000038a8	ldp	x29, x30, [sp, #0x20]
00000000000038ac	ldp	x20, x19, [sp, #0x10]
00000000000038b0	ldp	x22, x21, [sp], #0x30
00000000000038b4	retab
00000000000038b8	add	x0, x8, #0x150
00000000000038bc	adrp	x16, 0 ; 0x3000
00000000000038c0	add	x16, x16, #0xa14
00000000000038c4	paciza	x16
00000000000038c8	mov	x2, x16
00000000000038cc	mov	w1, #0x20
00000000000038d0	bl	__os_alloc_once
00000000000038d4	mov	x20, x0
00000000000038d8	b	0x3868
__os_alloc_slow:
00000000000038dc	pacibsp
00000000000038e0	sub	sp, sp, #0x70
00000000000038e4	stp	x26, x25, [sp, #0x20]
00000000000038e8	stp	x24, x23, [sp, #0x30]
00000000000038ec	stp	x22, x21, [sp, #0x40]
00000000000038f0	stp	x20, x19, [sp, #0x50]
00000000000038f4	stp	x29, x30, [sp, #0x60]
00000000000038f8	add	x29, sp, #0x60
00000000000038fc	mov	x19, x1
0000000000003900	mov	x20, x0
0000000000003904	adrp	x21, 5 ; 0x8000
0000000000003908	ldr	x21, [x21, #0x18] ; literal pool symbol address: _vm_page_size
000000000000390c	adrp	x22, 5 ; 0x8000
0000000000003910	ldr	x22, [x22, #0x10] ; literal pool symbol address: _mach_task_self_
0000000000003914	ldr	x8, [x21]
0000000000003918	mov	w23, #0x1
000000000000391c	mov	x24, #0x3
0000000000003920	movk	x24, #0x7, lsl #32
0000000000003924	adrp	x25, 17 ; 0x14000
0000000000003928	add	x25, x25, #0x18
000000000000392c	adrp	x26, 17 ; 0x14000
0000000000003930	str	x8, [sp, #0x18]
0000000000003934	ldr	w0, [x22]
0000000000003938	lsl	x2, x8, #1
000000000000393c	str	w23, [sp, #0x8]
0000000000003940	str	x24, [sp]
0000000000003944	add	x1, sp, #0x18
0000000000003948	mov	x3, #0x0
000000000000394c	mov	w4, #0x1
0000000000003950	movk	w4, #0x4900, lsl #16
0000000000003954	mov	w5, #0x0
0000000000003958	mov	x6, #0x0
000000000000395c	mov	w7, #0x0
0000000000003960	bl	0x7450 ; symbol stub for: _mach_vm_map
0000000000003964	cbnz	w0, 0x39ec
0000000000003968	ldr	x1, [sp, #0x18]
000000000000396c	mov	x8, x20
0000000000003970	cas	x8, x1, [x25]
0000000000003974	cmp	x8, x20
0000000000003978	b.ne	0x3988
000000000000397c	str	x20, [x1, #0x8]
0000000000003980	mov	x20, x1
0000000000003984	b	0x39a0
0000000000003988	ldr	w0, [x22]
000000000000398c	ldr	x8, [x21]
0000000000003990	lsl	x2, x8, #1
0000000000003994	bl	0x7440 ; symbol stub for: _mach_vm_deallocate
0000000000003998	ldr	x20, [x26, #0x18]
000000000000399c	cbz	x20, 0x39c0
00000000000039a0	ldadd	x19, x9, [x20]
00000000000039a4	ldr	x8, [x21]
00000000000039a8	lsl	x10, x8, #1
00000000000039ac	sub	x10, x10, #0x10
00000000000039b0	add	x11, x9, x19
00000000000039b4	cmp	x11, x10
00000000000039b8	b.hi	0x3930
00000000000039bc	b	0x39c8
00000000000039c0	ldr	x8, [x21]
00000000000039c4	b	0x3930
00000000000039c8	add	x8, x20, x9
00000000000039cc	add	x0, x8, #0x10
00000000000039d0	ldp	x29, x30, [sp, #0x60]
00000000000039d4	ldp	x20, x19, [sp, #0x50]
00000000000039d8	ldp	x22, x21, [sp, #0x40]
00000000000039dc	ldp	x24, x23, [sp, #0x30]
00000000000039e0	ldp	x26, x25, [sp, #0x20]
00000000000039e4	add	sp, sp, #0x70
00000000000039e8	retab
00000000000039ec	sxtw	x8, w0
00000000000039f0	stp	x20, x21, [sp, #-0x10]!
00000000000039f4	adrp	x20, 4 ; 0x7000
00000000000039f8	add	x20, x20, #0xc5f ; literal pool for: "BUG IN LIBPLATFORM: Failed to allocate in os_alloc_once"
00000000000039fc	adrp	x21, 13 ; 0x10000
0000000000003a00	add	x21, x21, #0x0
0000000000003a04	str	x20, [x21, #0x8]
0000000000003a08	str	x8, [x21, #0x38]
0000000000003a0c	ldp	x20, x21, [sp], #0x10
0000000000003a10	brk	#0x1
__simple_asl_init_context:
0000000000003a14	adrp	x8, 4 ; 0x7000
0000000000003a18	add	x8, x8, #0x71a ; literal pool for: "unknown"
0000000000003a1c	str	x8, [x0, #0x8]
0000000000003a20	mov	w8, #-0x1
0000000000003a24	str	w8, [x0, #0x10]
0000000000003a28	ret
0000000000003a2c	udf	#0x0
__platform_memmove:
0000000000003a30	sub	x3, x0, x1
0000000000003a34	cmp	x3, x2
0000000000003a38	b.lo	0x3c00
0000000000003a3c	mov	x3, x0
0000000000003a40	cmp	x2, #0x40
0000000000003a44	b.lo	0x3bdc
0000000000003a48	sub	x4, x1, x0
0000000000003a4c	cmp	x4, x2
0000000000003a50	b.lo	0x3b14
0000000000003a54	cmp	x2, #0x4, lsl #12
0000000000003a58	b.lo	0x3ab8
0000000000003a5c	add	x3, x3, #0x20
0000000000003a60	and	x3, x3, #0xffffffffffffffe0
0000000000003a64	ldnp	q2, q3, [x1]
0000000000003a68	sub	x5, x3, x0
0000000000003a6c	add	x1, x1, x5
0000000000003a70	ldnp	q0, q1, [x1]
0000000000003a74	add	x1, x1, #0x20
0000000000003a78	sub	x2, x2, x5
0000000000003a7c	stnp	q2, q3, [x0]
0000000000003a80	subs	x2, x2, #0x40
0000000000003a84	b.ls	0x3aa0
0000000000003a88	stnp	q0, q1, [x3]
0000000000003a8c	add	x3, x3, #0x20
0000000000003a90	ldnp	q0, q1, [x1]
0000000000003a94	add	x1, x1, #0x20
0000000000003a98	subs	x2, x2, #0x20
0000000000003a9c	b.hi	0x3a88
0000000000003aa0	add	x1, x1, x2
0000000000003aa4	ldnp	q2, q3, [x1]
0000000000003aa8	stnp	q0, q1, [x3]
0000000000003aac	add	x3, x3, x2
0000000000003ab0	stnp	q2, q3, [x3, #0x20]
0000000000003ab4	ret
0000000000003ab8	add	x3, x3, #0x20
0000000000003abc	and	x3, x3, #0xffffffffffffffe0
0000000000003ac0	ldnp	q2, q3, [x1]
0000000000003ac4	sub	x5, x3, x0
0000000000003ac8	add	x1, x1, x5
0000000000003acc	ldnp	q0, q1, [x1]
0000000000003ad0	add	x1, x1, #0x20
0000000000003ad4	sub	x2, x2, x5
0000000000003ad8	stp	q2, q3, [x0]
0000000000003adc	subs	x2, x2, #0x40
0000000000003ae0	b.ls	0x3afc
0000000000003ae4	stp	q0, q1, [x3]
0000000000003ae8	add	x3, x3, #0x20
0000000000003aec	ldnp	q0, q1, [x1]
0000000000003af0	add	x1, x1, #0x20
0000000000003af4	subs	x2, x2, #0x20
0000000000003af8	b.hi	0x3ae4
0000000000003afc	add	x1, x1, x2
0000000000003b00	ldnp	q2, q3, [x1]
0000000000003b04	stp	q0, q1, [x3]
0000000000003b08	add	x3, x3, x2
0000000000003b0c	stp	q2, q3, [x3, #0x20]
0000000000003b10	ret
0000000000003b14	cmp	x2, #0x4, lsl #12
0000000000003b18	b.lo	0x3b78
0000000000003b1c	add	x3, x3, #0x20
0000000000003b20	and	x3, x3, #0xffffffffffffffe0
0000000000003b24	ldp	q2, q3, [x1]
0000000000003b28	sub	x5, x3, x0
0000000000003b2c	add	x1, x1, x5
0000000000003b30	ldp	q0, q1, [x1]
0000000000003b34	add	x1, x1, #0x20
0000000000003b38	sub	x2, x2, x5
0000000000003b3c	stnp	q2, q3, [x0]
0000000000003b40	subs	x2, x2, #0x40
0000000000003b44	b.ls	0x3b60
0000000000003b48	stnp	q0, q1, [x3]
0000000000003b4c	add	x3, x3, #0x20
0000000000003b50	ldp	q0, q1, [x1]
0000000000003b54	add	x1, x1, #0x20
0000000000003b58	subs	x2, x2, #0x20
0000000000003b5c	b.hi	0x3b48
0000000000003b60	add	x1, x1, x2
0000000000003b64	ldp	q2, q3, [x1]
0000000000003b68	stnp	q0, q1, [x3]
0000000000003b6c	add	x3, x3, x2
0000000000003b70	stnp	q2, q3, [x3, #0x20]
0000000000003b74	ret
0000000000003b78	add	x3, x3, #0x20
0000000000003b7c	and	x3, x3, #0xffffffffffffffe0
0000000000003b80	ldp	q2, q3, [x1]
0000000000003b84	sub	x5, x3, x0
0000000000003b88	add	x1, x1, x5
0000000000003b8c	ldp	q0, q1, [x1]
0000000000003b90	add	x1, x1, #0x20
0000000000003b94	sub	x2, x2, x5
0000000000003b98	stp	q2, q3, [x0]
0000000000003b9c	subs	x2, x2, #0x40
0000000000003ba0	b.ls	0x3bbc
0000000000003ba4	stp	q0, q1, [x3]
0000000000003ba8	add	x3, x3, #0x20
0000000000003bac	ldp	q0, q1, [x1]
0000000000003bb0	add	x1, x1, #0x20
0000000000003bb4	subs	x2, x2, #0x20
0000000000003bb8	b.hi	0x3ba4
0000000000003bbc	add	x1, x1, x2
0000000000003bc0	ldp	q2, q3, [x1]
0000000000003bc4	stp	q0, q1, [x3]
0000000000003bc8	add	x3, x3, x2
0000000000003bcc	stp	q2, q3, [x3, #0x20]
0000000000003bd0	ret
0000000000003bd4	ldr	x6, [x1], #0x8
0000000000003bd8	str	x6, [x3], #0x8
0000000000003bdc	subs	x2, x2, #0x8
0000000000003be0	b.hs	0x3bd4
0000000000003be4	adds	x2, x2, #0x8
0000000000003be8	b.eq	0x3bfc
0000000000003bec	ldrb	w6, [x1], #0x1
0000000000003bf0	strb	w6, [x3], #0x1
0000000000003bf4	subs	x2, x2, #0x1
0000000000003bf8	b.ne	0x3bec
0000000000003bfc	ret
0000000000003c00	cbz	x3, 0x3cf4
0000000000003c04	add	x4, x0, x2
0000000000003c08	add	x1, x1, x2
0000000000003c0c	cmp	x2, #0x40
0000000000003c10	b.lo	0x3cd4
0000000000003c14	cmp	x2, #0x4, lsl #12
0000000000003c18	b.lo	0x3c74
0000000000003c1c	ldp	q2, q3, [x1, #-0x20]
0000000000003c20	sub	x3, x4, #0x1
0000000000003c24	and	x3, x3, #0xffffffffffffffe0
0000000000003c28	sub	x5, x4, x3
0000000000003c2c	sub	x1, x1, x5
0000000000003c30	sub	x2, x2, x5
0000000000003c34	ldp	q0, q1, [x1, #-0x20]
0000000000003c38	stnp	q2, q3, [x4, #-0x20]
0000000000003c3c	sub	x1, x1, #0x20
0000000000003c40	subs	x2, x2, #0x40
0000000000003c44	b.ls	0x3c60
0000000000003c48	stnp	q0, q1, [x3, #-0x20]
0000000000003c4c	sub	x3, x3, #0x20
0000000000003c50	ldp	q0, q1, [x1, #-0x20]
0000000000003c54	sub	x1, x1, #0x20
0000000000003c58	subs	x2, x2, #0x20
0000000000003c5c	b.hi	0x3c48
0000000000003c60	sub	x1, x1, x2
0000000000003c64	ldp	q2, q3, [x1, #-0x20]
0000000000003c68	stnp	q0, q1, [x3, #-0x20]
0000000000003c6c	stnp	q2, q3, [x0]
0000000000003c70	ret
0000000000003c74	ldp	q2, q3, [x1, #-0x20]
0000000000003c78	sub	x3, x4, #0x1
0000000000003c7c	and	x3, x3, #0xffffffffffffffe0
0000000000003c80	sub	x5, x4, x3
0000000000003c84	sub	x1, x1, x5
0000000000003c88	sub	x2, x2, x5
0000000000003c8c	ldp	q0, q1, [x1, #-0x20]
0000000000003c90	stp	q2, q3, [x4, #-0x20]
0000000000003c94	sub	x1, x1, #0x20
0000000000003c98	subs	x2, x2, #0x40
0000000000003c9c	b.ls	0x3cb8
0000000000003ca0	stp	q0, q1, [x3, #-0x20]
0000000000003ca4	sub	x3, x3, #0x20
0000000000003ca8	ldp	q0, q1, [x1, #-0x20]
0000000000003cac	sub	x1, x1, #0x20
0000000000003cb0	subs	x2, x2, #0x20
0000000000003cb4	b.hi	0x3ca0
0000000000003cb8	sub	x1, x1, x2
0000000000003cbc	ldp	q2, q3, [x1, #-0x20]
0000000000003cc0	stp	q0, q1, [x3, #-0x20]
0000000000003cc4	stp	q2, q3, [x0]
0000000000003cc8	ret
0000000000003ccc	ldr	x6, [x1, #-0x8]!
0000000000003cd0	str	x6, [x4, #-0x8]!
0000000000003cd4	subs	x2, x2, #0x8
0000000000003cd8	b.hs	0x3ccc
0000000000003cdc	adds	x2, x2, #0x8
0000000000003ce0	b.eq	0x3cf4
0000000000003ce4	ldrb	w6, [x1, #-0x1]!
0000000000003ce8	strb	w6, [x4, #-0x1]!
0000000000003cec	subs	x2, x2, #0x1
0000000000003cf0	b.ne	0x3ce4
0000000000003cf4	ret
0000000000003cf8	udf	#0x0
0000000000003cfc	udf	#0x0
0000000000003d00	.long	0x03020100
0000000000003d04	.long	0x07060504
0000000000003d08	add	w8, w8, w10, lsl #2
0000000000003d0c	.long	0x0f0e0d0c
0000000000003d10	udf	#0x0
0000000000003d14	udf	#0x0
0000000000003d18	udf	#0x0
0000000000003d1c	udf	#0x0
__platform_strchr:
0000000000003d20	dup.16b	v3, w1
0000000000003d24	and	x2, x0, #0xf
0000000000003d28	and	x0, x0, #0xfffffffffffffff0
0000000000003d2c	ldr	q0, [x0]
0000000000003d30	cmeq.16b	v1, v0, v3
0000000000003d34	bic.16b	v0, v0, v1
0000000000003d38	adr	x3, #-56
0000000000003d3c	ldr	q2, [x3], #0x10
0000000000003d40	sub	x3, x3, x2
0000000000003d44	ldr	q1, [x3]
0000000000003d48	orr.16b	v0, v0, v1
0000000000003d4c	b	0x3d5c
0000000000003d50	ldr	q0, [x0, #0x10]!
0000000000003d54	cmeq.16b	v1, v0, v3
0000000000003d58	bic.16b	v0, v0, v1
0000000000003d5c	uminv.16b	b1, v0
0000000000003d60	fmov	w2, s1
0000000000003d64	cbnz	w2, 0x3d50
0000000000003d68	eor.16b	v1, v1, v1
0000000000003d6c	cmhi.16b	v0, v0, v1
0000000000003d70	orr.16b	v0, v0, v2
0000000000003d74	uminv.16b	b0, v0
0000000000003d78	fmov	w2, s0
0000000000003d7c	add	x0, x0, x2
0000000000003d80	ldrb	w2, [x0]
0000000000003d84	and	x1, x1, #0xff
0000000000003d88	eor	x3, x3, x3
0000000000003d8c	cmp	x1, x2
0000000000003d90	csel	x0, x0, x3, eq
0000000000003d94	ret
__spin_lock:
0000000000003d98	mov	w8, #0x0
0000000000003d9c	mov	w9, #-0x1
0000000000003da0	casa	w8, w9, [x0]
0000000000003da4	cmp	w8, #0x0
0000000000003da8	b.ne	0x3db0
0000000000003dac	ret
0000000000003db0	b	__OSSpinLockLockSlow
_spin_unlock:
0000000000003db4	stlr	wzr, [x0]
0000000000003db8	ret
_OSAtomicIncrement64:
0000000000003dbc	mov	w8, #0x1
0000000000003dc0	ldadd	x8, x8, [x0]
0000000000003dc4	add	x0, x8, #0x1
0000000000003dc8	ret
__sigtramp:
0000000000003dcc	pacibsp
0000000000003dd0	stp	x22, x21, [sp, #-0x30]!
0000000000003dd4	stp	x20, x19, [sp, #0x10]
0000000000003dd8	stp	x29, x30, [sp, #0x20]
0000000000003ddc	add	x29, sp, #0x20
0000000000003de0	mov	x19, x5
0000000000003de4	mov	x20, x4
0000000000003de8	mov	x1, x3
0000000000003dec	mov	x8, x0
0000000000003df0	adrp	x21, 17 ; 0x14000
0000000000003df4	str	w2, [x21, #0x20]
0000000000003df8	mov	x0, x2
0000000000003dfc	mov	x2, x4
0000000000003e00	blraaz	x8
0000000000003e04	str	wzr, [x21, #0x20]
0000000000003e08	mov	x0, x20
0000000000003e0c	mov	w1, #0x1e
0000000000003e10	mov	x2, x19
0000000000003e14	bl	0x7350 ; symbol stub for: ___sigreturn
0000000000003e18	brk	#0x1
_os_lock_lock:
0000000000003e1c	ldr	x8, [x0]
0000000000003e20	ldr	x1, [x8, #0x8]
0000000000003e24	braaz	x1
__os_lock_handoff_lock:
0000000000003e28	mov	w8, #0x0
0000000000003e2c	mrs	x9, TPIDRRO_EL0
0000000000003e30	ldr	w9, [x9, #0x18]
0000000000003e34	add	x10, x0, #0x8
0000000000003e38	casa	w8, w9, [x10]
0000000000003e3c	cmp	w8, #0x0
0000000000003e40	b.ne	0x3e48
0000000000003e44	ret
0000000000003e48	b	__os_lock_handoff_lock_slow
_os_lock_unlock:
0000000000003e4c	ldr	x8, [x0]
0000000000003e50	ldr	x1, [x8, #0x18]
0000000000003e54	braaz	x1
__os_lock_handoff_unlock:
0000000000003e58	add	x8, x0, #0x8
0000000000003e5c	stlr	wzr, [x8]
0000000000003e60	ret
__os_lock_handoff_lock_slow:
0000000000003e64	pacibsp
0000000000003e68	stp	x26, x25, [sp, #-0x50]!
0000000000003e6c	stp	x24, x23, [sp, #0x10]
0000000000003e70	stp	x22, x21, [sp, #0x20]
0000000000003e74	stp	x20, x19, [sp, #0x30]
0000000000003e78	stp	x29, x30, [sp, #0x40]
0000000000003e7c	add	x29, sp, #0x40
0000000000003e80	mov	x20, x0
0000000000003e84	mov	w24, #0x0
0000000000003e88	mrs	x8, TPIDRRO_EL0
0000000000003e8c	ldr	w19, [x8, #0x18]
0000000000003e90	mov	w22, #0x4
0000000000003e94	mov	w23, #0x1
0000000000003e98	mov	w8, #0x64
0000000000003e9c	mov	w21, #0x1
0000000000003ea0	sub	w26, w23, w8
0000000000003ea4	mov	x25, x26
0000000000003ea8	ldr	w0, [x20, #0x8]
0000000000003eac	cbnz	w0, 0x3ec0
0000000000003eb0	add	x8, x20, #0x8
0000000000003eb4	casa	w0, w19, [x8]
0000000000003eb8	cmp	w0, #0x0
0000000000003ebc	b.eq	0x3f08
0000000000003ec0	cmp	w0, w19
0000000000003ec4	b.eq	0x3f20
0000000000003ec8	add	w26, w25, #0x1
0000000000003ecc	cmp	w26, #0x2
0000000000003ed0	b.eq	0x3ef8
0000000000003ed4	mov	x1, x22
0000000000003ed8	mov	x2, x21
0000000000003edc	bl	0x74d0 ; symbol stub for: _thread_switch
0000000000003ee0	tbz	w24, #0x0, 0x3ea4
0000000000003ee4	add	w21, w21, #0x1
0000000000003ee8	neg	w8, w25
0000000000003eec	mov	w22, #0x5
0000000000003ef0	mov	w24, #0x1
0000000000003ef4	b	0x3ea0
0000000000003ef8	mov	w1, #0x5
0000000000003efc	mov	x2, x21
0000000000003f00	bl	0x74d0 ; symbol stub for: _thread_switch
0000000000003f04	b	0x3ee4
0000000000003f08	ldp	x29, x30, [sp, #0x40]
0000000000003f0c	ldp	x20, x19, [sp, #0x30]
0000000000003f10	ldp	x22, x21, [sp, #0x20]
0000000000003f14	ldp	x24, x23, [sp, #0x10]
0000000000003f18	ldp	x26, x25, [sp], #0x50
0000000000003f1c	retab
0000000000003f20	mov	x0, x19
0000000000003f24	bl	__os_lock_recursive_abort
_OSAtomicCompareAndSwap32:
0000000000003f28	mov	x8, x0
0000000000003f2c	cas	w8, w1, [x2]
0000000000003f30	cmp	w8, w0
0000000000003f34	cset	w0, eq
0000000000003f38	ret
_OSAtomicAdd32:
0000000000003f3c	ldadd	w0, w8, [x1]
0000000000003f40	add	w0, w8, w0
0000000000003f44	ret
__os_lock_unfair_lock:
0000000000003f48	mov	w8, #0x0
0000000000003f4c	add	x0, x0, #0x8
0000000000003f50	mrs	x9, TPIDRRO_EL0
0000000000003f54	ldr	w3, [x9, #0x18]
0000000000003f58	casa	w8, w3, [x0]
0000000000003f5c	cmp	w8, #0x0
0000000000003f60	b.ne	0x3f68
0000000000003f64	ret
0000000000003f68	mov	w1, #0x0
0000000000003f6c	mov	x2, #0x0
0000000000003f70	b	__os_unfair_lock_lock_slow
__os_lock_spin_lock:
0000000000003f74	mov	w8, #0x0
0000000000003f78	add	x0, x0, #0x8
0000000000003f7c	mov	w9, #-0x1
0000000000003f80	casa	w8, w9, [x0]
0000000000003f84	cmp	w8, #0x0
0000000000003f88	b.ne	0x3f90
0000000000003f8c	ret
0000000000003f90	b	__OSSpinLockLockSlow
__os_lock_spin_unlock:
0000000000003f94	add	x8, x0, #0x8
0000000000003f98	stlr	wzr, [x8]
0000000000003f9c	ret
_OSMemoryBarrier:
0000000000003fa0	dmb	ish
0000000000003fa4	ret
_OSAtomicCompareAndSwap64Barrier:
0000000000003fa8	mov	x8, x0
0000000000003fac	casal	x8, x1, [x2]
0000000000003fb0	cmp	x8, x0
0000000000003fb4	cset	w0, eq
0000000000003fb8	ret
_OSAtomicCompareAndSwap32Barrier:
0000000000003fbc	mov	x8, x0
0000000000003fc0	casal	w8, w1, [x2]
0000000000003fc4	cmp	w8, w0
0000000000003fc8	cset	w0, eq
0000000000003fcc	ret
_OSAtomicCompareAndSwapPtrBarrier:
0000000000003fd0	mov	x8, x0
0000000000003fd4	casal	x8, x1, [x2]
0000000000003fd8	cmp	x8, x0
0000000000003fdc	cset	w0, eq
0000000000003fe0	ret
_OSAtomicOr32Barrier:
0000000000003fe4	ldsetal	w0, w8, [x1]
0000000000003fe8	orr	w0, w8, w0
0000000000003fec	ret
_OSAtomicXor32Barrier:
0000000000003ff0	ldeoral	w0, w8, [x1]
0000000000003ff4	eor	w0, w8, w0
0000000000003ff8	ret
_OSAtomicAdd32Barrier:
0000000000003ffc	ldaddal	w0, w8, [x1]
0000000000004000	add	w0, w8, w0
0000000000004004	ret
__os_semaphore_signal:
0000000000004008	pacibsp
000000000000400c	stp	x29, x30, [sp, #-0x10]!
0000000000004010	mov	x29, sp
0000000000004014	bl	0x7490 ; symbol stub for: _semaphore_signal
0000000000004018	cbnz	w0, 0x4024
000000000000401c	ldp	x29, x30, [sp], #0x10
0000000000004020	retab
0000000000004024	bl	__os_semaphore_signal.cold.1
__os_semaphore_wait:
0000000000004028	pacibsp
000000000000402c	stp	x20, x19, [sp, #-0x20]!
0000000000004030	stp	x29, x30, [sp, #0x10]
0000000000004034	add	x29, sp, #0x10
0000000000004038	mov	x19, x0
000000000000403c	mov	x0, x19
0000000000004040	bl	0x74a0 ; symbol stub for: _semaphore_wait
0000000000004044	cbz	w0, 0x4054
0000000000004048	cmp	w0, #0xe
000000000000404c	b.eq	0x403c
0000000000004050	bl	__os_semaphore_wait.cold.1
0000000000004054	ldp	x29, x30, [sp, #0x10]
0000000000004058	ldp	x20, x19, [sp], #0x20
000000000000405c	retab
_OSAtomicIncrement32Barrier:
0000000000004060	mov	w8, #0x1
0000000000004064	ldaddal	w8, w8, [x0]
0000000000004068	add	w0, w8, #0x1
000000000000406c	ret
_OSAtomicDecrement32Barrier:
0000000000004070	mov	w8, #-0x1
0000000000004074	ldaddal	w8, w8, [x0]
0000000000004078	sub	w0, w8, #0x1
000000000000407c	ret
__OSSpinLockLockSlow:
0000000000004080	pacibsp
0000000000004084	stp	x29, x30, [sp, #-0x10]!
0000000000004088	mov	x29, sp
000000000000408c	mov	w8, #0x64
0000000000004090	mov	w9, #-0x1
0000000000004094	ldxr	w10, [x0]
0000000000004098	cbnz	w10, 0x40b0
000000000000409c	clrex
00000000000040a0	casa	w10, w9, [x0]
00000000000040a4	cmp	w10, #0x0
00000000000040a8	b.eq	0x40c8
00000000000040ac	b	0x4094
00000000000040b0	cmn	w10, #0x1
00000000000040b4	b.ne	0x40d0
00000000000040b8	cbz	w8, 0x40dc
00000000000040bc	sub	w8, w8, #0x1
00000000000040c0	wfe
00000000000040c4	b	0x4094
00000000000040c8	ldp	x29, x30, [sp], #0x10
00000000000040cc	retab
00000000000040d0	clrex
00000000000040d4	sxtw	x1, w10
00000000000040d8	bl	__os_lock_corruption_abort
00000000000040dc	clrex
00000000000040e0	ldp	x29, x30, [sp], #0x10
00000000000040e4	autibsp
00000000000040e8	eor	x16, x30, x30, lsl #1
00000000000040ec	tbz	x16, #0x3e, 0x40f4
00000000000040f0	brk	#0xc471
00000000000040f4	b	__OSSpinLockLockYield
_OSAtomicAdd64:
00000000000040f8	ldadd	x0, x8, [x1]
00000000000040fc	add	x0, x8, x0
0000000000004100	ret
_OSSpinLockTry:
0000000000004104	mov	w8, #0x0
0000000000004108	mov	w9, #-0x1
000000000000410c	casa	w8, w9, [x0]
0000000000004110	cmp	w8, #0x0
0000000000004114	cset	w0, eq
0000000000004118	ret
_OSAtomicAnd32OrigBarrier:
000000000000411c	mvn	w8, w0
0000000000004120	ldclral	w8, w0, [x1]
0000000000004124	ret
_OSAtomicCompareAndSwapLongBarrier:
0000000000004128	mov	x8, x0
000000000000412c	casal	x8, x1, [x2]
0000000000004130	cmp	x8, x0
0000000000004134	cset	w0, eq
0000000000004138	ret
_OSAtomicTestAndSetBarrier:
000000000000413c	ands	x8, x1, #0x3
0000000000004140	and	x9, x1, #0xfffffffffffffffc
0000000000004144	add	w8, w0, w8, lsl #3
0000000000004148	csel	x9, x1, x9, eq
000000000000414c	and	w10, w0, #0x7
0000000000004150	mov	w11, #0x80
0000000000004154	lsr	w10, w11, w10
0000000000004158	and	w11, w8, #0x18
000000000000415c	lsl	w10, w10, w11
0000000000004160	lsr	w8, w8, #3
0000000000004164	and	x8, x8, #0x1ffffffc
0000000000004168	add	x8, x9, x8
000000000000416c	ldsetal	w10, w8, [x8]
0000000000004170	tst	w8, w10
0000000000004174	cset	w0, ne
0000000000004178	ret
_os_lock_trylock:
000000000000417c	ldr	x8, [x0]
0000000000004180	ldr	x1, [x8, #0x10]
0000000000004184	braaz	x1
__os_lock_handoff_trylock:
0000000000004188	mov	w8, #0x0
000000000000418c	mrs	x9, TPIDRRO_EL0
0000000000004190	ldr	w9, [x9, #0x18]
0000000000004194	add	x10, x0, #0x8
0000000000004198	casa	w8, w9, [x10]
000000000000419c	cmp	w8, #0x0
00000000000041a0	cset	w0, eq
00000000000041a4	ret
_OSAtomicIncrement64Barrier:
00000000000041a8	mov	w8, #0x1
00000000000041ac	ldaddal	x8, x8, [x0]
00000000000041b0	add	x0, x8, #0x1
00000000000041b4	ret
_OSAtomicCompareAndSwapInt:
00000000000041b8	mov	x8, x0
00000000000041bc	cas	w8, w1, [x2]
00000000000041c0	cmp	w8, w0
00000000000041c4	cset	w0, eq
00000000000041c8	ret
_OSAtomicOr32:
00000000000041cc	ldset	w0, w8, [x1]
00000000000041d0	orr	w0, w8, w0
00000000000041d4	ret
_OSAtomicCompareAndSwapLong:
00000000000041d8	mov	x8, x0
00000000000041dc	cas	x8, x1, [x2]
00000000000041e0	cmp	x8, x0
00000000000041e4	cset	w0, eq
00000000000041e8	ret
_OSAtomicCompareAndSwapPtr:
00000000000041ec	mov	x8, x0
00000000000041f0	cas	x8, x1, [x2]
00000000000041f4	cmp	x8, x0
00000000000041f8	cset	w0, eq
00000000000041fc	ret
_OSAtomicAnd32:
0000000000004200	mvn	w8, w0
0000000000004204	ldclr	w8, w8, [x1]
0000000000004208	and	w0, w8, w0
000000000000420c	ret
_OSAtomicDecrement64Barrier:
0000000000004210	mov	x8, #-0x1
0000000000004214	ldaddal	x8, x8, [x0]
0000000000004218	sub	x0, x8, #0x1
000000000000421c	ret
_OSAtomicTestAndClear:
0000000000004220	ands	x8, x1, #0x3
0000000000004224	and	x9, x1, #0xfffffffffffffffc
0000000000004228	add	w8, w0, w8, lsl #3
000000000000422c	csel	x9, x1, x9, eq
0000000000004230	and	w10, w0, #0x7
0000000000004234	mov	w11, #0x80
0000000000004238	lsr	w10, w11, w10
000000000000423c	and	w11, w8, #0x18
0000000000004240	lsl	w10, w10, w11
0000000000004244	lsr	w8, w8, #3
0000000000004248	and	x8, x8, #0x1ffffffc
000000000000424c	add	x8, x9, x8
0000000000004250	ldclr	w10, w8, [x8]
0000000000004254	tst	w8, w10
0000000000004258	cset	w0, ne
000000000000425c	ret
_OSAtomicDecrement64:
0000000000004260	mov	x8, #-0x1
0000000000004264	ldadd	x8, x8, [x0]
0000000000004268	sub	x0, x8, #0x1
000000000000426c	ret
_OSAtomicAdd64Barrier:
0000000000004270	ldaddal	x0, x8, [x1]
0000000000004274	add	x0, x8, x0
0000000000004278	ret
__sigunaltstack:
000000000000427c	tst	w0, #0x1
0000000000004280	mov	w8, #0x40000000
0000000000004284	mov	w9, #-0x80000000
0000000000004288	csel	w1, w9, w8, eq
000000000000428c	mov	x0, #0x0
0000000000004290	mov	x2, #0x0
0000000000004294	b	0x7350 ; symbol stub for: ___sigreturn
_OSAtomicOr32Orig:
0000000000004298	ldset	w0, w0, [x1]
000000000000429c	ret
_OSAtomicCompareAndSwapIntBarrier:
00000000000042a0	mov	x8, x0
00000000000042a4	casal	w8, w1, [x2]
00000000000042a8	cmp	w8, w0
00000000000042ac	cset	w0, eq
00000000000042b0	ret
__simple_vesprintf:
00000000000042b4	pacibsp
00000000000042b8	stp	x29, x30, [sp, #-0x10]!
00000000000042bc	mov	x29, sp
00000000000042c0	bl	___simple_bprintf
00000000000042c4	mov	w0, #0x0
00000000000042c8	ldp	x29, x30, [sp], #0x10
00000000000042cc	retab
___simple_bprintf:
00000000000042d0	pacibsp
00000000000042d4	sub	sp, sp, #0x70
00000000000042d8	stp	x28, x27, [sp, #0x10]
00000000000042dc	stp	x26, x25, [sp, #0x20]
00000000000042e0	stp	x24, x23, [sp, #0x30]
00000000000042e4	stp	x22, x21, [sp, #0x40]
00000000000042e8	stp	x20, x19, [sp, #0x50]
00000000000042ec	stp	x29, x30, [sp, #0x60]
00000000000042f0	add	x29, sp, #0x60
00000000000042f4	str	x3, [sp, #0x8]
00000000000042f8	ldrb	w8, [x2]
00000000000042fc	cbz	w8, 0x4b14
0000000000004300	mov	x22, x2
0000000000004304	mov	x19, x1
0000000000004308	mov	x20, x0
000000000000430c	adrp	x21, 3 ; 0x7000
0000000000004310	add	x21, x21, #0x722 ; literal pool for: ".*s"
0000000000004314	mov	w27, #0xa
0000000000004318	mov	x0, x22
000000000000431c	mov	w1, #0x25
0000000000004320	bl	__platform_strchr
0000000000004324	cbz	x0, 0x4b0c
0000000000004328	mov	x23, x0
000000000000432c	sub	x25, x0, x22
0000000000004330	cmp	x25, #0x1
0000000000004334	b.lt	0x43c4
0000000000004338	ldrb	w24, [x22], #0x1
000000000000433c	cbz	x19, 0x438c
0000000000004340	mov	x0, x24
0000000000004344	blraaz	x19
0000000000004348	cbz	x0, 0x438c
000000000000434c	ldrb	w24, [x0]
0000000000004350	cbz	w24, 0x43b4
0000000000004354	add	x28, x0, #0x1
0000000000004358	ldp	x8, x9, [x20, #0x8]
000000000000435c	cmp	x8, x9
0000000000004360	b.lo	0x4374
0000000000004364	ldr	x8, [x20, #0x20]
0000000000004368	mov	x0, x20
000000000000436c	blraaz	x8
0000000000004370	ldr	x8, [x20, #0x8]
0000000000004374	add	x9, x8, #0x1
0000000000004378	str	x9, [x20, #0x8]
000000000000437c	strb	w24, [x8]
0000000000004380	ldrb	w24, [x28], #0x1
0000000000004384	cbnz	w24, 0x4358
0000000000004388	b	0x43b4
000000000000438c	ldp	x8, x9, [x20, #0x8]
0000000000004390	cmp	x8, x9
0000000000004394	b.lo	0x43a8
0000000000004398	ldr	x8, [x20, #0x20]
000000000000439c	mov	x0, x20
00000000000043a0	blraaz	x8
00000000000043a4	ldr	x8, [x20, #0x8]
00000000000043a8	add	x9, x8, #0x1
00000000000043ac	str	x9, [x20, #0x8]
00000000000043b0	strb	w24, [x8]
00000000000043b4	sub	x8, x25, #0x1
00000000000043b8	cmp	x25, #0x1
00000000000043bc	mov	x25, x8
00000000000043c0	b.gt	0x4338
00000000000043c4	mov	x22, x23
00000000000043c8	ldrb	w8, [x22, #0x1]!
00000000000043cc	cmp	w8, #0x25
00000000000043d0	b.ne	0x4424
00000000000043d4	cbz	x19, 0x44ec
00000000000043d8	mov	w0, #0x25
00000000000043dc	blraaz	x19
00000000000043e0	cbz	x0, 0x44ec
00000000000043e4	ldrb	w22, [x0]
00000000000043e8	cbz	w22, 0x4518
00000000000043ec	add	x24, x0, #0x1
00000000000043f0	ldp	x8, x9, [x20, #0x8]
00000000000043f4	cmp	x8, x9
00000000000043f8	b.lo	0x440c
00000000000043fc	ldr	x8, [x20, #0x20]
0000000000004400	mov	x0, x20
0000000000004404	blraaz	x8
0000000000004408	ldr	x8, [x20, #0x8]
000000000000440c	add	x9, x8, #0x1
0000000000004410	str	x9, [x20, #0x8]
0000000000004414	strb	w22, [x8]
0000000000004418	ldrb	w22, [x24], #0x1
000000000000441c	cbnz	w22, 0x43f0
0000000000004420	b	0x4518
0000000000004424	mov	x0, x22
0000000000004428	mov	x1, x21
000000000000442c	mov	w2, #0x3
0000000000004430	bl	0x72e4 ; symbol stub for: __platform_strncmp
0000000000004434	cbz	w0, 0x4520
0000000000004438	mov	w28, #0x0
000000000000443c	mov	w24, #0x0
0000000000004440	mov	w23, #0x0
0000000000004444	ldrsb	w8, [x22]
0000000000004448	and	w25, w8, #0xff
000000000000444c	cmp	w8, #0x62
0000000000004450	b.le	0x44a0
0000000000004454	sub	w16, w8, #0x63
0000000000004458	cmp	w16, #0x16
000000000000445c	b.hi	0x4964
0000000000004460	cmp	x16, #0x16
0000000000004464	csel	x16, x16, xzr, ls
0000000000004468	adrp	x17, 1 ; 0x5000
000000000000446c	add	x17, x17, #0x4c8
0000000000004470	ldrsw	x16, [x17, x16, lsl #2]
0000000000004474	adr	x17, #0
0000000000004478	add	x16, x17, x16
000000000000447c	br	x16
0000000000004480	add	w28, w28, #0x1
0000000000004484	add	x22, x22, #0x1
0000000000004488	mov	x0, x22
000000000000448c	mov	x1, x21
0000000000004490	mov	w2, #0x3
0000000000004494	bl	0x72e4 ; symbol stub for: __platform_strncmp
0000000000004498	cbnz	w0, 0x4444
000000000000449c	b	0x4520
00000000000044a0	sub	w9, w8, #0x31
00000000000044a4	cmp	w9, #0x9
00000000000044a8	b.hs	0x44d8
00000000000044ac	sub	w8, w25, #0x30
00000000000044b0	cmp	w8, #0x9
00000000000044b4	b.hi	0x4488
00000000000044b8	mul	w8, w23, w27
00000000000044bc	add	w8, w8, w25, uxtb
00000000000044c0	ldrb	w25, [x22, #0x1]!
00000000000044c4	sub	w23, w8, #0x30
00000000000044c8	sub	w8, w25, #0x30
00000000000044cc	cmp	w8, #0xa
00000000000044d0	b.lo	0x44b8
00000000000044d4	b	0x4488
00000000000044d8	cmp	w8, #0x30
00000000000044dc	b.ne	0x45f8
00000000000044e0	add	w24, w24, #0x1
00000000000044e4	ldrb	w25, [x22, #0x1]!
00000000000044e8	b	0x44ac
00000000000044ec	ldp	x8, x9, [x20, #0x8]
00000000000044f0	cmp	x8, x9
00000000000044f4	b.lo	0x4508
00000000000044f8	ldr	x8, [x20, #0x20]
00000000000044fc	mov	x0, x20
0000000000004500	blraaz	x8
0000000000004504	ldr	x8, [x20, #0x8]
0000000000004508	add	x9, x8, #0x1
000000000000450c	str	x9, [x20, #0x8]
0000000000004510	mov	w9, #0x25
0000000000004514	strb	w9, [x8]
0000000000004518	add	x22, x23, #0x2
000000000000451c	b	0x4a84
0000000000004520	ldr	x8, [sp, #0x8]
0000000000004524	add	x9, x8, #0x8
0000000000004528	str	x9, [sp, #0x8]
000000000000452c	ldr	w24, [x8]
0000000000004530	add	x9, x8, #0x10
0000000000004534	str	x9, [sp, #0x8]
0000000000004538	cmp	w24, #0x1
000000000000453c	b.lt	0x45d0
0000000000004540	ldr	x25, [x8, #0x8]
0000000000004544	ldrb	w23, [x25], #0x1
0000000000004548	cbz	x19, 0x4598
000000000000454c	mov	x0, x23
0000000000004550	blraaz	x19
0000000000004554	cbz	x0, 0x4598
0000000000004558	ldrb	w23, [x0]
000000000000455c	cbz	w23, 0x45c0
0000000000004560	add	x28, x0, #0x1
0000000000004564	ldp	x8, x9, [x20, #0x8]
0000000000004568	cmp	x8, x9
000000000000456c	b.lo	0x4580
0000000000004570	ldr	x8, [x20, #0x20]
0000000000004574	mov	x0, x20
0000000000004578	blraaz	x8
000000000000457c	ldr	x8, [x20, #0x8]
0000000000004580	add	x9, x8, #0x1
0000000000004584	str	x9, [x20, #0x8]
0000000000004588	strb	w23, [x8]
000000000000458c	ldrb	w23, [x28], #0x1
0000000000004590	cbnz	w23, 0x4564
0000000000004594	b	0x45c0
0000000000004598	ldp	x8, x9, [x20, #0x8]
000000000000459c	cmp	x8, x9
00000000000045a0	b.lo	0x45b4
00000000000045a4	ldr	x8, [x20, #0x20]
00000000000045a8	mov	x0, x20
00000000000045ac	blraaz	x8
00000000000045b0	ldr	x8, [x20, #0x8]
00000000000045b4	add	x9, x8, #0x1
00000000000045b8	str	x9, [x20, #0x8]
00000000000045bc	strb	w23, [x8]
00000000000045c0	sub	w8, w24, #0x1
00000000000045c4	cmp	w24, #0x1
00000000000045c8	mov	x24, x8
00000000000045cc	b.gt	0x4544
00000000000045d0	add	x22, x22, #0x2
00000000000045d4	b	0x4a80
00000000000045d8	cmp	w28, #0x1
00000000000045dc	b.eq	0x4620
00000000000045e0	cbnz	w28, 0x4620
00000000000045e4	ldr	x8, [sp, #0x8]
00000000000045e8	add	x9, x8, #0x8
00000000000045ec	str	x9, [sp, #0x8]
00000000000045f0	ldrsw	x2, [x8]
00000000000045f4	b	0x4630
00000000000045f8	cmp	w8, #0x58
00000000000045fc	b.ne	0x4964
0000000000004600	cmp	w28, #0x1
0000000000004604	b.eq	0x4648
0000000000004608	cbnz	w28, 0x4648
000000000000460c	ldr	x8, [sp, #0x8]
0000000000004610	add	x9, x8, #0x8
0000000000004614	str	x9, [sp, #0x8]
0000000000004618	ldr	w2, [x8]
000000000000461c	b	0x4658
0000000000004620	ldr	x8, [sp, #0x8]
0000000000004624	add	x9, x8, #0x8
0000000000004628	str	x9, [sp, #0x8]
000000000000462c	ldr	x2, [x8]
0000000000004630	mov	x0, x20
0000000000004634	mov	x1, x19
0000000000004638	mov	x3, x23
000000000000463c	mov	x4, x24
0000000000004640	bl	_dec
0000000000004644	b	0x4a80
0000000000004648	ldr	x8, [sp, #0x8]
000000000000464c	add	x9, x8, #0x8
0000000000004650	str	x9, [sp, #0x8]
0000000000004654	ldr	x2, [x8]
0000000000004658	ldrb	w8, [x22]
000000000000465c	cmp	w8, #0x58
0000000000004660	cset	w5, eq
0000000000004664	mov	x0, x20
0000000000004668	mov	x1, x19
000000000000466c	mov	x3, x23
0000000000004670	mov	x4, x24
0000000000004674	mov	w6, #0x0
0000000000004678	b	0x47c4
000000000000467c	cmp	w23, #0x2
0000000000004680	b.lt	0x471c
0000000000004684	cmp	w24, #0x0
0000000000004688	mov	w8, #0x30
000000000000468c	mov	w9, #0x20
0000000000004690	csel	w24, w9, w8, eq
0000000000004694	cbz	x19, 0x46e4
0000000000004698	mov	x0, x24
000000000000469c	blraaz	x19
00000000000046a0	cbz	x0, 0x46e4
00000000000046a4	ldrb	w25, [x0]
00000000000046a8	cbz	w25, 0x470c
00000000000046ac	add	x28, x0, #0x1
00000000000046b0	ldp	x8, x9, [x20, #0x8]
00000000000046b4	cmp	x8, x9
00000000000046b8	b.lo	0x46cc
00000000000046bc	ldr	x8, [x20, #0x20]
00000000000046c0	mov	x0, x20
00000000000046c4	blraaz	x8
00000000000046c8	ldr	x8, [x20, #0x8]
00000000000046cc	add	x9, x8, #0x1
00000000000046d0	str	x9, [x20, #0x8]
00000000000046d4	strb	w25, [x8]
00000000000046d8	ldrb	w25, [x28], #0x1
00000000000046dc	cbnz	w25, 0x46b0
00000000000046e0	b	0x470c
00000000000046e4	ldp	x8, x9, [x20, #0x8]
00000000000046e8	cmp	x8, x9
00000000000046ec	b.lo	0x4700
00000000000046f0	ldr	x8, [x20, #0x20]
00000000000046f4	mov	x0, x20
00000000000046f8	blraaz	x8
00000000000046fc	ldr	x8, [x20, #0x8]
0000000000004700	add	x9, x8, #0x1
0000000000004704	str	x9, [x20, #0x8]
0000000000004708	strb	w24, [x8]
000000000000470c	sub	w8, w23, #0x1
0000000000004710	cmp	w23, #0x2
0000000000004714	mov	x23, x8
0000000000004718	b.gt	0x4694
000000000000471c	ldr	x8, [sp, #0x8]
0000000000004720	add	x9, x8, #0x8
0000000000004724	str	x9, [sp, #0x8]
0000000000004728	ldr	w23, [x8]
000000000000472c	cbz	x19, 0x4a2c
0000000000004730	and	w0, w23, #0xff
0000000000004734	blraaz	x19
0000000000004738	cbz	x0, 0x4a2c
000000000000473c	ldrb	w23, [x0]
0000000000004740	cbz	w23, 0x4a80
0000000000004744	add	x24, x0, #0x1
0000000000004748	ldp	x8, x9, [x20, #0x8]
000000000000474c	cmp	x8, x9
0000000000004750	b.lo	0x4764
0000000000004754	ldr	x8, [x20, #0x20]
0000000000004758	mov	x0, x20
000000000000475c	blraaz	x8
0000000000004760	ldr	x8, [x20, #0x8]
0000000000004764	add	x9, x8, #0x1
0000000000004768	str	x9, [x20, #0x8]
000000000000476c	strb	w23, [x8]
0000000000004770	ldrb	w23, [x24], #0x1
0000000000004774	cbnz	w23, 0x4748
0000000000004778	b	0x4a80
000000000000477c	cmp	w28, #0x1
0000000000004780	b.eq	0x49b4
0000000000004784	cbnz	w28, 0x49b4
0000000000004788	ldr	x8, [sp, #0x8]
000000000000478c	add	x9, x8, #0x8
0000000000004790	str	x9, [sp, #0x8]
0000000000004794	ldrsw	x2, [x8]
0000000000004798	b	0x49c4
000000000000479c	ldr	x8, [sp, #0x8]
00000000000047a0	add	x9, x8, #0x8
00000000000047a4	str	x9, [sp, #0x8]
00000000000047a8	ldr	x2, [x8]
00000000000047ac	mov	x0, x20
00000000000047b0	mov	x1, x19
00000000000047b4	mov	x3, x23
00000000000047b8	mov	x4, x24
00000000000047bc	mov	w5, #0x0
00000000000047c0	mov	w6, #0x1
00000000000047c4	bl	_hex
00000000000047c8	b	0x4a80
00000000000047cc	ldr	x8, [sp, #0x8]
00000000000047d0	add	x9, x8, #0x8
00000000000047d4	str	x9, [sp, #0x8]
00000000000047d8	ldr	x8, [x8]
00000000000047dc	cmp	x8, #0x0
00000000000047e0	adrp	x9, 3 ; 0x7000
00000000000047e4	add	x9, x9, #0x726 ; literal pool for: "(null)"
00000000000047e8	csel	x25, x9, x8, eq
00000000000047ec	mov	x0, x25
00000000000047f0	bl	__platform_strlen
00000000000047f4	sub	w28, w23, w0
00000000000047f8	cmp	w28, #0x1
00000000000047fc	b.lt	0x4918
0000000000004800	cmp	w24, #0x0
0000000000004804	mov	w8, #0x30
0000000000004808	mov	w9, #0x20
000000000000480c	csel	w23, w9, w8, eq
0000000000004810	cbz	x19, 0x4860
0000000000004814	mov	x0, x23
0000000000004818	blraaz	x19
000000000000481c	cbz	x0, 0x4860
0000000000004820	ldrb	w24, [x0]
0000000000004824	cbz	w24, 0x4888
0000000000004828	add	x26, x0, #0x1
000000000000482c	ldp	x8, x9, [x20, #0x8]
0000000000004830	cmp	x8, x9
0000000000004834	b.lo	0x4848
0000000000004838	ldr	x8, [x20, #0x20]
000000000000483c	mov	x0, x20
0000000000004840	blraaz	x8
0000000000004844	ldr	x8, [x20, #0x8]
0000000000004848	add	x9, x8, #0x1
000000000000484c	str	x9, [x20, #0x8]
0000000000004850	strb	w24, [x8]
0000000000004854	ldrb	w24, [x26], #0x1
0000000000004858	cbnz	w24, 0x482c
000000000000485c	b	0x4888
0000000000004860	ldp	x8, x9, [x20, #0x8]
0000000000004864	cmp	x8, x9
0000000000004868	b.lo	0x487c
000000000000486c	ldr	x8, [x20, #0x20]
0000000000004870	mov	x0, x20
0000000000004874	blraaz	x8
0000000000004878	ldr	x8, [x20, #0x8]
000000000000487c	add	x9, x8, #0x1
0000000000004880	str	x9, [x20, #0x8]
0000000000004884	strb	w23, [x8]
0000000000004888	sub	w8, w28, #0x1
000000000000488c	cmp	w28, #0x1
0000000000004890	mov	x28, x8
0000000000004894	b.gt	0x4810
0000000000004898	b	0x4918
000000000000489c	cbz	x19, 0x48ec
00000000000048a0	and	w0, w23, #0xff
00000000000048a4	blraaz	x19
00000000000048a8	cbz	x0, 0x48ec
00000000000048ac	ldrb	w23, [x0]
00000000000048b0	cbz	w23, 0x4914
00000000000048b4	add	x24, x0, #0x1
00000000000048b8	ldp	x8, x9, [x20, #0x8]
00000000000048bc	cmp	x8, x9
00000000000048c0	b.lo	0x48d4
00000000000048c4	ldr	x8, [x20, #0x20]
00000000000048c8	mov	x0, x20
00000000000048cc	blraaz	x8
00000000000048d0	ldr	x8, [x20, #0x8]
00000000000048d4	add	x9, x8, #0x1
00000000000048d8	str	x9, [x20, #0x8]
00000000000048dc	strb	w23, [x8]
00000000000048e0	ldrb	w23, [x24], #0x1
00000000000048e4	cbnz	w23, 0x48b8
00000000000048e8	b	0x4914
00000000000048ec	ldp	x8, x9, [x20, #0x8]
00000000000048f0	cmp	x8, x9
00000000000048f4	b.lo	0x4908
00000000000048f8	ldr	x8, [x20, #0x20]
00000000000048fc	mov	x0, x20
0000000000004900	blraaz	x8
0000000000004904	ldr	x8, [x20, #0x8]
0000000000004908	add	x9, x8, #0x1
000000000000490c	str	x9, [x20, #0x8]
0000000000004910	strb	w23, [x8]
0000000000004914	add	x25, x25, #0x1
0000000000004918	ldrb	w23, [x25]
000000000000491c	cbnz	w23, 0x489c
0000000000004920	b	0x4a80
0000000000004924	cmp	w28, #0x1
0000000000004928	b.eq	0x49dc
000000000000492c	cbnz	w28, 0x49dc
0000000000004930	ldr	x8, [sp, #0x8]
0000000000004934	add	x9, x8, #0x8
0000000000004938	str	x9, [sp, #0x8]
000000000000493c	ldr	w2, [x8]
0000000000004940	b	0x49ec
0000000000004944	cmp	w28, #0x1
0000000000004948	b.eq	0x4a04
000000000000494c	cbnz	w28, 0x4a04
0000000000004950	ldr	x8, [sp, #0x8]
0000000000004954	add	x9, x8, #0x8
0000000000004958	str	x9, [sp, #0x8]
000000000000495c	ldr	w2, [x8]
0000000000004960	b	0x4a14
0000000000004964	cbz	x19, 0x4a58
0000000000004968	mov	x0, x25
000000000000496c	blraaz	x19
0000000000004970	cbz	x0, 0x4a58
0000000000004974	ldrb	w23, [x0]
0000000000004978	cbz	w23, 0x4a80
000000000000497c	add	x24, x0, #0x1
0000000000004980	ldp	x8, x9, [x20, #0x8]
0000000000004984	cmp	x8, x9
0000000000004988	b.lo	0x499c
000000000000498c	ldr	x8, [x20, #0x20]
0000000000004990	mov	x0, x20
0000000000004994	blraaz	x8
0000000000004998	ldr	x8, [x20, #0x8]
000000000000499c	add	x9, x8, #0x1
00000000000049a0	str	x9, [x20, #0x8]
00000000000049a4	strb	w23, [x8]
00000000000049a8	ldrb	w23, [x24], #0x1
00000000000049ac	cbnz	w23, 0x4980
00000000000049b0	b	0x4a80
00000000000049b4	ldr	x8, [sp, #0x8]
00000000000049b8	add	x9, x8, #0x8
00000000000049bc	str	x9, [sp, #0x8]
00000000000049c0	ldr	x2, [x8]
00000000000049c4	mov	x0, x20
00000000000049c8	mov	x1, x19
00000000000049cc	mov	x3, x23
00000000000049d0	mov	x4, x24
00000000000049d4	bl	_oct
00000000000049d8	b	0x4a80
00000000000049dc	ldr	x8, [sp, #0x8]
00000000000049e0	add	x9, x8, #0x8
00000000000049e4	str	x9, [sp, #0x8]
00000000000049e8	ldr	x2, [x8]
00000000000049ec	mov	x0, x20
00000000000049f0	mov	x1, x19
00000000000049f4	mov	x3, x23
00000000000049f8	mov	x4, x24
00000000000049fc	bl	_udec
0000000000004a00	b	0x4a80
0000000000004a04	ldr	x8, [sp, #0x8]
0000000000004a08	add	x9, x8, #0x8
0000000000004a0c	str	x9, [sp, #0x8]
0000000000004a10	ldr	x2, [x8]
0000000000004a14	mov	x0, x20
0000000000004a18	mov	x1, x19
0000000000004a1c	mov	x3, x23
0000000000004a20	mov	x4, x24
0000000000004a24	bl	_ydec
0000000000004a28	b	0x4a80
0000000000004a2c	ldp	x8, x9, [x20, #0x8]
0000000000004a30	cmp	x8, x9
0000000000004a34	b.lo	0x4a48
0000000000004a38	ldr	x8, [x20, #0x20]
0000000000004a3c	mov	x0, x20
0000000000004a40	blraaz	x8
0000000000004a44	ldr	x8, [x20, #0x8]
0000000000004a48	add	x9, x8, #0x1
0000000000004a4c	str	x9, [x20, #0x8]
0000000000004a50	strb	w23, [x8]
0000000000004a54	b	0x4a80
0000000000004a58	ldp	x8, x9, [x20, #0x8]
0000000000004a5c	cmp	x8, x9
0000000000004a60	b.lo	0x4a74
0000000000004a64	ldr	x8, [x20, #0x20]
0000000000004a68	mov	x0, x20
0000000000004a6c	blraaz	x8
0000000000004a70	ldr	x8, [x20, #0x8]
0000000000004a74	add	x9, x8, #0x1
0000000000004a78	str	x9, [x20, #0x8]
0000000000004a7c	strb	w25, [x8]
0000000000004a80	add	x22, x22, #0x1
0000000000004a84	ldrb	w8, [x22]
0000000000004a88	cbnz	w8, 0x4318
0000000000004a8c	b	0x4b14
0000000000004a90	cbz	x19, 0x4ae0
0000000000004a94	and	w0, w21, #0xff
0000000000004a98	blraaz	x19
0000000000004a9c	cbz	x0, 0x4ae0
0000000000004aa0	ldrb	w21, [x0]
0000000000004aa4	cbz	w21, 0x4b08
0000000000004aa8	add	x23, x0, #0x1
0000000000004aac	ldp	x8, x9, [x20, #0x8]
0000000000004ab0	cmp	x8, x9
0000000000004ab4	b.lo	0x4ac8
0000000000004ab8	ldr	x8, [x20, #0x20]
0000000000004abc	mov	x0, x20
0000000000004ac0	blraaz	x8
0000000000004ac4	ldr	x8, [x20, #0x8]
0000000000004ac8	add	x9, x8, #0x1
0000000000004acc	str	x9, [x20, #0x8]
0000000000004ad0	strb	w21, [x8]
0000000000004ad4	ldrb	w21, [x23], #0x1
0000000000004ad8	cbnz	w21, 0x4aac
0000000000004adc	b	0x4b08
0000000000004ae0	ldp	x8, x9, [x20, #0x8]
0000000000004ae4	cmp	x8, x9
0000000000004ae8	b.lo	0x4afc
0000000000004aec	ldr	x8, [x20, #0x20]
0000000000004af0	mov	x0, x20
0000000000004af4	blraaz	x8
0000000000004af8	ldr	x8, [x20, #0x8]
0000000000004afc	add	x9, x8, #0x1
0000000000004b00	str	x9, [x20, #0x8]
0000000000004b04	strb	w21, [x8]
0000000000004b08	add	x22, x22, #0x1
0000000000004b0c	ldrb	w21, [x22]
0000000000004b10	cbnz	w21, 0x4a90
0000000000004b14	ldp	x29, x30, [sp, #0x60]
0000000000004b18	ldp	x20, x19, [sp, #0x50]
0000000000004b1c	ldp	x22, x21, [sp, #0x40]
0000000000004b20	ldp	x24, x23, [sp, #0x30]
0000000000004b24	ldp	x26, x25, [sp, #0x20]
0000000000004b28	ldp	x28, x27, [sp, #0x10]
0000000000004b2c	add	sp, sp, #0x70
0000000000004b30	retab
__simple_esappend:
0000000000004b34	pacibsp
0000000000004b38	stp	x24, x23, [sp, #-0x40]!
0000000000004b3c	stp	x22, x21, [sp, #0x10]
0000000000004b40	stp	x20, x19, [sp, #0x20]
0000000000004b44	stp	x29, x30, [sp, #0x30]
0000000000004b48	add	x29, sp, #0x30
0000000000004b4c	ldrb	w22, [x2]
0000000000004b50	cbz	w22, 0x4be0
0000000000004b54	mov	x19, x2
0000000000004b58	mov	x20, x1
0000000000004b5c	mov	x21, x0
0000000000004b60	cbz	x20, 0x4bb0
0000000000004b64	and	w0, w22, #0xff
0000000000004b68	blraaz	x20
0000000000004b6c	cbz	x0, 0x4bb0
0000000000004b70	ldrb	w22, [x0]
0000000000004b74	cbz	w22, 0x4bd8
0000000000004b78	add	x23, x0, #0x1
0000000000004b7c	ldp	x8, x9, [x21, #0x8]
0000000000004b80	cmp	x8, x9
0000000000004b84	b.lo	0x4b98
0000000000004b88	ldr	x8, [x21, #0x20]
0000000000004b8c	mov	x0, x21
0000000000004b90	blraaz	x8
0000000000004b94	ldr	x8, [x21, #0x8]
0000000000004b98	add	x9, x8, #0x1
0000000000004b9c	str	x9, [x21, #0x8]
0000000000004ba0	strb	w22, [x8]
0000000000004ba4	ldrb	w22, [x23], #0x1
0000000000004ba8	cbnz	w22, 0x4b7c
0000000000004bac	b	0x4bd8
0000000000004bb0	ldp	x8, x9, [x21, #0x8]
0000000000004bb4	cmp	x8, x9
0000000000004bb8	b.lo	0x4bcc
0000000000004bbc	ldr	x8, [x21, #0x20]
0000000000004bc0	mov	x0, x21
0000000000004bc4	blraaz	x8
0000000000004bc8	ldr	x8, [x21, #0x8]
0000000000004bcc	add	x9, x8, #0x1
0000000000004bd0	str	x9, [x21, #0x8]
0000000000004bd4	strb	w22, [x8]
0000000000004bd8	ldrb	w22, [x19, #0x1]!
0000000000004bdc	cbnz	w22, 0x4b60
0000000000004be0	mov	w0, #0x0
0000000000004be4	ldp	x29, x30, [sp, #0x30]
0000000000004be8	ldp	x20, x19, [sp, #0x20]
0000000000004bec	ldp	x22, x21, [sp, #0x10]
0000000000004bf0	ldp	x24, x23, [sp], #0x40
0000000000004bf4	retab
_OSAtomicAnd32Orig:
0000000000004bf8	mvn	w8, w0
0000000000004bfc	ldclr	w8, w0, [x1]
0000000000004c00	ret
_OSAtomicTestAndSet:
0000000000004c04	ands	x8, x1, #0x3
0000000000004c08	and	x9, x1, #0xfffffffffffffffc
0000000000004c0c	add	w8, w0, w8, lsl #3
0000000000004c10	csel	x9, x1, x9, eq
0000000000004c14	and	w10, w0, #0x7
0000000000004c18	mov	w11, #0x80
0000000000004c1c	lsr	w10, w11, w10
0000000000004c20	and	w11, w8, #0x18
0000000000004c24	lsl	w10, w10, w11
0000000000004c28	lsr	w8, w8, #3
0000000000004c2c	and	x8, x8, #0x1ffffffc
0000000000004c30	add	x8, x9, x8
0000000000004c34	ldset	w10, w8, [x8]
0000000000004c38	tst	w8, w10
0000000000004c3c	cset	w0, ne
0000000000004c40	ret
_OSAtomicTestAndClearBarrier:
0000000000004c44	ands	x8, x1, #0x3
0000000000004c48	and	x9, x1, #0xfffffffffffffffc
0000000000004c4c	add	w8, w0, w8, lsl #3
0000000000004c50	csel	x9, x1, x9, eq
0000000000004c54	and	w10, w0, #0x7
0000000000004c58	mov	w11, #0x80
0000000000004c5c	lsr	w10, w11, w10
0000000000004c60	and	w11, w8, #0x18
0000000000004c64	lsl	w10, w10, w11
0000000000004c68	lsr	w8, w8, #3
0000000000004c6c	and	x8, x8, #0x1ffffffc
0000000000004c70	add	x8, x9, x8
0000000000004c74	ldclral	w10, w8, [x8]
0000000000004c78	tst	w8, w10
0000000000004c7c	cset	w0, ne
0000000000004c80	ret
_OSAtomicAnd32Barrier:
0000000000004c84	mvn	w8, w0
0000000000004c88	ldclral	w8, w8, [x1]
0000000000004c8c	and	w0, w8, w0
0000000000004c90	ret
_os_log_simple_now:
0000000000004c94	b	0x7420 ; symbol stub for: _mach_continuous_time
_os_log_simple_type_from_asl:
0000000000004c98	bic	w8, w0, w0, asr #31
0000000000004c9c	mov	w9, #0x7
0000000000004ca0	cmp	w8, #0x7
0000000000004ca4	csel	w8, w8, w9, lo
0000000000004ca8	adrp	x9, 3 ; 0x7000
0000000000004cac	add	x9, x9, #0x618
0000000000004cb0	ldrb	w0, [x9, w8, uxtw]
0000000000004cb4	ret
___os_log_simple_offset:
0000000000004cb8	pacibsp
0000000000004cbc	sub	sp, sp, #0xf0
0000000000004cc0	stp	x24, x23, [sp, #0xb0]
0000000000004cc4	stp	x22, x21, [sp, #0xc0]
0000000000004cc8	stp	x20, x19, [sp, #0xd0]
0000000000004ccc	stp	x29, x30, [sp, #0xe0]
0000000000004cd0	add	x29, sp, #0xe0
0000000000004cd4	mov	x21, x4
0000000000004cd8	mov	x22, x3
0000000000004cdc	mov	x19, x2
0000000000004ce0	mov	x20, x1
0000000000004ce4	mov	x23, x0
0000000000004ce8	movi.2d	v0, #0000000000000000
0000000000004cec	stp	q0, q0, [sp]
0000000000004cf0	str	xzr, [sp, #0x70]
0000000000004cf4	stp	q0, q0, [sp, #0x50]
0000000000004cf8	stp	q0, q0, [sp, #0x30]
0000000000004cfc	str	q0, [sp, #0x20]
0000000000004d00	strb	w5, [sp]
0000000000004d04	stp	x6, x7, [sp, #0x8]
0000000000004d08	bl	0x7420 ; symbol stub for: _mach_continuous_time
0000000000004d0c	str	x0, [sp, #0x18]
0000000000004d10	bl	0x73e0 ; symbol stub for: _getpid
0000000000004d14	sxtw	x8, w0
0000000000004d18	str	x8, [sp, #0x20]
0000000000004d1c	sub	x3, x29, #0x68
0000000000004d20	mov	w1, #0x11
0000000000004d24	mov	x2, #0x0
0000000000004d28	mov	w4, #0x38
0000000000004d2c	bl	0x7460 ; symbol stub for: _proc_pidinfo
0000000000004d30	cmp	w0, #0x38
0000000000004d34	b.ne	0x4d58
0000000000004d38	ldur	x8, [x29, #-0x58]
0000000000004d3c	ldursw	x9, [x29, #-0x48]
0000000000004d40	stp	x8, x9, [sp, #0x28]
0000000000004d44	mov	x8, sp
0000000000004d48	add	x0, x8, #0x58
0000000000004d4c	sub	x1, x29, #0x68
0000000000004d50	mov	w2, #0x10
0000000000004d54	bl	__platform_memmove
0000000000004d58	mrs	x8, TPIDRRO_EL0
0000000000004d5c	ldur	x8, [x8, #-0x8]
0000000000004d60	str	x8, [sp, #0x38]
0000000000004d64	cbz	x23, 0x4d8c
0000000000004d68	ldr	w8, [x23, #0x18]
0000000000004d6c	cmp	w8, #0x0
0000000000004d70	csel	x8, x22, x23, lt
0000000000004d74	sub	x8, x21, x8
0000000000004d78	str	x8, [sp, #0x40]
0000000000004d7c	mov	x8, sp
0000000000004d80	add	x0, x8, #0x48
0000000000004d84	mov	x1, x20
0000000000004d88	b	0x4d98
0000000000004d8c	mov	x8, sp
0000000000004d90	add	x0, x8, #0x48
0000000000004d94	add	x1, x8, #0x58
0000000000004d98	mov	w2, #0x10
0000000000004d9c	bl	__platform_memmove
0000000000004da0	mov	x8, sp
0000000000004da4	add	x0, x8, #0x68
0000000000004da8	mov	x1, x19
0000000000004dac	mov	w2, #0x10
0000000000004db0	bl	__platform_memmove
0000000000004db4	mov	x0, sp
0000000000004db8	bl	__os_log_simple_send
0000000000004dbc	ldp	x29, x30, [sp, #0xe0]
0000000000004dc0	ldp	x20, x19, [sp, #0xd0]
0000000000004dc4	ldp	x22, x21, [sp, #0xc0]
0000000000004dc8	ldp	x24, x23, [sp, #0xb0]
0000000000004dcc	add	sp, sp, #0xf0
0000000000004dd0	retab
__os_log_simple_send:
0000000000004dd4	pacibsp
0000000000004dd8	stp	x28, x27, [sp, #-0x50]!
0000000000004ddc	stp	x24, x23, [sp, #0x10]
0000000000004de0	stp	x22, x21, [sp, #0x20]
0000000000004de4	stp	x20, x19, [sp, #0x30]
0000000000004de8	stp	x29, x30, [sp, #0x40]
0000000000004dec	add	x29, sp, #0x40
0000000000004df0	sub	sp, sp, #0x800
0000000000004df4	mov	x20, x0
0000000000004df8	bl	__simple_asl_get_fd
0000000000004dfc	tbnz	w0, #0x1f, 0x4e34
0000000000004e00	mov	x8, #0xfffff0000
0000000000004e04	movk	x8, #0xc105
0000000000004e08	ldrb	w8, [x8]
0000000000004e0c	tbnz	w8, #0x2, 0x4e3c
0000000000004e10	mov	x19, x0
0000000000004e14	ldr	x0, [x20, #0x10]
0000000000004e18	bl	__platform_strlen
0000000000004e1c	add	x22, x0, #0x1
0000000000004e20	ldr	x0, [x20, #0x8]
0000000000004e24	cbz	x0, 0x4e5c
0000000000004e28	bl	__platform_strlen
0000000000004e2c	add	x23, x0, #0x1
0000000000004e30	b	0x4e60
0000000000004e34	mov	w0, #0x9
0000000000004e38	b	0x4e40
0000000000004e3c	mov	w0, #0x0
0000000000004e40	add	sp, sp, #0x800
0000000000004e44	ldp	x29, x30, [sp, #0x40]
0000000000004e48	ldp	x20, x19, [sp, #0x30]
0000000000004e4c	ldp	x22, x21, [sp, #0x20]
0000000000004e50	ldp	x24, x23, [sp, #0x10]
0000000000004e54	ldp	x28, x27, [sp], #0x50
0000000000004e58	retab
0000000000004e5c	mov	x23, #0x0
0000000000004e60	adds	x8, x22, #0x68
0000000000004e64	cset	w9, hs
0000000000004e68	adds	x21, x23, x8
0000000000004e6c	cset	w8, hs
0000000000004e70	mov	w0, #0x54
0000000000004e74	tbnz	w9, #0x0, 0x4e40
0000000000004e78	tbnz	w8, #0x0, 0x4e40
0000000000004e7c	cmp	x21, #0x800
0000000000004e80	b.ls	0x4e8c
0000000000004e84	mov	w0, #0x7
0000000000004e88	b	0x4e40
0000000000004e8c	strh	w22, [sp]
0000000000004e90	strh	w23, [sp, #0x2]
0000000000004e94	ldrb	w8, [x20]
0000000000004e98	strb	w8, [sp, #0x4]
0000000000004e9c	ldur	q0, [x20, #0x18]
0000000000004ea0	stur	q0, [sp, #0x8]
0000000000004ea4	ldur	q0, [x20, #0x28]
0000000000004ea8	stur	q0, [sp, #0x18]
0000000000004eac	ldur	q0, [x20, #0x38]
0000000000004eb0	stur	q0, [sp, #0x28]
0000000000004eb4	mov	x24, sp
0000000000004eb8	add	x0, x24, #0x38
0000000000004ebc	add	x1, x20, #0x48
0000000000004ec0	mov	w2, #0x10
0000000000004ec4	bl	__platform_memmove
0000000000004ec8	add	x0, x24, #0x48
0000000000004ecc	add	x1, x20, #0x58
0000000000004ed0	mov	w2, #0x10
0000000000004ed4	bl	__platform_memmove
0000000000004ed8	add	x0, x24, #0x58
0000000000004edc	add	x1, x20, #0x68
0000000000004ee0	mov	w2, #0x10
0000000000004ee4	bl	__platform_memmove
0000000000004ee8	add	x24, x24, #0x68
0000000000004eec	ldr	x1, [x20, #0x10]
0000000000004ef0	mov	x0, x24
0000000000004ef4	mov	x2, x22
0000000000004ef8	bl	__platform_strlcpy
0000000000004efc	cbz	x23, 0x4f10
0000000000004f00	add	x0, x24, x22
0000000000004f04	ldr	x1, [x20, #0x8]
0000000000004f08	mov	x2, x23
0000000000004f0c	bl	__platform_strlcpy
0000000000004f10	mov	x1, sp
0000000000004f14	mov	x0, x19
0000000000004f18	mov	x2, x21
0000000000004f1c	mov	w3, #0x0
0000000000004f20	mov	x4, #0x0
0000000000004f24	mov	w5, #0x0
0000000000004f28	bl	0x7320 ; symbol stub for: ___sendto
0000000000004f2c	tbnz	x0, #0x3f, 0x4f40
0000000000004f30	cmp	x0, x21
0000000000004f34	mov	w8, #0x28
0000000000004f38	csel	w0, w8, wzr, lo
0000000000004f3c	b	0x4e40
0000000000004f40	bl	0x72f0 ; symbol stub for: ___error
0000000000004f44	ldr	w0, [x0]
0000000000004f48	b	0x4e40
__os_log_simple:
0000000000004f4c	pacibsp
0000000000004f50	sub	sp, sp, #0x70
0000000000004f54	stp	x28, x27, [sp, #0x10]
0000000000004f58	stp	x26, x25, [sp, #0x20]
0000000000004f5c	stp	x24, x23, [sp, #0x30]
0000000000004f60	stp	x22, x21, [sp, #0x40]
0000000000004f64	stp	x20, x19, [sp, #0x50]
0000000000004f68	stp	x29, x30, [sp, #0x60]
0000000000004f6c	add	x29, sp, #0x60
0000000000004f70	mov	x26, x30
0000000000004f74	mov	x27, x6
0000000000004f78	mov	x19, x5
0000000000004f7c	mov	x20, x4
0000000000004f80	mov	x22, x3
0000000000004f84	mov	x23, x2
0000000000004f88	mov	x24, x1
0000000000004f8c	mov	x25, x0
0000000000004f90	bl	__simple_salloc
0000000000004f94	cbz	x0, 0x4fec
0000000000004f98	mov	x21, x0
0000000000004f9c	add	x8, x29, #0x10
0000000000004fa0	str	x8, [sp, #0x8]
0000000000004fa4	add	x3, x29, #0x10
0000000000004fa8	mov	x1, #0x0
0000000000004fac	mov	x2, x27
0000000000004fb0	bl	__simple_vesprintf
0000000000004fb4	xpaci	x26
0000000000004fb8	mov	x0, x21
0000000000004fbc	bl	__simple_string
0000000000004fc0	mov	x7, x0
0000000000004fc4	mov	x0, x25
0000000000004fc8	mov	x1, x24
0000000000004fcc	mov	x2, x23
0000000000004fd0	mov	x3, x22
0000000000004fd4	mov	x4, x26
0000000000004fd8	mov	x5, x20
0000000000004fdc	mov	x6, x19
0000000000004fe0	bl	___os_log_simple_offset
0000000000004fe4	mov	x0, x21
0000000000004fe8	bl	__simple_sfree
0000000000004fec	ldp	x29, x30, [sp, #0x60]
0000000000004ff0	ldp	x20, x19, [sp, #0x50]
0000000000004ff4	ldp	x22, x21, [sp, #0x40]
0000000000004ff8	ldp	x24, x23, [sp, #0x30]
0000000000004ffc	ldp	x26, x25, [sp, #0x20]
0000000000005000	ldp	x28, x27, [sp, #0x10]
0000000000005004	add	sp, sp, #0x70
0000000000005008	retab
__os_log_simple_shim:
000000000000500c	mov	x7, x2
0000000000005010	mov	x6, x1
0000000000005014	mov	x5, x0
0000000000005018	adrp	x1, 2 ; 0x7000
000000000000501c	add	x1, x1, #0x620
0000000000005020	mov	x0, #0x0
0000000000005024	mov	x2, x1
0000000000005028	mov	x3, #0x0
000000000000502c	mov	x4, #0x0
0000000000005030	b	___os_log_simple_offset
__os_log_simple_parse_type:
0000000000005034	ldrb	w9, [x1, #0x4]
0000000000005038	cmp	w9, #0x10
000000000000503c	mov	w10, #0x1
0000000000005040	lsl	w10, w10, w9
0000000000005044	and	w10, w10, #0x1ffff
0000000000005048	and	w10, w10, #0xffff0007
000000000000504c	ccmp	w10, #0x0, #0x4, ls
0000000000005050	b.eq	0x5064
0000000000005054	mov	x8, x0
0000000000005058	mov	w0, #0x0
000000000000505c	strb	w9, [x8]
0000000000005060	ret
0000000000005064	mov	w0, #0x16
0000000000005068	ret
__os_log_simple_parse_subsystem:
000000000000506c	ldrh	w8, [x1, #0x2]
0000000000005070	cbz	x8, 0x5094
0000000000005074	ldrh	w9, [x1]
0000000000005078	add	x9, x1, x9
000000000000507c	add	x9, x9, #0x68
0000000000005080	sub	w8, w8, #0x1
0000000000005084	ldrb	w8, [x9, w8, uxtw]
0000000000005088	cbz	w8, 0x5098
000000000000508c	mov	w8, #0x16
0000000000005090	b	0x50a0
0000000000005094	mov	x9, #0x0
0000000000005098	mov	w8, #0x0
000000000000509c	str	x9, [x0, #0x8]
00000000000050a0	mov	x0, x8
00000000000050a4	ret
__os_log_simple_parse_message:
00000000000050a8	ldrh	w10, [x1]
00000000000050ac	cbz	x10, 0x50c0
00000000000050b0	add	x9, x1, #0x68
00000000000050b4	sub	w10, w10, #0x1
00000000000050b8	ldrb	w10, [x9, w10, uxtw]
00000000000050bc	cbz	w10, 0x50c8
00000000000050c0	mov	w0, #0x16
00000000000050c4	ret
00000000000050c8	mov	x8, x0
00000000000050cc	mov	w0, #0x0
00000000000050d0	str	x9, [x8, #0x10]
00000000000050d4	ret
__os_log_simple_parse_timestamp:
00000000000050d8	pacibsp
00000000000050dc	stp	x20, x19, [sp, #-0x20]!
00000000000050e0	stp	x29, x30, [sp, #0x10]
00000000000050e4	add	x29, sp, #0x10
00000000000050e8	ldr	x20, [x1, #0x8]
00000000000050ec	str	x20, [x0, #0x18]
00000000000050f0	mov	w19, #0x16
00000000000050f4	cbz	x20, 0x5104
00000000000050f8	bl	0x7420 ; symbol stub for: _mach_continuous_time
00000000000050fc	cmp	x20, x0
0000000000005100	csel	w19, w19, wzr, hi
0000000000005104	mov	x0, x19
0000000000005108	ldp	x29, x30, [sp, #0x10]
000000000000510c	ldp	x20, x19, [sp], #0x20
0000000000005110	retab
__os_log_simple_parse_identifiers:
0000000000005114	ldr	x8, [x1, #0x10]
0000000000005118	str	x8, [x0, #0x20]
000000000000511c	ldr	x9, [x1, #0x18]
0000000000005120	str	x9, [x0, #0x28]
0000000000005124	ldr	x9, [x1, #0x20]
0000000000005128	str	x9, [x0, #0x30]
000000000000512c	ldr	x9, [x1, #0x28]
0000000000005130	str	x9, [x0, #0x38]
0000000000005134	cmp	x8, #0x0
0000000000005138	mov	w8, #0x16
000000000000513c	csel	w0, w8, wzr, eq
0000000000005140	ret
__os_log_simple_parse:
0000000000005144	cmp	x1, #0x68
0000000000005148	b.hs	0x5154
000000000000514c	mov	w0, #0x5e
0000000000005150	ret
0000000000005154	pacibsp
0000000000005158	stp	x22, x21, [sp, #-0x30]!
000000000000515c	stp	x20, x19, [sp, #0x10]
0000000000005160	stp	x29, x30, [sp, #0x20]
0000000000005164	add	x29, sp, #0x20
0000000000005168	mov	x20, x0
000000000000516c	ldrh	w8, [x0]
0000000000005170	ldrh	w9, [x0, #0x2]
0000000000005174	add	x10, x8, x9
0000000000005178	add	x10, x10, #0x68
000000000000517c	cmp	x10, x1
0000000000005180	b.ls	0x518c
0000000000005184	mov	w0, #0x7
0000000000005188	b	0x51f0
000000000000518c	ldrb	w10, [x20, #0x4]
0000000000005190	cmp	w10, #0x10
0000000000005194	mov	w11, #0x1
0000000000005198	lsl	w11, w11, w10
000000000000519c	and	w11, w11, #0x1ffff
00000000000051a0	and	w11, w11, #0xffff0007
00000000000051a4	ccmp	w11, #0x0, #0x4, ls
00000000000051a8	b.eq	0x51ec
00000000000051ac	mov	x19, x2
00000000000051b0	strb	w10, [x2]
00000000000051b4	cbz	w9, 0x51d0
00000000000051b8	add	x10, x20, x8
00000000000051bc	add	x10, x10, #0x68
00000000000051c0	sub	w9, w9, #0x1
00000000000051c4	ldrb	w9, [x10, w9, uxtw]
00000000000051c8	cbnz	w9, 0x51ec
00000000000051cc	b	0x51d4
00000000000051d0	mov	x10, #0x0
00000000000051d4	str	x10, [x19, #0x8]
00000000000051d8	cbz	w8, 0x51ec
00000000000051dc	add	x9, x20, #0x68
00000000000051e0	sub	w8, w8, #0x1
00000000000051e4	ldrb	w8, [x9, w8, uxtw]
00000000000051e8	cbz	w8, 0x5204
00000000000051ec	mov	w0, #0x16
00000000000051f0	ldp	x29, x30, [sp, #0x20]
00000000000051f4	ldp	x20, x19, [sp, #0x10]
00000000000051f8	ldp	x22, x21, [sp], #0x30
00000000000051fc	autibsp
0000000000005200	ret
0000000000005204	ldr	x21, [x20, #0x8]
0000000000005208	stp	x9, x21, [x19, #0x10]
000000000000520c	cbz	x21, 0x51ec
0000000000005210	bl	0x7420 ; symbol stub for: _mach_continuous_time
0000000000005214	cmp	x21, x0
0000000000005218	b.hi	0x51ec
000000000000521c	ldr	x8, [x20, #0x10]
0000000000005220	str	x8, [x19, #0x20]
0000000000005224	ldr	x9, [x20, #0x18]
0000000000005228	str	x9, [x19, #0x28]
000000000000522c	ldr	x9, [x20, #0x20]
0000000000005230	str	x9, [x19, #0x30]
0000000000005234	ldr	x9, [x20, #0x28]
0000000000005238	str	x9, [x19, #0x38]
000000000000523c	cbz	x8, 0x51ec
0000000000005240	ldr	x8, [x20, #0x30]
0000000000005244	str	x8, [x19, #0x40]
0000000000005248	add	x0, x19, #0x48
000000000000524c	add	x1, x20, #0x38
0000000000005250	mov	w2, #0x10
0000000000005254	bl	__platform_memmove
0000000000005258	add	x0, x19, #0x58
000000000000525c	add	x1, x20, #0x48
0000000000005260	mov	w2, #0x10
0000000000005264	bl	__platform_memmove
0000000000005268	add	x0, x19, #0x68
000000000000526c	add	x1, x20, #0x58
0000000000005270	mov	w2, #0x10
0000000000005274	bl	__platform_memmove
0000000000005278	mov	w0, #0x0
000000000000527c	b	0x51f0
__os_log_simple_reinit_4launchd:
0000000000005280	pacibsp
0000000000005284	stp	x20, x19, [sp, #-0x20]!
0000000000005288	stp	x29, x30, [sp, #0x10]
000000000000528c	add	x29, sp, #0x10
0000000000005290	adrp	x8, 3 ; 0x8000
0000000000005294	ldr	x8, [x8] ; literal pool symbol address: __os_alloc_once_table
0000000000005298	ldr	x9, [x8, #0x150]
000000000000529c	cmn	x9, #0x1
00000000000052a0	b.ne	0x52d0
00000000000052a4	ldr	x19, [x8, #0x158]
00000000000052a8	ldrb	w8, [x19]
00000000000052ac	cbz	w8, 0x52c4
00000000000052b0	ldr	w0, [x19, #0x10]
00000000000052b4	cmn	w0, #0x1
00000000000052b8	b.ne	0x52f4
00000000000052bc	bl	__simple_asl_connect
00000000000052c0	str	w0, [x19, #0x10]
00000000000052c4	ldp	x29, x30, [sp, #0x10]
00000000000052c8	ldp	x20, x19, [sp], #0x20
00000000000052cc	retab
00000000000052d0	add	x0, x8, #0x150
00000000000052d4	adrp	x16, -2 ; 0x3000
00000000000052d8	add	x16, x16, #0xa14
00000000000052dc	paciza	x16
00000000000052e0	mov	x2, x16
00000000000052e4	mov	w1, #0x20
00000000000052e8	bl	__os_alloc_once
00000000000052ec	mov	x19, x0
00000000000052f0	b	0x52a8
00000000000052f4	bl	__os_log_simple_reinit_4launchd.cold.1
__simple_asl_connect:
00000000000052f8	pacibsp
00000000000052fc	sub	sp, sp, #0xa0
0000000000005300	stp	x20, x19, [sp, #0x80]
0000000000005304	stp	x29, x30, [sp, #0x90]
0000000000005308	add	x29, sp, #0x90
000000000000530c	mov	w20, #0x1
0000000000005310	mov	w0, #0x1
0000000000005314	mov	w1, #0x2
0000000000005318	mov	w2, #0x0
000000000000531c	bl	0x74c0 ; symbol stub for: _socket
0000000000005320	mov	x19, x0
0000000000005324	cmn	w0, #0x1
0000000000005328	b.eq	0x5394
000000000000532c	str	x20, [sp]
0000000000005330	mov	x0, x19
0000000000005334	mov	w1, #0x2
0000000000005338	bl	0x73c0 ; symbol stub for: _fcntl
000000000000533c	strb	w20, [sp, #0x17]
0000000000005340	adrp	x20, 2 ; 0x7000
0000000000005344	add	x20, x20, #0x69f ; literal pool for: "/var/run/syslog"
0000000000005348	mov	x0, x20
000000000000534c	bl	__platform_strlen
0000000000005350	add	x8, x0, #0x1
0000000000005354	cmp	x8, #0x68
0000000000005358	mov	w8, #0x68
000000000000535c	csinc	x2, x8, x0, hs
0000000000005360	add	x8, sp, #0x16
0000000000005364	add	x0, x8, #0x2
0000000000005368	mov	x1, x20
000000000000536c	bl	__platform_memmove
0000000000005370	add	x1, sp, #0x16
0000000000005374	mov	x0, x19
0000000000005378	mov	w2, #0x6a
000000000000537c	bl	0x73b0 ; symbol stub for: _connect
0000000000005380	cmn	w0, #0x1
0000000000005384	b.ne	0x5394
0000000000005388	mov	x0, x19
000000000000538c	bl	0x73a0 ; symbol stub for: _close
0000000000005390	mov	w19, #-0x1
0000000000005394	mov	x0, x19
0000000000005398	ldp	x29, x30, [sp, #0x90]
000000000000539c	ldp	x20, x19, [sp, #0x80]
00000000000053a0	add	sp, sp, #0xa0
00000000000053a4	retab
__simple_asl_get_fd:
00000000000053a8	pacibsp
00000000000053ac	stp	x20, x19, [sp, #-0x20]!
00000000000053b0	stp	x29, x30, [sp, #0x10]
00000000000053b4	add	x29, sp, #0x10
00000000000053b8	adrp	x8, 3 ; 0x8000
00000000000053bc	ldr	x8, [x8] ; literal pool symbol address: __os_alloc_once_table
00000000000053c0	ldr	x9, [x8, #0x150]
00000000000053c4	cmn	x9, #0x1
00000000000053c8	b.ne	0x5400
00000000000053cc	ldr	x19, [x8, #0x158]
00000000000053d0	ldrb	w8, [x19]
00000000000053d4	cbz	w8, 0x53f0
00000000000053d8	mov	x0, x19
00000000000053dc	ldr	x8, [x0, #0x18]!
00000000000053e0	cmn	x8, #0x1
00000000000053e4	b.ne	0x5424
00000000000053e8	ldr	w0, [x19, #0x10]
00000000000053ec	b	0x53f4
00000000000053f0	mov	w0, #-0x1
00000000000053f4	ldp	x29, x30, [sp, #0x10]
00000000000053f8	ldp	x20, x19, [sp], #0x20
00000000000053fc	retab
0000000000005400	add	x0, x8, #0x150
0000000000005404	adrp	x16, -2 ; 0x3000
0000000000005408	add	x16, x16, #0xa14
000000000000540c	paciza	x16
0000000000005410	mov	x2, x16
0000000000005414	mov	w1, #0x20
0000000000005418	bl	__os_alloc_once
000000000000541c	mov	x19, x0
0000000000005420	b	0x53d0
0000000000005424	adrp	x16, -3 ; 0x2000
0000000000005428	add	x16, x16, #0xd88
000000000000542c	paciza	x16
0000000000005430	mov	x2, x16
0000000000005434	mov	x1, #0x0
0000000000005438	bl	__os_once
000000000000543c	b	0x53e8
__simple_vdprintf:
0000000000005440	pacibsp
0000000000005444	sub	sp, sp, #0x60
0000000000005448	stp	x29, x30, [sp, #0x50]
000000000000544c	add	x29, sp, #0x50
0000000000005450	mov	x3, x2
0000000000005454	mov	x2, x1
0000000000005458	add	x8, sp, #0x8
000000000000545c	str	w0, [sp, #0x40]
0000000000005460	stp	x8, x8, [sp, #0x28]
0000000000005464	add	x8, x8, #0x20
0000000000005468	str	x8, [sp, #0x38]
000000000000546c	adrp	x16, 0 ; 0x5000
0000000000005470	add	x16, x16, #0x49c
0000000000005474	paciza	x16
0000000000005478	str	x16, [sp, #0x48]
000000000000547c	add	x0, sp, #0x28
0000000000005480	mov	x1, #0x0
0000000000005484	bl	___simple_bprintf
0000000000005488	add	x0, sp, #0x28
000000000000548c	bl	__flush
0000000000005490	ldp	x29, x30, [sp, #0x50]
0000000000005494	add	sp, sp, #0x60
0000000000005498	retab
__flush_reset:
000000000000549c	pacibsp
00000000000054a0	stp	x20, x19, [sp, #-0x20]!
00000000000054a4	stp	x29, x30, [sp, #0x10]
00000000000054a8	add	x29, sp, #0x10
00000000000054ac	mov	x19, x0
00000000000054b0	bl	__flush
00000000000054b4	ldr	x8, [x19]
00000000000054b8	str	x8, [x19, #0x8]
00000000000054bc	ldp	x29, x30, [sp, #0x10]
00000000000054c0	ldp	x20, x19, [sp], #0x20
00000000000054c4	retab
00000000000054c8	udf	#0x208
00000000000054cc	udf	#0x164
00000000000054d0	udf	#0x4f0
00000000000054d4	udf	#0x4f0
00000000000054d8	udf	#0x4f0
00000000000054dc	udf	#0x4f0
00000000000054e0	udf	#0x164
00000000000054e4	udf	#0x4f0
00000000000054e8	udf	#0x4f0
00000000000054ec	udf	#0xc
00000000000054f0	udf	#0x4f0
00000000000054f4	udf	#0x4f0
00000000000054f8	udf	#0x308
00000000000054fc	udf	#0x328
0000000000005500	udf	#0x4f0
0000000000005504	udf	#0x4f0
0000000000005508	udf	#0x358
000000000000550c	udf	#0x4f0
0000000000005510	udf	#0x4b0
0000000000005514	udf	#0x4f0
0000000000005518	udf	#0x4f0
000000000000551c	udf	#0x18c
0000000000005520	udf	#0x4d0
__flush:
0000000000005524	pacibsp
0000000000005528	stp	x22, x21, [sp, #-0x30]!
000000000000552c	stp	x20, x19, [sp, #0x10]
0000000000005530	stp	x29, x30, [sp, #0x20]
0000000000005534	add	x29, sp, #0x20
0000000000005538	ldp	x20, x8, [x0]
000000000000553c	sub	x21, x8, x20
0000000000005540	cmp	x21, #0x1
0000000000005544	b.lt	0x5590
0000000000005548	mov	x19, x0
000000000000554c	ldr	w0, [x19, #0x18]
0000000000005550	mov	x1, x20
0000000000005554	mov	x2, x21
0000000000005558	bl	0x7500 ; symbol stub for: _write
000000000000555c	tbz	x0, #0x3f, 0x5584
0000000000005560	bl	0x72f0 ; symbol stub for: ___error
0000000000005564	ldr	w8, [x0]
0000000000005568	cmp	w8, #0x4
000000000000556c	b.eq	0x554c
0000000000005570	bl	0x72f0 ; symbol stub for: ___error
0000000000005574	ldr	w8, [x0]
0000000000005578	cmp	w8, #0x23
000000000000557c	b.eq	0x554c
0000000000005580	b	0x5590
0000000000005584	subs	x21, x21, x0
0000000000005588	add	x20, x20, x21
000000000000558c	b.gt	0x554c
0000000000005590	ldp	x29, x30, [sp, #0x20]
0000000000005594	ldp	x20, x19, [sp, #0x10]
0000000000005598	ldp	x22, x21, [sp], #0x30
000000000000559c	retab
__simple_dprintf:
00000000000055a0	pacibsp
00000000000055a4	sub	sp, sp, #0x20
00000000000055a8	stp	x29, x30, [sp, #0x10]
00000000000055ac	add	x29, sp, #0x10
00000000000055b0	add	x8, x29, #0x10
00000000000055b4	str	x8, [sp, #0x8]
00000000000055b8	add	x2, x29, #0x10
00000000000055bc	bl	__simple_vdprintf
00000000000055c0	ldp	x29, x30, [sp, #0x10]
00000000000055c4	add	sp, sp, #0x20
00000000000055c8	retab
__enlarge:
00000000000055cc	pacibsp
00000000000055d0	sub	sp, sp, #0x60
00000000000055d4	stp	x26, x25, [sp, #0x10]
00000000000055d8	stp	x24, x23, [sp, #0x20]
00000000000055dc	stp	x22, x21, [sp, #0x30]
00000000000055e0	stp	x20, x19, [sp, #0x40]
00000000000055e4	stp	x29, x30, [sp, #0x50]
00000000000055e8	add	x29, sp, #0x50
00000000000055ec	mov	x19, x0
00000000000055f0	mov	x22, x0
00000000000055f4	ldr	x8, [x22, #0x10]!
00000000000055f8	add	x8, x8, #0x1
00000000000055fc	str	x8, [sp, #0x8]
0000000000005600	adrp	x23, 3 ; 0x8000
0000000000005604	ldr	x23, [x23, #0x10] ; literal pool symbol address: _mach_task_self_
0000000000005608	ldr	w0, [x23]
000000000000560c	adrp	x25, 3 ; 0x8000
0000000000005610	ldr	x25, [x25, #0x18] ; literal pool symbol address: _vm_page_size
0000000000005614	ldr	x2, [x25]
0000000000005618	add	x1, sp, #0x8
000000000000561c	mov	w3, #0x0
0000000000005620	bl	0x74e0 ; symbol stub for: _vm_allocate
0000000000005624	cbz	w0, 0x56ac
0000000000005628	ldr	x8, [x19, #0x10]
000000000000562c	ldr	x9, [x19]
0000000000005630	sub	x8, x8, x9
0000000000005634	add	x20, x8, #0x1
0000000000005638	ldr	x8, [x25]
000000000000563c	add	x9, x20, x8
0000000000005640	neg	x8, x8
0000000000005644	and	x21, x9, x8
0000000000005648	ldr	w0, [x23]
000000000000564c	add	x1, sp, #0x8
0000000000005650	mov	x2, x21
0000000000005654	mov	w3, #0x1
0000000000005658	bl	0x74e0 ; symbol stub for: _vm_allocate
000000000000565c	cbnz	w0, 0x5708
0000000000005660	ldr	x0, [sp, #0x8]
0000000000005664	ldr	x1, [x19]
0000000000005668	sub	x24, x0, x1
000000000000566c	mov	x2, x20
0000000000005670	bl	__platform_memmove
0000000000005674	ldr	x1, [x19]
0000000000005678	ldr	x8, [x25]
000000000000567c	sub	x9, x8, #0x1
0000000000005680	tst	x9, x1
0000000000005684	b.eq	0x56b4
0000000000005688	neg	x9, x8
000000000000568c	and	x20, x20, x9
0000000000005690	add	x8, x1, x8
0000000000005694	and	x1, x8, x9
0000000000005698	str	x1, [x19]
000000000000569c	ldr	x8, [sp, #0x8]
00000000000056a0	add	x8, x21, x8
00000000000056a4	sub	x8, x8, #0x1
00000000000056a8	b	0x56c0
00000000000056ac	ldr	x24, [x25]
00000000000056b0	b	0x56e0
00000000000056b4	ldr	x9, [x22]
00000000000056b8	add	x8, x8, x24
00000000000056bc	add	x8, x9, x8
00000000000056c0	str	x8, [x22]
00000000000056c4	cbz	x20, 0x56d4
00000000000056c8	ldr	w0, [x23]
00000000000056cc	mov	x2, x20
00000000000056d0	bl	0x74f0 ; symbol stub for: _vm_deallocate
00000000000056d4	ldr	x8, [sp, #0x8]
00000000000056d8	str	x8, [x19], #0x8
00000000000056dc	mov	x22, x19
00000000000056e0	ldr	x8, [x22]
00000000000056e4	add	x8, x8, x24
00000000000056e8	str	x8, [x22]
00000000000056ec	ldp	x29, x30, [sp, #0x50]
00000000000056f0	ldp	x20, x19, [sp, #0x40]
00000000000056f4	ldp	x22, x21, [sp, #0x30]
00000000000056f8	ldp	x24, x23, [sp, #0x20]
00000000000056fc	ldp	x26, x25, [sp, #0x10]
0000000000005700	add	sp, sp, #0x60
0000000000005704	retab
0000000000005708	bl	__enlarge.cold.1
__simple_put:
000000000000570c	str	w1, [x0, #0x18]
0000000000005710	b	__flush
__simple_putline:
0000000000005714	pacibsp
0000000000005718	stp	x20, x19, [sp, #-0x20]!
000000000000571c	stp	x29, x30, [sp, #0x10]
0000000000005720	add	x29, sp, #0x10
0000000000005724	mov	x19, x0
0000000000005728	str	w1, [x0, #0x18]
000000000000572c	ldr	x8, [x0, #0x8]
0000000000005730	add	x9, x8, #0x1
0000000000005734	str	x9, [x0, #0x8]
0000000000005738	mov	w9, #0xa
000000000000573c	strb	w9, [x8]
0000000000005740	bl	__flush
0000000000005744	ldr	x8, [x19, #0x8]
0000000000005748	sub	x8, x8, #0x1
000000000000574c	str	x8, [x19, #0x8]
0000000000005750	ldp	x29, x30, [sp, #0x10]
0000000000005754	ldp	x20, x19, [sp], #0x20
0000000000005758	retab
_oct:
000000000000575c	pacibsp
0000000000005760	sub	sp, sp, #0x70
0000000000005764	stp	x26, x25, [sp, #0x20]
0000000000005768	stp	x24, x23, [sp, #0x30]
000000000000576c	stp	x22, x21, [sp, #0x40]
0000000000005770	stp	x20, x19, [sp, #0x50]
0000000000005774	stp	x29, x30, [sp, #0x60]
0000000000005778	add	x29, sp, #0x60
000000000000577c	mov	x22, x4
0000000000005780	mov	x19, x1
0000000000005784	mov	x20, x0
0000000000005788	strb	wzr, [sp, #0x1f]
000000000000578c	mov	x8, sp
0000000000005790	cbz	x2, 0x57b8
0000000000005794	add	x21, x8, #0x1f
0000000000005798	mov	w8, #0x30
000000000000579c	bfxil	w8, w2, #0, #3
00000000000057a0	strb	w8, [x21, #-0x1]!
00000000000057a4	lsr	x8, x2, #3
00000000000057a8	cmp	x2, #0x8
00000000000057ac	mov	x2, x8
00000000000057b0	b.hs	0x5798
00000000000057b4	b	0x57c4
00000000000057b8	add	x21, x8, #0x1e
00000000000057bc	mov	w8, #0x30
00000000000057c0	strb	w8, [sp, #0x1e]
00000000000057c4	sxtw	x23, w3
00000000000057c8	mov	x0, x21
00000000000057cc	bl	__platform_strlen
00000000000057d0	sub	x23, x23, x0
00000000000057d4	cmp	x23, #0x1
00000000000057d8	b.lt	0x58f4
00000000000057dc	mov	w8, #0x30
00000000000057e0	mov	w9, #0x20
00000000000057e4	cmp	w22, #0x0
00000000000057e8	csel	w22, w9, w8, eq
00000000000057ec	cbz	x19, 0x583c
00000000000057f0	mov	x0, x22
00000000000057f4	blraaz	x19
00000000000057f8	cbz	x0, 0x583c
00000000000057fc	ldrb	w24, [x0]
0000000000005800	cbz	w24, 0x5864
0000000000005804	add	x25, x0, #0x1
0000000000005808	ldp	x8, x9, [x20, #0x8]
000000000000580c	cmp	x8, x9
0000000000005810	b.lo	0x5824
0000000000005814	ldr	x8, [x20, #0x20]
0000000000005818	mov	x0, x20
000000000000581c	blraaz	x8
0000000000005820	ldr	x8, [x20, #0x8]
0000000000005824	add	x9, x8, #0x1
0000000000005828	str	x9, [x20, #0x8]
000000000000582c	strb	w24, [x8]
0000000000005830	ldrb	w24, [x25], #0x1
0000000000005834	cbnz	w24, 0x5808
0000000000005838	b	0x5864
000000000000583c	ldp	x8, x9, [x20, #0x8]
0000000000005840	cmp	x8, x9
0000000000005844	b.lo	0x5858
0000000000005848	ldr	x8, [x20, #0x20]
000000000000584c	mov	x0, x20
0000000000005850	blraaz	x8
0000000000005854	ldr	x8, [x20, #0x8]
0000000000005858	add	x9, x8, #0x1
000000000000585c	str	x9, [x20, #0x8]
0000000000005860	strb	w22, [x8]
0000000000005864	sub	x8, x23, #0x1
0000000000005868	cmp	x23, #0x1
000000000000586c	mov	x23, x8
0000000000005870	b.gt	0x57ec
0000000000005874	b	0x58f4
0000000000005878	cbz	x19, 0x58c8
000000000000587c	and	w0, w22, #0xff
0000000000005880	blraaz	x19
0000000000005884	cbz	x0, 0x58c8
0000000000005888	ldrb	w22, [x0]
000000000000588c	cbz	w22, 0x58f0
0000000000005890	add	x23, x0, #0x1
0000000000005894	ldp	x8, x9, [x20, #0x8]
0000000000005898	cmp	x8, x9
000000000000589c	b.lo	0x58b0
00000000000058a0	ldr	x8, [x20, #0x20]
00000000000058a4	mov	x0, x20
00000000000058a8	blraaz	x8
00000000000058ac	ldr	x8, [x20, #0x8]
00000000000058b0	add	x9, x8, #0x1
00000000000058b4	str	x9, [x20, #0x8]
00000000000058b8	strb	w22, [x8]
00000000000058bc	ldrb	w22, [x23], #0x1
00000000000058c0	cbnz	w22, 0x5894
00000000000058c4	b	0x58f0
00000000000058c8	ldp	x8, x9, [x20, #0x8]
00000000000058cc	cmp	x8, x9
00000000000058d0	b.lo	0x58e4
00000000000058d4	ldr	x8, [x20, #0x20]
00000000000058d8	mov	x0, x20
00000000000058dc	blraaz	x8
00000000000058e0	ldr	x8, [x20, #0x8]
00000000000058e4	add	x9, x8, #0x1
00000000000058e8	str	x9, [x20, #0x8]
00000000000058ec	strb	w22, [x8]
00000000000058f0	add	x21, x21, #0x1
00000000000058f4	ldrb	w22, [x21]
00000000000058f8	cbnz	w22, 0x5878
00000000000058fc	ldp	x29, x30, [sp, #0x60]
0000000000005900	ldp	x20, x19, [sp, #0x50]
0000000000005904	ldp	x22, x21, [sp, #0x40]
0000000000005908	ldp	x24, x23, [sp, #0x30]
000000000000590c	ldp	x26, x25, [sp, #0x20]
0000000000005910	add	sp, sp, #0x70
0000000000005914	retab
_ydec:
0000000000005918	pacibsp
000000000000591c	stp	x24, x23, [sp, #-0x40]!
0000000000005920	stp	x22, x21, [sp, #0x10]
0000000000005924	stp	x20, x19, [sp, #0x20]
0000000000005928	stp	x29, x30, [sp, #0x30]
000000000000592c	add	x29, sp, #0x30
0000000000005930	mov	x20, x1
0000000000005934	mov	x19, x0
0000000000005938	cmp	x2, #0xa00, lsl #12
000000000000593c	b.lo	0x59f0
0000000000005940	add	x8, x2, #0x80, lsl #12
0000000000005944	lsr	x2, x8, #20
0000000000005948	mov	x0, x19
000000000000594c	mov	x1, x20
0000000000005950	bl	_udec
0000000000005954	adrp	x21, 2 ; 0x7000
0000000000005958	add	x21, x21, #0x74f ; literal pool for: "MB"
000000000000595c	mov	w23, #0x4d
0000000000005960	adrp	x22, 2 ; 0x7000
0000000000005964	add	x22, x22, #0x751 ; literal pool for: ""
0000000000005968	cbz	x20, 0x59b8
000000000000596c	and	w0, w23, #0xff
0000000000005970	blraaz	x20
0000000000005974	cbz	x0, 0x59b8
0000000000005978	ldrb	w23, [x0]
000000000000597c	cbz	w23, 0x59e0
0000000000005980	add	x24, x0, #0x1
0000000000005984	ldp	x8, x9, [x19, #0x8]
0000000000005988	cmp	x8, x9
000000000000598c	b.lo	0x59a0
0000000000005990	ldr	x8, [x19, #0x20]
0000000000005994	mov	x0, x19
0000000000005998	blraaz	x8
000000000000599c	ldr	x8, [x19, #0x8]
00000000000059a0	add	x9, x8, #0x1
00000000000059a4	str	x9, [x19, #0x8]
00000000000059a8	strb	w23, [x8]
00000000000059ac	ldrb	w23, [x24], #0x1
00000000000059b0	cbnz	w23, 0x5984
00000000000059b4	b	0x59e0
00000000000059b8	ldp	x8, x9, [x19, #0x8]
00000000000059bc	cmp	x8, x9
00000000000059c0	b.lo	0x59d4
00000000000059c4	ldr	x8, [x19, #0x20]
00000000000059c8	mov	x0, x19
00000000000059cc	blraaz	x8
00000000000059d0	ldr	x8, [x19, #0x8]
00000000000059d4	add	x9, x8, #0x1
00000000000059d8	str	x9, [x19, #0x8]
00000000000059dc	strb	w23, [x8]
00000000000059e0	ldrb	w23, [x21, #0x1]!
00000000000059e4	cmp	x21, x22
00000000000059e8	b.ne	0x5968
00000000000059ec	b	0x5b34
00000000000059f0	lsr	x8, x2, #11
00000000000059f4	cmp	x8, #0x5
00000000000059f8	b.lo	0x5aac
00000000000059fc	add	x8, x2, #0x200
0000000000005a00	lsr	x2, x8, #10
0000000000005a04	mov	x0, x19
0000000000005a08	mov	x1, x20
0000000000005a0c	bl	_udec
0000000000005a10	adrp	x21, 2 ; 0x7000
0000000000005a14	add	x21, x21, #0x752 ; literal pool for: "KB"
0000000000005a18	mov	w23, #0x4b
0000000000005a1c	adrp	x22, 2 ; 0x7000
0000000000005a20	add	x22, x22, #0x754 ; literal pool for: ""
0000000000005a24	cbz	x20, 0x5a74
0000000000005a28	and	w0, w23, #0xff
0000000000005a2c	blraaz	x20
0000000000005a30	cbz	x0, 0x5a74
0000000000005a34	ldrb	w23, [x0]
0000000000005a38	cbz	w23, 0x5a9c
0000000000005a3c	add	x24, x0, #0x1
0000000000005a40	ldp	x8, x9, [x19, #0x8]
0000000000005a44	cmp	x8, x9
0000000000005a48	b.lo	0x5a5c
0000000000005a4c	ldr	x8, [x19, #0x20]
0000000000005a50	mov	x0, x19
0000000000005a54	blraaz	x8
0000000000005a58	ldr	x8, [x19, #0x8]
0000000000005a5c	add	x9, x8, #0x1
0000000000005a60	str	x9, [x19, #0x8]
0000000000005a64	strb	w23, [x8]
0000000000005a68	ldrb	w23, [x24], #0x1
0000000000005a6c	cbnz	w23, 0x5a40
0000000000005a70	b	0x5a9c
0000000000005a74	ldp	x8, x9, [x19, #0x8]
0000000000005a78	cmp	x8, x9
0000000000005a7c	b.lo	0x5a90
0000000000005a80	ldr	x8, [x19, #0x20]
0000000000005a84	mov	x0, x19
0000000000005a88	blraaz	x8
0000000000005a8c	ldr	x8, [x19, #0x8]
0000000000005a90	add	x9, x8, #0x1
0000000000005a94	str	x9, [x19, #0x8]
0000000000005a98	strb	w23, [x8]
0000000000005a9c	ldrb	w23, [x21, #0x1]!
0000000000005aa0	cmp	x21, x22
0000000000005aa4	b.ne	0x5a24
0000000000005aa8	b	0x5b34
0000000000005aac	mov	x0, x19
0000000000005ab0	mov	x1, x20
0000000000005ab4	bl	_udec
0000000000005ab8	cbz	x20, 0x5b08
0000000000005abc	mov	w0, #0x62
0000000000005ac0	blraaz	x20
0000000000005ac4	cbz	x0, 0x5b08
0000000000005ac8	ldrb	w20, [x0]
0000000000005acc	cbz	w20, 0x5b34
0000000000005ad0	add	x21, x0, #0x1
0000000000005ad4	ldp	x8, x9, [x19, #0x8]
0000000000005ad8	cmp	x8, x9
0000000000005adc	b.lo	0x5af0
0000000000005ae0	ldr	x8, [x19, #0x20]
0000000000005ae4	mov	x0, x19
0000000000005ae8	blraaz	x8
0000000000005aec	ldr	x8, [x19, #0x8]
0000000000005af0	add	x9, x8, #0x1
0000000000005af4	str	x9, [x19, #0x8]
0000000000005af8	strb	w20, [x8]
0000000000005afc	ldrb	w20, [x21], #0x1
0000000000005b00	cbnz	w20, 0x5ad4
0000000000005b04	b	0x5b34
0000000000005b08	ldp	x8, x9, [x19, #0x8]
0000000000005b0c	cmp	x8, x9
0000000000005b10	b.lo	0x5b24
0000000000005b14	ldr	x8, [x19, #0x20]
0000000000005b18	mov	x0, x19
0000000000005b1c	blraaz	x8
0000000000005b20	ldr	x8, [x19, #0x8]
0000000000005b24	add	x9, x8, #0x1
0000000000005b28	str	x9, [x19, #0x8]
0000000000005b2c	mov	w9, #0x62
0000000000005b30	strb	w9, [x8]
0000000000005b34	ldp	x29, x30, [sp, #0x30]
0000000000005b38	ldp	x20, x19, [sp, #0x20]
0000000000005b3c	ldp	x22, x21, [sp, #0x10]
0000000000005b40	ldp	x24, x23, [sp], #0x40
0000000000005b44	retab
_OSAtomicFifoEnqueue:
0000000000005b48	pacibsp
0000000000005b4c	stp	x29, x30, [sp, #-0x10]!
0000000000005b50	mov	x29, sp
0000000000005b54	adrp	x8, 15 ; 0x14000
0000000000005b58	add	x8, x8, #0x10
0000000000005b5c	ldr	x16, [x8]
0000000000005b60	cbz	x16, 0x5bb0
0000000000005b64	mov	x17, x8
0000000000005b68	movk	x17, #0xec6, lsl #48
0000000000005b6c	autia	x16, x17
0000000000005b70	mov	x17, x16
0000000000005b74	xpaci	x17
0000000000005b78	cmp	x16, x17
0000000000005b7c	b.eq	0x5b84
0000000000005b80	brk	#0xc470
0000000000005b84	cbz	x16, 0x5bb0
0000000000005b88	mov	x17, x16
0000000000005b8c	mov	x16, #0x0
0000000000005b90	pacia1716
0000000000005b94	mov	x3, x17
0000000000005b98	ldp	x29, x30, [sp], #0x10
0000000000005b9c	autibsp
0000000000005ba0	eor	x16, x30, x30, lsl #1
0000000000005ba4	tbz	x16, #0x3e, 0x5bac
0000000000005ba8	brk	#0xc471
0000000000005bac	braaz	x3
0000000000005bb0	bl	_OSAtomicFifoDequeue.cold.1
_OSAtomicFifoDequeue:
0000000000005bb4	pacibsp
0000000000005bb8	stp	x29, x30, [sp, #-0x10]!
0000000000005bbc	mov	x29, sp
0000000000005bc0	adrp	x8, 15 ; 0x14000
0000000000005bc4	add	x8, x8, #0x10
0000000000005bc8	ldr	x16, [x8]
0000000000005bcc	cbz	x16, 0x5c1c
0000000000005bd0	mov	x17, x8
0000000000005bd4	movk	x17, #0xec6, lsl #48
0000000000005bd8	autia	x16, x17
0000000000005bdc	mov	x17, x16
0000000000005be0	xpaci	x17
0000000000005be4	cmp	x16, x17
0000000000005be8	b.eq	0x5bf0
0000000000005bec	brk	#0xc470
0000000000005bf0	cbz	x16, 0x5c1c
0000000000005bf4	add	x17, x16, #0x4
0000000000005bf8	mov	x16, #0x0
0000000000005bfc	pacia1716
0000000000005c00	mov	x2, x17
0000000000005c04	ldp	x29, x30, [sp], #0x10
0000000000005c08	autibsp
0000000000005c0c	eor	x16, x30, x30, lsl #1
0000000000005c10	tbz	x16, #0x3e, 0x5c18
0000000000005c14	brk	#0xc471
0000000000005c18	braaz	x2
0000000000005c1c	bl	_OSAtomicFifoDequeue.cold.1
_sys_cache_control:
0000000000005c20	pacibsp
0000000000005c24	stp	x29, x30, [sp, #-0x10]!
0000000000005c28	mov	x29, sp
0000000000005c2c	cmp	w0, #0x2
0000000000005c30	b.eq	0x5c4c
0000000000005c34	cmp	w0, #0x1
0000000000005c38	b.ne	0x5c60
0000000000005c3c	mov	x0, x1
0000000000005c40	mov	x1, x2
0000000000005c44	bl	_sys_icache_invalidate
0000000000005c48	b	0x5c58
0000000000005c4c	mov	x0, x1
0000000000005c50	mov	x1, x2
0000000000005c54	bl	_sys_dcache_flush
0000000000005c58	mov	w0, #0x0
0000000000005c5c	b	0x5c64
0000000000005c60	mov	w0, #0x2d
0000000000005c64	ldp	x29, x30, [sp], #0x10
0000000000005c68	retab
_sys_icache_invalidate:
0000000000005c6c	cbz	x1, 0x5cc0
0000000000005c70	and	x9, x0, #0xffffffffffffffc0
0000000000005c74	and	x10, x0, #0x3f
0000000000005c78	add	x10, x1, x10
0000000000005c7c	sub	x10, x10, #0x1
0000000000005c80	mov	x11, #-0x1
0000000000005c84	eor	x10, x11, x10, lsr #6
0000000000005c88	dsb	ish
0000000000005c8c	mov	x2, #0x14
0000000000005c90	mov	x3, #0x0
0000000000005c94	ic	ivau, x9
0000000000005c98	add	x9, x9, #0x40
0000000000005c9c	subs	x2, x2, #0x1
0000000000005ca0	b.ne	0x5cb0
0000000000005ca4	cbz	x3, 0x5cc4
0000000000005ca8	dsb	ish
0000000000005cac	mov	x2, #0x14
0000000000005cb0	adds	x10, x10, #0x1
0000000000005cb4	b.ne	0x5c94
0000000000005cb8	dsb	ish
0000000000005cbc	isb
0000000000005cc0	ret
0000000000005cc4	movk	x8, #0x0, lsl #48
0000000000005cc8	movk	x8, #0xf, lsl #32
0000000000005ccc	movk	x8, #0xffff, lsl #16
0000000000005cd0	movk	x8, #0xc080
0000000000005cd4	ldr	w8, [x8]
0000000000005cd8	adrp	x2, 0 ; 0x5000
0000000000005cdc	add	x2, x2, #0xd00
0000000000005ce0	ldr	w3, [x2], #0x4
0000000000005ce4	cbz	w3, 0x5cf4
0000000000005ce8	cmp	w3, w8
0000000000005cec	b.eq	0x5ca8
0000000000005cf0	b	0x5ce0
0000000000005cf4	mov	x2, #0x0
0000000000005cf8	mov	x3, #0x1
0000000000005cfc	b	0x5cb0
_cpus_that_need_dsb_for_ic_ivau:
0000000000005d00	.long	0x1b588bb3
0000000000005d04	.long	0xda33d83d
0000000000005d08	.long	0x8765edea
0000000000005d0c	.long	0xfa33415e
0000000000005d10	ldnp	w21, w29, [x13, #-0x4c]
0000000000005d14	ands	w18, w1, #0x803fffff
0000000000005d18	.long	0x5f4dea93
0000000000005d1c	udf	#0x0
_sys_dcache_flush:
0000000000005d20	dsb	ish
0000000000005d24	ret
__OSSpinLockLockYield:
0000000000005d28	pacibsp
0000000000005d2c	sub	sp, sp, #0x50
0000000000005d30	stp	x24, x23, [sp, #0x10]
0000000000005d34	stp	x22, x21, [sp, #0x20]
0000000000005d38	stp	x20, x19, [sp, #0x30]
0000000000005d3c	stp	x29, x30, [sp, #0x40]
0000000000005d40	add	x29, sp, #0x40
0000000000005d44	mov	x19, x0
0000000000005d48	add	x0, sp, #0x8
0000000000005d4c	bl	0x7430 ; symbol stub for: _mach_timebase_info
0000000000005d50	cbz	w0, 0x5d5c
0000000000005d54	mov	x22, #-0x1
0000000000005d58	b	0x5d78
0000000000005d5c	mov	w8, #0x4240
0000000000005d60	movk	w8, #0xf, lsl #16
0000000000005d64	ldp	w10, w9, [sp, #0x8]
0000000000005d68	umull	x8, w9, w8
0000000000005d6c	udiv	x20, x8, x10
0000000000005d70	bl	0x7410 ; symbol stub for: _mach_absolute_time
0000000000005d74	add	x22, x0, x20
0000000000005d78	mov	w23, #0x1
0000000000005d7c	mov	w24, #-0x1
0000000000005d80	mov	w20, #0x1
0000000000005d84	mov	w21, #0x1
0000000000005d88	ldr	w8, [x19]
0000000000005d8c	cbnz	w8, 0x5d9c
0000000000005d90	casa	w8, w24, [x19]
0000000000005d94	cmp	w8, #0x0
0000000000005d98	b.eq	0x5dd4
0000000000005d9c	cmn	w8, #0x1
0000000000005da0	b.ne	0x5dec
0000000000005da4	mov	w0, #0x0
0000000000005da8	mov	x1, x21
0000000000005dac	mov	x2, x20
0000000000005db0	bl	0x74d0 ; symbol stub for: _thread_switch
0000000000005db4	cmp	w21, #0x2
0000000000005db8	b.eq	0x5dcc
0000000000005dbc	bl	0x7410 ; symbol stub for: _mach_absolute_time
0000000000005dc0	cmp	x0, x22
0000000000005dc4	cinc	w21, w23, hs
0000000000005dc8	b	0x5d88
0000000000005dcc	add	w20, w20, #0x1
0000000000005dd0	b	0x5d88
0000000000005dd4	ldp	x29, x30, [sp, #0x40]
0000000000005dd8	ldp	x20, x19, [sp, #0x30]
0000000000005ddc	ldp	x22, x21, [sp, #0x20]
0000000000005de0	ldp	x24, x23, [sp, #0x10]
0000000000005de4	add	sp, sp, #0x50
0000000000005de8	retab
0000000000005dec	sxtw	x1, w8
0000000000005df0	bl	__os_lock_corruption_abort
__spin_lock_try:
0000000000005df4	mov	w8, #0x0
0000000000005df8	mov	w9, #-0x1
0000000000005dfc	casa	w8, w9, [x0]
0000000000005e00	cmp	w8, #0x0
0000000000005e04	cset	w0, eq
0000000000005e08	ret
__os_lock_spin_trylock:
0000000000005e0c	mov	w8, #0x0
0000000000005e10	add	x9, x0, #0x8
0000000000005e14	mov	w10, #-0x1
0000000000005e18	casa	w8, w10, [x9]
0000000000005e1c	cmp	w8, #0x0
0000000000005e20	cset	w0, eq
0000000000005e24	ret
_os_unfair_lock_trylock_with_options:
0000000000005e28	mov	w8, #0x0
0000000000005e2c	mrs	x9, TPIDRRO_EL0
0000000000005e30	ldr	w3, [x9, #0x18]
0000000000005e34	casa	w8, w3, [x0]
0000000000005e38	cmp	w8, #0x0
0000000000005e3c	b.ne	0x5e48
0000000000005e40	mov	w0, #0x1
0000000000005e44	ret
0000000000005e48	b	__os_unfair_lock_trylock_with_options_slow
__os_unfair_lock_trylock_with_options_slow:
0000000000005e4c	pacibsp
0000000000005e50	sub	sp, sp, #0x40
0000000000005e54	stp	x22, x21, [sp, #0x10]
0000000000005e58	stp	x20, x19, [sp, #0x20]
0000000000005e5c	stp	x29, x30, [sp, #0x30]
0000000000005e60	add	x29, sp, #0x30
0000000000005e64	mov	x19, x3
0000000000005e68	mov	x22, x2
0000000000005e6c	mov	x21, x1
0000000000005e70	mov	x20, x0
0000000000005e74	tbnz	w1, #0x19, 0x5ecc
0000000000005e78	cbz	x22, 0x5ed8
0000000000005e7c	add	x0, sp, #0x8
0000000000005e80	bl	0x7430 ; symbol stub for: _mach_timebase_info
0000000000005e84	ldp	w9, w8, [sp, #0x8]
0000000000005e88	mul	x8, x8, x22
0000000000005e8c	udiv	x22, x8, x9
0000000000005e90	bl	0x7410 ; symbol stub for: _mach_absolute_time
0000000000005e94	add	x22, x0, x22
0000000000005e98	adrp	x8, 3 ; 0x8000
0000000000005e9c	ldr	x8, [x8, #0x8] ; literal pool symbol address: __os_xbs_chrooted
0000000000005ea0	ldrb	w8, [x8]
0000000000005ea4	cbz	w8, 0x5f1c
0000000000005ea8	add	x0, sp, #0x8
0000000000005eac	bl	0x7430 ; symbol stub for: _mach_timebase_info
0000000000005eb0	bl	0x7410 ; symbol stub for: _mach_absolute_time
0000000000005eb4	sub	x8, x22, x0
0000000000005eb8	ldp	w9, w10, [sp, #0x8]
0000000000005ebc	mul	x8, x8, x9
0000000000005ec0	and	w1, w21, #0xfdffffff
0000000000005ec4	udiv	x22, x8, x10
0000000000005ec8	b	0x5f20
0000000000005ecc	bl	0x7410 ; symbol stub for: _mach_absolute_time
0000000000005ed0	cmp	x0, x22
0000000000005ed4	b.ls	0x5ee0
0000000000005ed8	mov	w0, #0x0
0000000000005edc	b	0x5f30
0000000000005ee0	adrp	x8, 3 ; 0x8000
0000000000005ee4	ldr	x8, [x8, #0x8] ; literal pool symbol address: __os_xbs_chrooted
0000000000005ee8	ldrb	w8, [x8]
0000000000005eec	cbz	w8, 0x5f10
0000000000005ef0	add	x0, sp, #0x8
0000000000005ef4	bl	0x7430 ; symbol stub for: _mach_timebase_info
0000000000005ef8	bl	0x7410 ; symbol stub for: _mach_absolute_time
0000000000005efc	sub	x8, x22, x0
0000000000005f00	ldp	w9, w10, [sp, #0x8]
0000000000005f04	mul	x8, x8, x9
0000000000005f08	and	w21, w21, #0xfdffffff
0000000000005f0c	udiv	x22, x8, x10
0000000000005f10	mov	x0, x20
0000000000005f14	mov	x1, x21
0000000000005f18	b	0x5f24
0000000000005f1c	orr	w1, w21, #0x2000000
0000000000005f20	mov	x0, x20
0000000000005f24	mov	x2, x22
0000000000005f28	mov	x3, x19
0000000000005f2c	bl	__os_unfair_lock_lock_slow
0000000000005f30	ldp	x29, x30, [sp, #0x30]
0000000000005f34	ldp	x20, x19, [sp, #0x20]
0000000000005f38	ldp	x22, x21, [sp, #0x10]
0000000000005f3c	add	sp, sp, #0x40
0000000000005f40	retab
_os_unfair_lock_lock_no_tsd:
0000000000005f44	mov	w8, #0x0
0000000000005f48	casa	w8, w2, [x0]
0000000000005f4c	cmp	w8, #0x0
0000000000005f50	b.ne	0x5f58
0000000000005f54	ret
0000000000005f58	mov	x3, x2
0000000000005f5c	mov	x2, #0x0
0000000000005f60	b	__os_unfair_lock_lock_slow
_os_unfair_lock_unlock_no_tsd:
0000000000005f64	swpl	wzr, w2, [x0]
0000000000005f68	cmp	w2, w1
0000000000005f6c	b.ne	0x5f74
0000000000005f70	ret
0000000000005f74	b	__os_unfair_lock_unlock_slow
_os_unfair_lock_lock_with_flags:
0000000000005f78	mov	w8, #0x0
0000000000005f7c	mrs	x9, TPIDRRO_EL0
0000000000005f80	ldr	w3, [x9, #0x18]
0000000000005f84	casa	w8, w3, [x0]
0000000000005f88	cmp	w8, #0x0
0000000000005f8c	b.ne	0x5f94
0000000000005f90	ret
0000000000005f94	mov	x2, #0x0
0000000000005f98	b	__os_unfair_lock_lock_slow
_os_unfair_recursive_lock_owned:
0000000000005f9c	ldr	w8, [x0]
0000000000005fa0	orr	w8, w8, #0x1
0000000000005fa4	mrs	x9, TPIDRRO_EL0
0000000000005fa8	ldr	w9, [x9, #0x18]
0000000000005fac	cmp	w8, w9
0000000000005fb0	cset	w0, eq
0000000000005fb4	ret
_os_unfair_recursive_lock_unlock_forked_child:
0000000000005fb8	pacibsp
0000000000005fbc	stp	x29, x30, [sp, #-0x10]!
0000000000005fc0	mov	x29, sp
0000000000005fc4	ldr	w8, [x0]
0000000000005fc8	cbz	w8, 0x5ff8
0000000000005fcc	ldr	w9, [x0, #0x4]
0000000000005fd0	cbz	w9, 0x5fe8
0000000000005fd4	mrs	x8, TPIDRRO_EL0
0000000000005fd8	ldr	w8, [x8, #0x18]
0000000000005fdc	sub	w9, w9, #0x1
0000000000005fe0	str	w9, [x0, #0x4]
0000000000005fe4	b	0x5fec
0000000000005fe8	mov	w8, #0x0
0000000000005fec	str	w8, [x0]
0000000000005ff0	ldp	x29, x30, [sp], #0x10
0000000000005ff4	retab
0000000000005ff8	bl	_os_unfair_recursive_lock_unlock_forked_child.cold.1
__os_lock_unfair_trylock:
0000000000005ffc	mov	w8, #0x0
0000000000006000	add	x9, x0, #0x8
0000000000006004	mrs	x10, TPIDRRO_EL0
0000000000006008	ldr	w10, [x10, #0x18]
000000000000600c	casa	w8, w10, [x9]
0000000000006010	cmp	w8, #0x0
0000000000006014	cset	w0, eq
0000000000006018	ret
__os_lock_unfair_unlock:
000000000000601c	add	x0, x0, #0x8
0000000000006020	mrs	x8, TPIDRRO_EL0
0000000000006024	ldr	w1, [x8, #0x18]
0000000000006028	swpl	wzr, w2, [x0]
000000000000602c	cmp	w2, w1
0000000000006030	b.ne	0x6038
0000000000006034	ret
0000000000006038	b	__os_unfair_lock_unlock_slow
__os_lock_nospin_lock:
000000000000603c	mov	w8, #0x0
0000000000006040	add	x0, x0, #0x8
0000000000006044	mrs	x9, TPIDRRO_EL0
0000000000006048	ldr	w9, [x9, #0x18]
000000000000604c	casa	w8, w9, [x0]
0000000000006050	cmp	w8, #0x0
0000000000006054	b.ne	0x605c
0000000000006058	ret
000000000000605c	b	__os_nospin_lock_lock_slow
__os_lock_nospin_trylock:
0000000000006060	mov	w8, #0x0
0000000000006064	add	x9, x0, #0x8
0000000000006068	mrs	x10, TPIDRRO_EL0
000000000000606c	ldr	w10, [x10, #0x18]
0000000000006070	casa	w8, w10, [x9]
0000000000006074	cmp	w8, #0x0
0000000000006078	cset	w0, eq
000000000000607c	ret
__os_lock_nospin_unlock:
0000000000006080	add	x0, x0, #0x8
0000000000006084	mrs	x8, TPIDRRO_EL0
0000000000006088	ldr	w8, [x8, #0x18]
000000000000608c	swpl	wzr, w1, [x0]
0000000000006090	cmp	w1, w8
0000000000006094	b.ne	0x609c
0000000000006098	ret
000000000000609c	b	__os_nospin_lock_unlock_slow
___os_once_reset:
00000000000060a0	mrs	x8, TPIDRRO_EL0
00000000000060a4	ldr	w2, [x8, #0x18]
00000000000060a8	swpl	xzr, x1, [x0]
00000000000060ac	cmp	w2, w1
00000000000060b0	b.ne	0x60b8
00000000000060b4	ret
00000000000060b8	b	__os_once_gate_broadcast
_os_sync_wait_on_address_with_deadline:
00000000000060bc	pacibsp
00000000000060c0	sub	sp, sp, #0x40
00000000000060c4	stp	x22, x21, [sp, #0x10]
00000000000060c8	stp	x20, x19, [sp, #0x20]
00000000000060cc	stp	x29, x30, [sp, #0x30]
00000000000060d0	add	x29, sp, #0x30
00000000000060d4	cmp	w3, #0x1
00000000000060d8	b.hi	0x615c
00000000000060dc	mov	x21, x5
00000000000060e0	mov	x19, x1
00000000000060e4	mov	x20, x0
00000000000060e8	cmp	x2, #0x8
00000000000060ec	b.eq	0x60f8
00000000000060f0	cmp	x2, #0x4
00000000000060f4	b.ne	0x615c
00000000000060f8	cbz	x21, 0x615c
00000000000060fc	cmp	w4, #0x20
0000000000006100	b.ne	0x615c
0000000000006104	cmp	w3, #0x0
0000000000006108	mov	w8, #0x5
000000000000610c	cinc	w8, w8, ne
0000000000006110	mov	w9, #0x3
0000000000006114	csinc	w9, w9, wzr, ne
0000000000006118	cmp	x2, #0x4
000000000000611c	csel	w9, wzr, w9, ne
0000000000006120	cmp	x2, #0x8
0000000000006124	csel	w22, w8, w9, eq
0000000000006128	adrp	x8, 2 ; 0x8000
000000000000612c	ldr	x8, [x8, #0x8] ; literal pool symbol address: __os_xbs_chrooted
0000000000006130	ldrb	w8, [x8]
0000000000006134	cbz	w8, 0x6170
0000000000006138	add	x0, sp, #0x8
000000000000613c	bl	0x7430 ; symbol stub for: _mach_timebase_info
0000000000006140	bl	0x7410 ; symbol stub for: _mach_absolute_time
0000000000006144	sub	x8, x21, x0
0000000000006148	ldp	w9, w10, [sp, #0x8]
000000000000614c	mul	x9, x8, x9
0000000000006150	mov	w8, #0x1000000
0000000000006154	udiv	x21, x9, x10
0000000000006158	b	0x6174
000000000000615c	bl	0x72f0 ; symbol stub for: ___error
0000000000006160	mov	w8, #0x16
0000000000006164	str	w8, [x0]
0000000000006168	mov	w0, #-0x1
000000000000616c	b	0x6190
0000000000006170	mov	w8, #0x3000000
0000000000006174	orr	w0, w8, w22
0000000000006178	mov	x1, x20
000000000000617c	mov	x2, x19
0000000000006180	mov	x3, x21
0000000000006184	mov	x4, #0x0
0000000000006188	bl	0x7370 ; symbol stub for: ___ulock_wait2
000000000000618c	tbnz	w0, #0x1f, 0x61a4
0000000000006190	ldp	x29, x30, [sp, #0x30]
0000000000006194	ldp	x20, x19, [sp, #0x20]
0000000000006198	ldp	x22, x21, [sp, #0x10]
000000000000619c	add	sp, sp, #0x40
00000000000061a0	retab
00000000000061a4	neg	w19, w0
00000000000061a8	bl	0x72f0 ; symbol stub for: ___error
00000000000061ac	str	w19, [x0]
00000000000061b0	b	0x6168
_os_sync_wait_on_address_with_timeout:
00000000000061b4	pacibsp
00000000000061b8	stp	x20, x19, [sp, #-0x20]!
00000000000061bc	stp	x29, x30, [sp, #0x10]
00000000000061c0	add	x29, sp, #0x10
00000000000061c4	cmp	w3, #0x1
00000000000061c8	b.hi	0x6238
00000000000061cc	mov	x8, x1
00000000000061d0	mov	x1, x0
00000000000061d4	cmp	x2, #0x8
00000000000061d8	b.eq	0x61e4
00000000000061dc	cmp	x2, #0x4
00000000000061e0	b.ne	0x6238
00000000000061e4	mov	w19, #0x16
00000000000061e8	cbz	x5, 0x623c
00000000000061ec	cmp	w4, #0x20
00000000000061f0	b.ne	0x623c
00000000000061f4	cmp	w3, #0x0
00000000000061f8	mov	w9, #0x5
00000000000061fc	cinc	w9, w9, ne
0000000000006200	mov	w10, #0x3
0000000000006204	csinc	w10, w10, wzr, ne
0000000000006208	cmp	x2, #0x4
000000000000620c	csel	w10, wzr, w10, ne
0000000000006210	cmp	x2, #0x8
0000000000006214	csel	w9, w9, w10, eq
0000000000006218	orr	w0, w9, #0x1000000
000000000000621c	mov	x2, x8
0000000000006220	mov	x3, x5
0000000000006224	mov	x4, #0x0
0000000000006228	bl	0x7370 ; symbol stub for: ___ulock_wait2
000000000000622c	tbz	w0, #0x1f, 0x6248
0000000000006230	neg	w19, w0
0000000000006234	b	0x623c
0000000000006238	mov	w19, #0x16
000000000000623c	bl	0x72f0 ; symbol stub for: ___error
0000000000006240	str	w19, [x0]
0000000000006244	mov	w0, #-0x1
0000000000006248	ldp	x29, x30, [sp, #0x10]
000000000000624c	ldp	x20, x19, [sp], #0x20
0000000000006250	retab
_os_sync_wait_on_address:
0000000000006254	pacibsp
0000000000006258	stp	x20, x19, [sp, #-0x20]!
000000000000625c	stp	x29, x30, [sp, #0x10]
0000000000006260	add	x29, sp, #0x10
0000000000006264	cmp	w3, #0x1
0000000000006268	b.hi	0x62c8
000000000000626c	mov	x8, x1
0000000000006270	mov	x1, x0
0000000000006274	cmp	x2, #0x8
0000000000006278	b.eq	0x6284
000000000000627c	cmp	x2, #0x4
0000000000006280	b.ne	0x62c8
0000000000006284	cmp	w3, #0x0
0000000000006288	mov	w9, #0x5
000000000000628c	cinc	w9, w9, ne
0000000000006290	mov	w10, #0x3
0000000000006294	csinc	w10, w10, wzr, ne
0000000000006298	cmp	x2, #0x4
000000000000629c	csel	w10, wzr, w10, ne
00000000000062a0	cmp	x2, #0x8
00000000000062a4	csel	w9, w9, w10, eq
00000000000062a8	orr	w0, w9, #0x1000000
00000000000062ac	mov	x2, x8
00000000000062b0	mov	x3, #0x0
00000000000062b4	mov	x4, #0x0
00000000000062b8	bl	0x7370 ; symbol stub for: ___ulock_wait2
00000000000062bc	tbz	w0, #0x1f, 0x62d8
00000000000062c0	neg	w19, w0
00000000000062c4	b	0x62cc
00000000000062c8	mov	w19, #0x16
00000000000062cc	bl	0x72f0 ; symbol stub for: ___error
00000000000062d0	str	w19, [x0]
00000000000062d4	mov	w0, #-0x1
00000000000062d8	ldp	x29, x30, [sp, #0x10]
00000000000062dc	ldp	x20, x19, [sp], #0x20
00000000000062e0	retab
_os_sync_wake_by_address_any:
00000000000062e4	pacibsp
00000000000062e8	stp	x20, x19, [sp, #-0x20]!
00000000000062ec	stp	x29, x30, [sp, #0x10]
00000000000062f0	add	x29, sp, #0x10
00000000000062f4	cmp	w2, #0x1
00000000000062f8	b.hi	0x6350
00000000000062fc	mov	x8, x0
0000000000006300	cmp	x1, #0x8
0000000000006304	b.eq	0x6310
0000000000006308	cmp	x1, #0x4
000000000000630c	b.ne	0x6350
0000000000006310	cmp	w2, #0x0
0000000000006314	mov	w9, #0x5
0000000000006318	cinc	w9, w9, ne
000000000000631c	mov	w10, #0x3
0000000000006320	csinc	w10, w10, wzr, ne
0000000000006324	cmp	x1, #0x4
0000000000006328	csel	w10, wzr, w10, ne
000000000000632c	cmp	x1, #0x8
0000000000006330	csel	w9, w9, w10, eq
0000000000006334	orr	w0, w9, #0x1000000
0000000000006338	mov	x1, x8
000000000000633c	mov	x2, #0x0
0000000000006340	bl	0x7380 ; symbol stub for: ___ulock_wake
0000000000006344	tbz	w0, #0x1f, 0x6360
0000000000006348	neg	w19, w0
000000000000634c	b	0x6354
0000000000006350	mov	w19, #0x16
0000000000006354	bl	0x72f0 ; symbol stub for: ___error
0000000000006358	str	w19, [x0]
000000000000635c	mov	w0, #-0x1
0000000000006360	ldp	x29, x30, [sp, #0x10]
0000000000006364	ldp	x20, x19, [sp], #0x20
0000000000006368	retab
_os_sync_wake_by_address_all:
000000000000636c	pacibsp
0000000000006370	stp	x20, x19, [sp, #-0x20]!
0000000000006374	stp	x29, x30, [sp, #0x10]
0000000000006378	add	x29, sp, #0x10
000000000000637c	cmp	w2, #0x1
0000000000006380	b.hi	0x63d8
0000000000006384	mov	x8, x0
0000000000006388	cmp	x1, #0x8
000000000000638c	b.eq	0x6398
0000000000006390	cmp	x1, #0x4
0000000000006394	b.ne	0x63d8
0000000000006398	cmp	w2, #0x0
000000000000639c	mov	w9, #0x5
00000000000063a0	cinc	w9, w9, ne
00000000000063a4	mov	w10, #0x3
00000000000063a8	csinc	w10, w10, wzr, ne
00000000000063ac	cmp	x1, #0x4
00000000000063b0	csel	w10, wzr, w10, ne
00000000000063b4	cmp	x1, #0x8
00000000000063b8	csel	w9, w9, w10, eq
00000000000063bc	orr	w0, w9, #0x1000100
00000000000063c0	mov	x1, x8
00000000000063c4	mov	x2, #0x0
00000000000063c8	bl	0x7380 ; symbol stub for: ___ulock_wake
00000000000063cc	tbz	w0, #0x1f, 0x63e8
00000000000063d0	neg	w19, w0
00000000000063d4	b	0x63dc
00000000000063d8	mov	w19, #0x16
00000000000063dc	bl	0x72f0 ; symbol stub for: ___error
00000000000063e0	str	w19, [x0]
00000000000063e4	mov	w0, #-0x1
00000000000063e8	ldp	x29, x30, [sp, #0x10]
00000000000063ec	ldp	x20, x19, [sp], #0x20
00000000000063f0	retab
_OSAtomicOr32OrigBarrier:
00000000000063f4	ldsetal	w0, w0, [x1]
00000000000063f8	ret
_OSAtomicXor32:
00000000000063fc	ldeor	w0, w8, [x1]
0000000000006400	eor	w0, w8, w0
0000000000006404	ret
_OSAtomicXor32Orig:
0000000000006408	ldeor	w0, w0, [x1]
000000000000640c	ret
_OSAtomicXor32OrigBarrier:
0000000000006410	ldeoral	w0, w0, [x1]
0000000000006414	ret
__OSAtomicEnqueue_misalign:
0000000000006418	ldr	x8, [x0]
000000000000641c	str	x8, [x1, x2]
0000000000006420	ldxr	x9, [x0]
0000000000006424	cmp	x8, x9
0000000000006428	mov	x8, x9
000000000000642c	b.ne	0x641c
0000000000006430	stlxr	w10, x1, [x0]
0000000000006434	mov	x8, x9
0000000000006438	cbnz	w10, 0x641c
000000000000643c	ret
__OSAtomicDequeue_misalign:
0000000000006440	mov	x8, x0
0000000000006444	ldaxr	x0, [x8]
0000000000006448	cbz	x0, 0x645c
000000000000644c	ldr	x9, [x0, x1]
0000000000006450	stxr	w10, x9, [x8]
0000000000006454	cbnz	w10, 0x6444
0000000000006458	ret
000000000000645c	clrex
0000000000006460	ret
_memset:
0000000000006464	b	__platform_memset
__platform_memccpy:
0000000000006468	cbz	x3, 0x64c0
000000000000646c	pacibsp
0000000000006470	stp	x22, x21, [sp, #-0x30]!
0000000000006474	stp	x20, x19, [sp, #0x10]
0000000000006478	stp	x29, x30, [sp, #0x20]
000000000000647c	add	x29, sp, #0x20
0000000000006480	mov	x21, x3
0000000000006484	mov	x20, x1
0000000000006488	mov	x19, x0
000000000000648c	mov	x0, x1
0000000000006490	mov	x1, x2
0000000000006494	mov	x2, x3
0000000000006498	bl	__platform_memchr
000000000000649c	cbz	x0, 0x64c8
00000000000064a0	sub	x8, x0, x20
00000000000064a4	add	x21, x8, #0x1
00000000000064a8	mov	x0, x19
00000000000064ac	mov	x1, x20
00000000000064b0	mov	x2, x21
00000000000064b4	bl	__platform_memmove
00000000000064b8	add	x0, x19, x21
00000000000064bc	b	0x64dc
00000000000064c0	mov	x0, #0x0
00000000000064c4	ret
00000000000064c8	mov	x0, x19
00000000000064cc	mov	x1, x20
00000000000064d0	mov	x2, x21
00000000000064d4	bl	__platform_memmove
00000000000064d8	mov	x0, #0x0
00000000000064dc	ldp	x29, x30, [sp, #0x20]
00000000000064e0	ldp	x20, x19, [sp, #0x10]
00000000000064e4	ldp	x22, x21, [sp], #0x30
00000000000064e8	autibsp
00000000000064ec	ret
___sme_memchr:
00000000000064f0	.long	0x05203820
00000000000064f4	.long	0x04bf5028
00000000000064f8	.long	0x04bf5089
00000000000064fc	.long	0x2518e400
0000000000006500	cmp	x9, x2
0000000000006504	b.hi	0x6530
0000000000006508	sub	x9, x8, #0x1
000000000000650c	neg	x10, x0
0000000000006510	and	x9, x9, x10
0000000000006514	add	x0, x0, x9
0000000000006518	sub	x2, x2, x9
000000000000651c	cbz	x9, 0x6530
0000000000006520	.long	0x253f1930
0000000000006524	sub	x9, x0, x8
0000000000006528	.long	0xa400a121
000000000000652c	.long	0x2401a000
0000000000006530	.long	0x2518e3e1
0000000000006534	.long	0x2550c000
0000000000006538	cset	w9, ne
000000000000653c	tbnz	x2, #0x3f, 0x656c
0000000000006540	tbnz	w9, #0x0, 0x6580
0000000000006544	mov	x9, #0x0
0000000000006548	add	x10, x9, x8
000000000000654c	cmp	x10, x2
0000000000006550	b.hs	0x6594
0000000000006554	.long	0xa4094401
0000000000006558	.long	0x2401a400
000000000000655c	mov	x9, x10
0000000000006560	b.eq	0x6548
0000000000006564	add	x0, x0, x10
0000000000006568	b	0x6580
000000000000656c	tbnz	w9, #0x0, 0x6580
0000000000006570	.long	0xa400a401
0000000000006574	.long	0x2401a400
0000000000006578	add	x0, x0, x8
000000000000657c	b.eq	0x6570
0000000000006580	.long	0x25904400
0000000000006584	.long	0x25208409
0000000000006588	sub	x8, x0, x8
000000000000658c	add	x0, x8, x9
0000000000006590	ret
0000000000006594	.long	0x25221d20
0000000000006598	.long	0xa4094001
000000000000659c	.long	0x2401a001
00000000000065a0	b.eq	0x65b8
00000000000065a4	.long	0x25904021
00000000000065a8	.long	0x25208028
00000000000065ac	add	x9, x0, x9
00000000000065b0	add	x0, x9, x8
00000000000065b4	ret
00000000000065b8	mov	x0, #0x0
00000000000065bc	ret
___sme_memcpy:
00000000000065c0	.long	0x04bf5028
00000000000065c4	.long	0x04bf5089
00000000000065c8	cmp	x9, x2
00000000000065cc	b.ls	0x65d8
00000000000065d0	mov	x10, x0
00000000000065d4	b	0x6678
00000000000065d8	lsr	x12, x8, #4
00000000000065dc	sub	x10, x8, #0x1
00000000000065e0	neg	x11, x0
00000000000065e4	and	x11, x10, x11
00000000000065e8	add	x10, x0, x11
00000000000065ec	add	x13, x1, x11
00000000000065f0	sub	x2, x2, x11
00000000000065f4	cbz	x11, 0x660c
00000000000065f8	.long	0x253f1970
00000000000065fc	sub	x14, x13, x8
0000000000006600	.long	0xa400a1c0
0000000000006604	sub	x14, x10, x8
0000000000006608	.long	0xe400e1c0
000000000000660c	.long	0x25207810
0000000000006610	cmp	x2, x12, lsl #7
0000000000006614	b.hs	0x6620
0000000000006618	mov	x1, x13
000000000000661c	b	0x665c
0000000000006620	lsl	x10, x12, #7
0000000000006624	add	x12, x1, x9
0000000000006628	add	x13, x0, x9
000000000000662c	add	x14, x0, x11
0000000000006630	.long	0xa00b8020
0000000000006634	.long	0xa00b8184
0000000000006638	.long	0xa06081c0
000000000000663c	add	x14, x13, x11
0000000000006640	.long	0xa06081c4
0000000000006644	add	x11, x11, x10
0000000000006648	sub	x2, x2, x10
000000000000664c	cmp	x2, x10
0000000000006650	b.hs	0x662c
0000000000006654	add	x1, x1, x11
0000000000006658	add	x10, x0, x11
000000000000665c	subs	x11, x2, x9
0000000000006660	b.lo	0x6678
0000000000006664	.long	0xa0408020
0000000000006668	.long	0xa0608140
000000000000666c	add	x1, x1, x9
0000000000006670	add	x10, x10, x9
0000000000006674	mov	x2, x11
0000000000006678	.long	0x25221fe0
000000000000667c	b.eq	0x66a0
0000000000006680	mov	x9, #0x0
0000000000006684	mov	x11, #0x0
0000000000006688	.long	0xa4094020
000000000000668c	.long	0xe4094140
0000000000006690	.long	0x252c880b
0000000000006694	.long	0x25221d60
0000000000006698	add	x9, x9, x8
000000000000669c	b.ne	0x6688
00000000000066a0	ret
___sme_memmove:
00000000000066a4	pacibsp
00000000000066a8	stp	x29, x30, [sp, #-0x10]!
00000000000066ac	mov	x29, sp
00000000000066b0	sub	x8, x0, x1
00000000000066b4	cmp	x8, x2
00000000000066b8	b.hs	0x6790
00000000000066bc	add	x9, x1, x2
00000000000066c0	add	x10, x0, x2
00000000000066c4	.long	0x04bf5028
00000000000066c8	.long	0x04bf508b
00000000000066cc	cmp	x11, x2
00000000000066d0	b.hi	0x6764
00000000000066d4	lsr	x14, x8, #4
00000000000066d8	sub	x12, x8, #0x1
00000000000066dc	and	x12, x12, x10
00000000000066e0	sub	x10, x10, x12
00000000000066e4	sub	x9, x9, x12
00000000000066e8	sub	x2, x2, x12
00000000000066ec	cbz	x12, 0x66fc
00000000000066f0	.long	0x252c1fe0
00000000000066f4	.long	0xa400a120
00000000000066f8	.long	0xe400e140
00000000000066fc	.long	0x25207810
0000000000006700	cmp	x2, x14, lsl #7
0000000000006704	b.lo	0x6748
0000000000006708	lsl	x9, x14, #7
000000000000670c	sub	x10, x1, x9
0000000000006710	sub	x12, x1, x14, lsl #6
0000000000006714	sub	x13, x0, x9
0000000000006718	sub	x14, x0, x14, lsl #6
000000000000671c	add	x15, x13, x2
0000000000006720	.long	0xa0028140
0000000000006724	.long	0xa0028184
0000000000006728	.long	0xa06081e0
000000000000672c	add	x15, x14, x2
0000000000006730	.long	0xa06081e4
0000000000006734	sub	x2, x2, x9
0000000000006738	cmp	x2, x9
000000000000673c	b.hs	0x671c
0000000000006740	add	x9, x1, x2
0000000000006744	add	x10, x0, x2
0000000000006748	subs	x12, x2, x11
000000000000674c	b.lo	0x6764
0000000000006750	sub	x9, x9, x11
0000000000006754	sub	x10, x10, x11
0000000000006758	.long	0xa0408120
000000000000675c	.long	0xa0608140
0000000000006760	mov	x2, x12
0000000000006764	.long	0x253f1850
0000000000006768	b.eq	0x6794
000000000000676c	mov	x11, #0x0
0000000000006770	neg	x12, x8
0000000000006774	.long	0xa40c4120
0000000000006778	.long	0xe40c4140
000000000000677c	.long	0x252c880b
0000000000006780	.long	0x252b1850
0000000000006784	sub	x12, x12, x8
0000000000006788	b.ne	0x6774
000000000000678c	b	0x6794
0000000000006790	bl	___sme_memcpy
0000000000006794	ldp	x29, x30, [sp], #0x10
0000000000006798	retab
000000000000679c	udf	#0x0
00000000000067a0	.long	0x03020100
00000000000067a4	.long	0x07060504
00000000000067a8	add	w8, w8, w10, lsl #2
00000000000067ac	.long	0x0f0e0d0c
__platform_strcmp$VARIANT$Base:
00000000000067b0	tst	x0, #0xf
00000000000067b4	b.eq	0x67d4
00000000000067b8	ldrb	w4, [x0], #0x1
00000000000067bc	ldrb	w5, [x1], #0x1
00000000000067c0	subs	x3, x4, x5
00000000000067c4	ccmp	w4, #0x0, #0x4, eq
00000000000067c8	b.ne	__platform_strcmp$VARIANT$Base
00000000000067cc	mov	x0, x3
00000000000067d0	ret
00000000000067d4	tst	x1, #0xf
00000000000067d8	b.eq	0x6840
00000000000067dc	neg	x7, x1
00000000000067e0	ands	x7, x7, #0xff0
00000000000067e4	b.eq	0x6814
00000000000067e8	nop
00000000000067ec	nop
00000000000067f0	ldr	q0, [x0], #0x10
00000000000067f4	ldr	q1, [x1], #0x10
00000000000067f8	cmeq.16b	v1, v0, v1
00000000000067fc	and.16b	v0, v0, v1
0000000000006800	uminv.16b	b1, v0
0000000000006804	fmov	w3, s1
0000000000006808	cbz	w3, 0x685c
000000000000680c	subs	x7, x7, #0x10
0000000000006810	b.ne	0x67f0
0000000000006814	ldrb	w4, [x0], #0x1
0000000000006818	ldrb	w5, [x1], #0x1
000000000000681c	subs	x3, x4, x5
0000000000006820	ccmp	w4, #0x0, #0x4, eq
0000000000006824	b.eq	0x67cc
0000000000006828	tst	x0, #0xf
000000000000682c	b.ne	0x6814
0000000000006830	mov	x7, #0xff0
0000000000006834	b	0x67f0
0000000000006838	nop
000000000000683c	nop
0000000000006840	ldr	q0, [x0], #0x10
0000000000006844	ldr	q1, [x1], #0x10
0000000000006848	cmeq.16b	v1, v0, v1
000000000000684c	and.16b	v0, v0, v1
0000000000006850	uminv.16b	b1, v0
0000000000006854	fmov	w3, s1
0000000000006858	cbnz	w3, 0x6840
000000000000685c	eor.16b	v1, v1, v1
0000000000006860	cmhi.16b	v0, v0, v1
0000000000006864	ldr	q1, 0x67a0
0000000000006868	orr.16b	v0, v0, v1
000000000000686c	uminv.16b	b0, v0
0000000000006870	fmov	w3, s0
0000000000006874	sub	x3, x3, #0x10
0000000000006878	ldrb	w4, [x0, x3]
000000000000687c	ldrb	w5, [x1, x3]
0000000000006880	sub	x0, x4, x5
0000000000006884	ret
0000000000006888	udf	#0x0
000000000000688c	udf	#0x0
0000000000006890	udf	#0x0
0000000000006894	udf	#0x0
0000000000006898	udf	#0x0
000000000000689c	udf	#0x0
00000000000068a0	.long	0x03020100
00000000000068a4	.long	0x07060504
00000000000068a8	add	w8, w8, w10, lsl #2
00000000000068ac	.long	0x0f0e0d0c
__platform_strncmp$VARIANT$Base:
00000000000068b0	eor	x3, x3, x3
00000000000068b4	cbz	x2, 0x68dc
00000000000068b8	tst	x0, #0xf
00000000000068bc	b.eq	0x68e4
00000000000068c0	ldrb	w4, [x0], #0x1
00000000000068c4	ldrb	w5, [x1], #0x1
00000000000068c8	subs	x3, x4, x5
00000000000068cc	ccmp	w4, #0x0, #0x4, eq
00000000000068d0	b.eq	0x68dc
00000000000068d4	subs	x2, x2, #0x1
00000000000068d8	b.ne	0x68b8
00000000000068dc	mov	x0, x3
00000000000068e0	ret
00000000000068e4	tst	x1, #0xf
00000000000068e8	b.eq	0x6960
00000000000068ec	neg	x7, x1
00000000000068f0	ands	x7, x7, #0xff0
00000000000068f4	b.eq	0x6934
00000000000068f8	nop
00000000000068fc	nop
0000000000006900	cmp	x2, x7
0000000000006904	b.ls	0x6960
0000000000006908	sub	x6, x2, x7
000000000000690c	ldr	q0, [x0], #0x10
0000000000006910	ldr	q1, [x1], #0x10
0000000000006914	cmeq.16b	v1, v0, v1
0000000000006918	and.16b	v0, v0, v1
000000000000691c	uminv.16b	b1, v0
0000000000006920	fmov	w3, s1
0000000000006924	cbz	w3, 0x698c
0000000000006928	subs	x7, x7, #0x10
000000000000692c	b.ne	0x690c
0000000000006930	mov	x2, x6
0000000000006934	ldrb	w4, [x0], #0x1
0000000000006938	ldrb	w5, [x1], #0x1
000000000000693c	subs	x3, x4, x5
0000000000006940	ccmp	w4, #0x0, #0x4, eq
0000000000006944	b.eq	0x68dc
0000000000006948	subs	x2, x2, #0x1
000000000000694c	b.eq	0x68dc
0000000000006950	tst	x0, #0xf
0000000000006954	b.ne	0x6934
0000000000006958	mov	x7, #0xff0
000000000000695c	b	0x6900
0000000000006960	ldr	q0, [x0], #0x10
0000000000006964	ldr	q1, [x1], #0x10
0000000000006968	cmeq.16b	v1, v0, v1
000000000000696c	and.16b	v0, v0, v1
0000000000006970	uminv.16b	b1, v0
0000000000006974	fmov	w3, s1
0000000000006978	cbz	w3, 0x698c
000000000000697c	subs	x2, x2, #0x10
0000000000006980	b.hi	0x6960
0000000000006984	eor	x0, x0, x0
0000000000006988	ret
000000000000698c	eor.16b	v1, v1, v1
0000000000006990	cmhi.16b	v0, v0, v1
0000000000006994	ldr	q1, 0x68a0
0000000000006998	orr.16b	v0, v0, v1
000000000000699c	uminv.16b	b0, v0
00000000000069a0	fmov	w3, s0
00000000000069a4	cmp	x3, x2
00000000000069a8	b.hs	0x6984
00000000000069ac	sub	x3, x3, #0x10
00000000000069b0	ldrb	w4, [x0, x3]
00000000000069b4	ldrb	w5, [x1, x3]
00000000000069b8	sub	x0, x4, x5
00000000000069bc	ret
__platform_memcmp_zero_aligned8:
00000000000069c0	cmp	x1, #0x40
00000000000069c4	b.lo	0x6a4c
00000000000069c8	mov	x2, x0
00000000000069cc	add	x0, x0, #0x40
00000000000069d0	and	x0, x0, #0xffffffffffffffc0
00000000000069d4	ldp	q4, q5, [x2]
00000000000069d8	ldp	q6, q7, [x2, #0x20]
00000000000069dc	sub	x2, x0, x2
00000000000069e0	sub	x1, x1, x2
00000000000069e4	subs	x1, x1, #0x40
00000000000069e8	b.ls	0x6a10
00000000000069ec	ldp	q0, q1, [x0]
00000000000069f0	ldp	q2, q3, [x0, #0x20]
00000000000069f4	orr.16b	v4, v4, v0
00000000000069f8	orr.16b	v5, v5, v1
00000000000069fc	orr.16b	v6, v6, v2
0000000000006a00	orr.16b	v7, v7, v3
0000000000006a04	add	x0, x0, #0x40
0000000000006a08	subs	x1, x1, #0x40
0000000000006a0c	b.hi	0x69ec
0000000000006a10	add	x0, x0, x1
0000000000006a14	ldp	q0, q1, [x0]
0000000000006a18	ldp	q2, q3, [x0, #0x20]
0000000000006a1c	orr.16b	v4, v4, v0
0000000000006a20	orr.16b	v5, v5, v1
0000000000006a24	orr.16b	v6, v6, v2
0000000000006a28	orr.16b	v7, v7, v3
0000000000006a2c	orr.16b	v4, v4, v5
0000000000006a30	orr.16b	v6, v6, v7
0000000000006a34	orr.16b	v4, v4, v6
0000000000006a38	umaxv.16b	b0, v4
0000000000006a3c	umov.b	w0, v0[0]
0000000000006a40	tst	w0, w0
0000000000006a44	cset	x0, ne
0000000000006a48	ret
0000000000006a4c	cbz	x1, 0x6a70
0000000000006a50	mov	x3, #0x0
0000000000006a54	ldr	x2, [x0], #0x8
0000000000006a58	orr	x3, x3, x2
0000000000006a5c	subs	x1, x1, #0x8
0000000000006a60	b.hi	0x6a54
0000000000006a64	tst	x3, x3
0000000000006a68	cset	x0, ne
0000000000006a6c	ret
0000000000006a70	mov	x0, #0x0
0000000000006a74	ret
___sme_memset:
0000000000006a78	.long	0x05203820
0000000000006a7c	.long	0x04bf5028
0000000000006a80	.long	0x04bf508a
0000000000006a84	cmp	x10, x2
0000000000006a88	b.ls	0x6a94
0000000000006a8c	mov	x9, x0
0000000000006a90	b	0x6b18
0000000000006a94	lsr	x11, x8, #4
0000000000006a98	sub	x9, x8, #0x1
0000000000006a9c	neg	x12, x0
0000000000006aa0	and	x12, x9, x12
0000000000006aa4	add	x9, x0, x12
0000000000006aa8	sub	x2, x2, x12
0000000000006aac	cbz	x12, 0x6abc
0000000000006ab0	.long	0x253f1990
0000000000006ab4	sub	x12, x9, x8
0000000000006ab8	.long	0xe400e180
0000000000006abc	.long	0x25207810
0000000000006ac0	cmp	x2, x11, lsl #7
0000000000006ac4	b.lo	0x6af4
0000000000006ac8	lsl	x11, x11, #7
0000000000006acc	.long	0x04603001
0000000000006ad0	.long	0x04603002
0000000000006ad4	.long	0x04603003
0000000000006ad8	.long	0xa0608120
0000000000006adc	add	x12, x9, x10
0000000000006ae0	.long	0xa0608180
0000000000006ae4	add	x9, x9, x11
0000000000006ae8	sub	x2, x2, x11
0000000000006aec	cmp	x2, x11
0000000000006af0	b.hs	0x6acc
0000000000006af4	subs	x11, x2, x10
0000000000006af8	b.lo	0x6b18
0000000000006afc	.long	0x04603004
0000000000006b00	.long	0x04603005
0000000000006b04	.long	0x04603006
0000000000006b08	.long	0x04603007
0000000000006b0c	.long	0xa0608124
0000000000006b10	add	x9, x9, x10
0000000000006b14	mov	x2, x11
0000000000006b18	.long	0x25221fe0
0000000000006b1c	b.eq	0x6b38
0000000000006b20	mov	x10, #0x0
0000000000006b24	.long	0xe400e120
0000000000006b28	add	x9, x9, x8
0000000000006b2c	.long	0x252c880a
0000000000006b30	.long	0x25221d40
0000000000006b34	b.ne	0x6b24
0000000000006b38	ret
_swapcontext:
0000000000006b3c	pacibsp
0000000000006b40	stp	x22, x21, [sp, #-0x30]!
0000000000006b44	stp	x20, x19, [sp, #0x10]
0000000000006b48	stp	x29, x30, [sp, #0x20]
0000000000006b4c	add	x29, sp, #0x20
0000000000006b50	cbz	x0, 0x6ba0
0000000000006b54	mov	x19, x1
0000000000006b58	cbz	x1, 0x6ba0
0000000000006b5c	mov	x20, x0
0000000000006b60	ldr	w8, [x0]
0000000000006b64	and	w8, w8, #0x7fffffff
0000000000006b68	str	w8, [x0]
0000000000006b6c	ldr	x21, [x0, #0x20]
0000000000006b70	bl	_getcontext
0000000000006b74	mov	x1, x0
0000000000006b78	str	x21, [x20, #0x20]
0000000000006b7c	cbnz	w0, 0x6bbc
0000000000006b80	ldr	w8, [x20]
0000000000006b84	tbnz	w8, #0x1f, 0x6bb4
0000000000006b88	orr	w8, w8, #0x80000000
0000000000006b8c	str	w8, [x20]
0000000000006b90	mov	x0, x19
0000000000006b94	bl	_setcontext
0000000000006b98	mov	x1, x0
0000000000006b9c	b	0x6bbc
0000000000006ba0	bl	0x72f0 ; symbol stub for: ___error
0000000000006ba4	mov	w8, #0x16
0000000000006ba8	str	w8, [x0]
0000000000006bac	mov	w0, #-0x1
0000000000006bb0	b	0x6bc0
0000000000006bb4	mov	w0, #0x0
0000000000006bb8	mov	w1, #0x0
0000000000006bbc	mov	x0, x1
0000000000006bc0	ldp	x29, x30, [sp, #0x20]
0000000000006bc4	ldp	x20, x19, [sp, #0x10]
0000000000006bc8	ldp	x22, x21, [sp], #0x30
0000000000006bcc	retab
__ctx_done:
0000000000006bd0	pacibsp
0000000000006bd4	stp	x29, x30, [sp, #-0x10]!
0000000000006bd8	mov	x29, sp
0000000000006bdc	mov	x8, x0
0000000000006be0	ldr	x0, [x0, #0x20]
0000000000006be4	cbnz	x0, 0x6bec
0000000000006be8	bl	0x7390 ; symbol stub for: __exit
0000000000006bec	str	xzr, [x8, #0x28]
0000000000006bf0	bl	_setcontext
0000000000006bf4	brk	#0x1
_makecontext:
0000000000006bf8	cbz	x0, 0x6d18
0000000000006bfc	pacibsp
0000000000006c00	sub	sp, sp, #0x40
0000000000006c04	stp	x22, x21, [sp, #0x10]
0000000000006c08	stp	x20, x19, [sp, #0x20]
0000000000006c0c	stp	x29, x30, [sp, #0x30]
0000000000006c10	add	x29, sp, #0x30
0000000000006c14	mov	x21, x2
0000000000006c18	mov	x19, x0
0000000000006c1c	cmp	w2, #0x100, lsl #12
0000000000006c20	b.hi	0x6d00
0000000000006c24	ldr	x0, [x19, #0x8]
0000000000006c28	cbz	x0, 0x6d00
0000000000006c2c	mov	x20, x1
0000000000006c30	add	x8, x19, #0x40
0000000000006c34	str	x8, [x19, #0x30]
0000000000006c38	ldr	x1, [x19, #0x10]
0000000000006c3c	bl	__platform_bzero
0000000000006c40	ldp	x8, x9, [x19, #0x8]
0000000000006c44	add	x8, x8, x9
0000000000006c48	and	x17, x8, #0xfffffffffffffff0
0000000000006c4c	mov	w8, #0x8
0000000000006c50	cmp	w21, #0x8
0000000000006c54	csel	w8, w21, w8, gt
0000000000006c58	sub	x8, x17, w8, uxtw #2
0000000000006c5c	and	x8, x8, #0xfffffffffffffff0
0000000000006c60	add	x9, x29, #0x10
0000000000006c64	str	x9, [sp, #0x8]
0000000000006c68	cbz	w21, 0x6c8c
0000000000006c6c	mov	x9, x8
0000000000006c70	ldr	x10, [sp, #0x8]
0000000000006c74	add	x11, x10, #0x8
0000000000006c78	str	x11, [sp, #0x8]
0000000000006c7c	ldr	w10, [x10]
0000000000006c80	str	w10, [x9], #0x4
0000000000006c84	subs	w21, w21, #0x1
0000000000006c88	b.ne	0x6c70
0000000000006c8c	ldr	x9, [x19, #0x30]
0000000000006c90	ldr	w10, [x9, #0x11c]
0000000000006c94	cbz	x17, 0x6ca0
0000000000006c98	mov	w16, #0x4517
0000000000006c9c	pacda	x17, x16
0000000000006ca0	str	x17, [x9, #0xf8]
0000000000006ca4	cbz	x8, 0x6cb8
0000000000006ca8	mov	x17, x8
0000000000006cac	mov	w16, #0xcbed
0000000000006cb0	pacda	x17, x16
0000000000006cb4	mov	x8, x17
0000000000006cb8	str	x8, [x9, #0x108]
0000000000006cbc	and	x8, x10, #0xff000000
0000000000006cc0	mov	w11, #0x77d3
0000000000006cc4	cmp	w8, #0x0
0000000000006cc8	movk	x8, #0x77d3, lsl #48
0000000000006ccc	csel	x8, x11, x8, eq
0000000000006cd0	adrp	x16, 0 ; 0x6000
0000000000006cd4	add	x16, x16, #0xeb4
0000000000006cd8	pacia	x16, x8
0000000000006cdc	str	x16, [x9, #0x100]
0000000000006ce0	mov	w8, #-0xc
0000000000006ce4	and	w8, w10, w8
0000000000006ce8	str	w8, [x9, #0x11c]
0000000000006cec	mrs	x8, TPIDRRO_EL0
0000000000006cf0	ldr	x8, [x8, #0x38]
0000000000006cf4	eor	x8, x8, x20
0000000000006cf8	stp	x19, x8, [x9, #0xa8]
0000000000006cfc	b	0x6d04
0000000000006d00	str	xzr, [x19, #0x28]
0000000000006d04	ldp	x29, x30, [sp, #0x30]
0000000000006d08	ldp	x20, x19, [sp, #0x20]
0000000000006d0c	ldp	x22, x21, [sp, #0x10]
0000000000006d10	add	sp, sp, #0x40
0000000000006d14	autibsp
0000000000006d18	ret
_populate_signal_stack_context:
0000000000006d1c	pacibsp
0000000000006d20	sub	sp, sp, #0x50
0000000000006d24	stp	x20, x19, [sp, #0x30]
0000000000006d28	stp	x29, x30, [sp, #0x40]
0000000000006d2c	add	x29, sp, #0x40
0000000000006d30	mov	x20, x1
0000000000006d34	mov	x19, x0
0000000000006d38	add	x1, sp, #0x18
0000000000006d3c	mov	x0, #0x0
0000000000006d40	bl	0x7340 ; symbol stub for: ___sigaltstack
0000000000006d44	cbnz	w0, 0x6d50
0000000000006d48	ldrb	w8, [sp, #0x28]
0000000000006d4c	tbnz	w8, #0x0, 0x6d6c
0000000000006d50	str	x20, [sp, #0x18]
0000000000006d54	add	x1, sp, #0x8
0000000000006d58	mov	w0, #0x3
0000000000006d5c	bl	0x73f0 ; symbol stub for: _getrlimit
0000000000006d60	cbnz	w0, 0x6d6c
0000000000006d64	ldr	x8, [sp, #0x8]
0000000000006d68	str	x8, [sp, #0x20]
0000000000006d6c	ldur	q0, [sp, #0x18]
0000000000006d70	stur	q0, [x19, #0x8]
0000000000006d74	ldr	x8, [sp, #0x28]
0000000000006d78	str	x8, [x19, #0x18]
0000000000006d7c	add	x2, x19, #0x4
0000000000006d80	mov	w0, #0x2
0000000000006d84	mov	x1, #0x0
0000000000006d88	bl	0x74b0 ; symbol stub for: _sigprocmask
0000000000006d8c	add	x0, x19, #0x40
0000000000006d90	str	x0, [x19, #0x30]
0000000000006d94	mov	w8, #0x330
0000000000006d98	adrp	x9, 14 ; 0x14000
0000000000006d9c	add	x9, x9, #0x20
0000000000006da0	ldrsw	x9, [x9]
0000000000006da4	stp	x9, x8, [x19, #0x20]
0000000000006da8	ldp	x29, x30, [sp, #0x40]
0000000000006dac	ldp	x20, x19, [sp, #0x30]
0000000000006db0	add	sp, sp, #0x50
0000000000006db4	retab
_setcontext:
0000000000006db8	pacibsp
0000000000006dbc	stp	x20, x19, [sp, #-0x20]!
0000000000006dc0	stp	x29, x30, [sp, #0x10]
0000000000006dc4	add	x29, sp, #0x10
0000000000006dc8	ldr	x8, [x0, #0x28]
0000000000006dcc	cbz	x8, 0x6e04
0000000000006dd0	mov	x19, x0
0000000000006dd4	add	x1, x0, #0x4
0000000000006dd8	mov	w0, #0x3
0000000000006ddc	mov	x2, #0x0
0000000000006de0	bl	0x74b0 ; symbol stub for: _sigprocmask
0000000000006de4	add	x0, x19, #0x40
0000000000006de8	ldp	x29, x30, [sp, #0x10]
0000000000006dec	ldp	x20, x19, [sp], #0x20
0000000000006df0	autibsp
0000000000006df4	eor	x16, x30, x30, lsl #1
0000000000006df8	tbz	x16, #0x3e, 0x6e00
0000000000006dfc	brk	#0xc471
0000000000006e00	b	__setcontext
0000000000006e04	bl	0x72f0 ; symbol stub for: ___error
0000000000006e08	mov	w8, #0x16
0000000000006e0c	str	w8, [x0]
0000000000006e10	mov	w0, #-0x1
0000000000006e14	ldp	x29, x30, [sp, #0x10]
0000000000006e18	ldp	x20, x19, [sp], #0x20
0000000000006e1c	retab
__setcontext:
0000000000006e20	ldp	x19, x20, [x0, #0xa8]
0000000000006e24	ldp	x21, x22, [x0, #0xb8]
0000000000006e28	ldp	x23, x24, [x0, #0xc8]
0000000000006e2c	ldp	x25, x26, [x0, #0xd8]
0000000000006e30	ldp	x27, x28, [x0, #0xe8]
0000000000006e34	ldr	d8, [x0, #0x1a8]
0000000000006e38	ldr	d9, [x0, #0x1b8]
0000000000006e3c	ldr	d10, [x0, #0x1c8]
0000000000006e40	ldr	d11, [x0, #0x1d8]
0000000000006e44	ldr	d12, [x0, #0x1e8]
0000000000006e48	ldr	d13, [x0, #0x1f8]
0000000000006e4c	ldr	d14, [x0, #0x208]
0000000000006e50	ldr	d15, [x0, #0x218]
0000000000006e54	ldp	x10, x12, [x0, #0xf8]
0000000000006e58	ldr	x11, [x0, #0x108]
0000000000006e5c	ldr	w13, [x0, #0x11c]
0000000000006e60	mov	x9, #0xcbed
0000000000006e64	autda	x11, x9
0000000000006e68	ldr	xzr, [x11]
0000000000006e6c	mov	sp, x11
0000000000006e70	mov	x9, #0x4517
0000000000006e74	autda	x10, x9
0000000000006e78	mov	x29, x10
0000000000006e7c	mov	x30, x12
0000000000006e80	tbnz	w13, #0x1, 0x6eac
0000000000006e84	mov	x16, x12
0000000000006e88	mov	x17, x16
0000000000006e8c	mov	x9, #0x77d3
0000000000006e90	autia	x16, x9
0000000000006e94	xpaci	x17
0000000000006e98	cmp	x16, x17
0000000000006e9c	b.eq	0x6ea4
0000000000006ea0	brk	#0x29a
0000000000006ea4	mov	x30, x16
0000000000006ea8	pacibsp
0000000000006eac	mov	x0, xzr
0000000000006eb0	retab
__ctx_start:
0000000000006eb4	ldp	w0, w1, [sp], #0x20
0000000000006eb8	ldp	w2, w3, [sp, #-0x18]
0000000000006ebc	ldp	w4, w5, [sp, #-0x10]
0000000000006ec0	ldp	w6, w7, [sp, #-0x8]
0000000000006ec4	mrs	x16, TPIDRRO_EL0
0000000000006ec8	ldr	x16, [x16, #0x38]
0000000000006ecc	eor	x20, x20, x16
0000000000006ed0	blraaz	x20
0000000000006ed4	mov	sp, x29
0000000000006ed8	mov	x0, x19
0000000000006edc	bl	__ctx_done
0000000000006ee0	brk	#0x29a
_getcontext:
0000000000006ee4	pacibsp
0000000000006ee8	stp	x29, x30, [sp, #-0x10]!
0000000000006eec	mov	x29, sp
0000000000006ef0	mov	x1, sp
0000000000006ef4	bl	_populate_signal_stack_context
0000000000006ef8	mov	sp, x29
0000000000006efc	ldp	x29, x30, [sp], #0x10
0000000000006f00	mov	x10, x29
0000000000006f04	mov	x9, #0x4517
0000000000006f08	pacda	x10, x9
0000000000006f0c	mov	x11, sp
0000000000006f10	mov	x9, #0xcbed
0000000000006f14	pacda	x11, x9
0000000000006f18	mov	x12, x30
0000000000006f1c	mov	x13, #0x2
0000000000006f20	stp	x10, x12, [x0, #0xf8]
0000000000006f24	str	x11, [x0, #0x108]
0000000000006f28	str	w13, [x0, #0x11c]
0000000000006f2c	stp	x19, x20, [x0, #0xa8]
0000000000006f30	stp	x21, x22, [x0, #0xb8]
0000000000006f34	stp	x23, x24, [x0, #0xc8]
0000000000006f38	stp	x25, x26, [x0, #0xd8]
0000000000006f3c	stp	x27, x28, [x0, #0xe8]
0000000000006f40	str	xzr, [x0, #0x10]
0000000000006f44	str	d8, [x0, #0x1a8]
0000000000006f48	str	d9, [x0, #0x1b8]
0000000000006f4c	str	d10, [x0, #0x1c8]
0000000000006f50	str	d11, [x0, #0x1d8]
0000000000006f54	str	d12, [x0, #0x1e8]
0000000000006f58	str	d13, [x0, #0x1f8]
0000000000006f5c	str	d14, [x0, #0x208]
0000000000006f60	str	d15, [x0, #0x218]
0000000000006f64	mov	x0, xzr
0000000000006f68	retab
_timingsafe_enable_if_supported:
0000000000006f6c	mrs	x8, DIT
0000000000006f70	ubfx	x0, x8, #24, #1
0000000000006f74	msr	DIT, #0x1
0000000000006f78	sb
0000000000006f7c	ret
_timingsafe_restore_if_supported:
0000000000006f80	tbnz	w0, #0x0, 0x6f88
0000000000006f84	msr	DIT, #0x0
0000000000006f88	ret
__os_log_simple_reinit_4launchd.cold.1:
0000000000006f8c	sxtw	x8, w0
0000000000006f90	stp	x20, x21, [sp, #-0x10]!
0000000000006f94	adrp	x20, 1 ; 0x7000
0000000000006f98	add	x20, x20, #0x666 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: asl fd already initialized"
0000000000006f9c	adrp	x21, 10 ; 0x10000
0000000000006fa0	add	x21, x21, #0x0
0000000000006fa4	str	x20, [x21, #0x8]
0000000000006fa8	str	x8, [x21, #0x38]
0000000000006fac	ldp	x20, x21, [sp], #0x10
0000000000006fb0	brk	#0x1
__enlarge.cold.1:
0000000000006fb4	sxtw	x8, w0
0000000000006fb8	stp	x20, x21, [sp, #-0x10]!
0000000000006fbc	adrp	x20, 1 ; 0x7000
0000000000006fc0	add	x20, x20, #0x755 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Failed to allocate memory for buffer"
0000000000006fc4	adrp	x21, 10 ; 0x10000
0000000000006fc8	add	x21, x21, #0x0
0000000000006fcc	str	x20, [x21, #0x8]
0000000000006fd0	str	x8, [x21, #0x38]
0000000000006fd4	ldp	x20, x21, [sp], #0x10
0000000000006fd8	brk	#0x1
_OSAtomicFifoDequeue.cold.1:
0000000000006fdc	mov	x8, #0x0
0000000000006fe0	stp	x20, x21, [sp, #-0x10]!
0000000000006fe4	adrp	x20, 1 ; 0x7000
0000000000006fe8	add	x20, x20, #0x79c ; literal pool for: "BUG IN LIBPLATFORM: Invalid commpage pfz base."
0000000000006fec	adrp	x21, 10 ; 0x10000
0000000000006ff0	add	x21, x21, #0x0
0000000000006ff4	str	x20, [x21, #0x8]
0000000000006ff8	str	x8, [x21, #0x38]
0000000000006ffc	ldp	x20, x21, [sp], #0x10
0000000000007000	brk	#0x1
__os_lock_corruption_abort:
0000000000007004	mov	x8, x1
0000000000007008	stp	x20, x21, [sp, #-0x10]!
000000000000700c	adrp	x20, 0 ; 0x7000
0000000000007010	add	x20, x20, #0x7cb ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: os_lock is corrupt"
0000000000007014	adrp	x21, 9 ; 0x10000
0000000000007018	add	x21, x21, #0x0
000000000000701c	str	x20, [x21, #0x8]
0000000000007020	str	x8, [x21, #0x38]
0000000000007024	ldp	x20, x21, [sp], #0x10
0000000000007028	brk	#0x1
__os_unfair_lock_recursive_abort:
000000000000702c	mov	w8, w0
0000000000007030	stp	x20, x21, [sp, #-0x10]!
0000000000007034	adrp	x20, 0 ; 0x7000
0000000000007038	add	x20, x20, #0x809 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Trying to recursively lock an os_unfair_lock"
000000000000703c	adrp	x21, 9 ; 0x10000
0000000000007040	add	x21, x21, #0x0
0000000000007044	str	x20, [x21, #0x8]
0000000000007048	str	x8, [x21, #0x38]
000000000000704c	ldp	x20, x21, [sp], #0x10
0000000000007050	brk	#0x1
__os_unfair_lock_unowned_abort:
0000000000007054	mov	w8, w0
0000000000007058	stp	x20, x21, [sp, #-0x10]!
000000000000705c	adrp	x20, 0 ; 0x7000
0000000000007060	add	x20, x20, #0x854 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Unlock of an os_unfair_lock not owned by current thread"
0000000000007064	adrp	x21, 9 ; 0x10000
0000000000007068	add	x21, x21, #0x0
000000000000706c	str	x20, [x21, #0x8]
0000000000007070	str	x8, [x21, #0x38]
0000000000007074	ldp	x20, x21, [sp], #0x10
0000000000007078	brk	#0x1
__os_unfair_lock_corruption_abort:
000000000000707c	sub	w9, w0, #0x200
0000000000007080	mov	w8, w0
0000000000007084	mov	w10, #0x3fe00
0000000000007088	cmp	w9, w10
000000000000708c	b.hi	0x70b4
0000000000007090	stp	x20, x21, [sp, #-0x10]!
0000000000007094	adrp	x20, 0 ; 0x7000
0000000000007098	add	x20, x20, #0x8aa ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: os_unfair_lock is corrupt, or owner thread exited without unlocking"
000000000000709c	adrp	x21, 9 ; 0x10000
00000000000070a0	add	x21, x21, #0x0
00000000000070a4	str	x20, [x21, #0x8]
00000000000070a8	str	x8, [x21, #0x38]
00000000000070ac	ldp	x20, x21, [sp], #0x10
00000000000070b0	brk	#0x1
00000000000070b4	stp	x20, x21, [sp, #-0x10]!
00000000000070b8	adrp	x20, 0 ; 0x7000
00000000000070bc	add	x20, x20, #0x90c ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: os_unfair_lock is corrupt"
00000000000070c0	adrp	x21, 9 ; 0x10000
00000000000070c4	add	x21, x21, #0x0
00000000000070c8	str	x20, [x21, #0x8]
00000000000070cc	str	x8, [x21, #0x38]
00000000000070d0	ldp	x20, x21, [sp], #0x10
00000000000070d4	brk	#0x1
__os_once_gate_recursive_abort:
00000000000070d8	mov	w8, w0
00000000000070dc	stp	x20, x21, [sp, #-0x10]!
00000000000070e0	adrp	x20, 0 ; 0x7000
00000000000070e4	add	x20, x20, #0xa3a ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Trying to recursively lock an os_once_t"
00000000000070e8	adrp	x21, 9 ; 0x10000
00000000000070ec	add	x21, x21, #0x0
00000000000070f0	str	x20, [x21, #0x8]
00000000000070f4	str	x8, [x21, #0x38]
00000000000070f8	ldp	x20, x21, [sp], #0x10
00000000000070fc	brk	#0x1
__os_once_gate_unowned_abort:
0000000000007100	mov	w8, w0
0000000000007104	stp	x20, x21, [sp, #-0x10]!
0000000000007108	adrp	x20, 0 ; 0x7000
000000000000710c	add	x20, x20, #0xa80 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Unlock of an os_once_t not owned by current thread"
0000000000007110	adrp	x21, 9 ; 0x10000
0000000000007114	add	x21, x21, #0x0
0000000000007118	str	x20, [x21, #0x8]
000000000000711c	str	x8, [x21, #0x38]
0000000000007120	ldp	x20, x21, [sp], #0x10
0000000000007124	brk	#0x1
__os_once_gate_corruption_abort:
0000000000007128	mov	w8, w0
000000000000712c	stp	x20, x21, [sp, #-0x10]!
0000000000007130	adrp	x20, 0 ; 0x7000
0000000000007134	add	x20, x20, #0xad1 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: os_once_t is corrupt"
0000000000007138	adrp	x21, 9 ; 0x10000
000000000000713c	add	x21, x21, #0x0
0000000000007140	str	x20, [x21, #0x8]
0000000000007144	str	x8, [x21, #0x38]
0000000000007148	ldp	x20, x21, [sp], #0x10
000000000000714c	brk	#0x1
__os_lock_recursive_abort:
0000000000007150	mov	w8, w0
0000000000007154	stp	x20, x21, [sp, #-0x10]!
0000000000007158	adrp	x20, 0 ; 0x7000
000000000000715c	add	x20, x20, #0xb04 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Trying to recursively lock an os_lock"
0000000000007160	adrp	x21, 9 ; 0x10000
0000000000007164	add	x21, x21, #0x0
0000000000007168	str	x20, [x21, #0x8]
000000000000716c	str	x8, [x21, #0x38]
0000000000007170	ldp	x20, x21, [sp], #0x10
0000000000007174	brk	#0x1
_os_unfair_lock_assert_owner.cold.1:
0000000000007178	mov	w8, w0
000000000000717c	stp	x20, x21, [sp, #-0x10]!
0000000000007180	adrp	x20, 0 ; 0x7000
0000000000007184	add	x20, x20, #0x944 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Assertion failed: Lock unexpectedly not owned by current thread"
0000000000007188	adrp	x21, 9 ; 0x10000
000000000000718c	add	x21, x21, #0x0
0000000000007190	str	x20, [x21, #0x8]
0000000000007194	str	x8, [x21, #0x38]
0000000000007198	ldp	x20, x21, [sp], #0x10
000000000000719c	brk	#0x1
_os_unfair_lock_assert_not_owner.cold.1:
00000000000071a0	mov	w8, w0
00000000000071a4	stp	x20, x21, [sp, #-0x10]!
00000000000071a8	adrp	x20, 0 ; 0x7000
00000000000071ac	add	x20, x20, #0x9a2 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Assertion failed: Lock unexpectedly owned by current thread"
00000000000071b0	adrp	x21, 9 ; 0x10000
00000000000071b4	add	x21, x21, #0x0
00000000000071b8	str	x20, [x21, #0x8]
00000000000071bc	str	x8, [x21, #0x38]
00000000000071c0	ldp	x20, x21, [sp], #0x10
00000000000071c4	brk	#0x1
_os_unfair_recursive_lock_unlock_forked_child.cold.1:
00000000000071c8	stp	x20, x21, [sp, #-0x10]!
00000000000071cc	adrp	x20, 0 ; 0x7000
00000000000071d0	add	x20, x20, #0x9fc ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Lock was not held"
00000000000071d4	adrp	x21, 9 ; 0x10000
00000000000071d8	add	x21, x21, #0x0
00000000000071dc	str	x20, [x21, #0x8]
00000000000071e0	ldp	x20, x21, [sp], #0x10
00000000000071e4	brk	#0x1
__os_alloc.cold.1:
00000000000071e8	mov	x8, x0
00000000000071ec	stp	x20, x21, [sp, #-0x10]!
00000000000071f0	adrp	x20, 0 ; 0x7000
00000000000071f4	add	x20, x20, #0xc1c ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Requested allocation size is invalid"
00000000000071f8	adrp	x21, 9 ; 0x10000
00000000000071fc	add	x21, x21, #0x0
0000000000007200	str	x20, [x21, #0x8]
0000000000007204	str	x8, [x21, #0x38]
0000000000007208	ldp	x20, x21, [sp], #0x10
000000000000720c	brk	#0x1
__os_semaphore_create.cold.1:
0000000000007210	sxtw	x8, w0
0000000000007214	stp	x20, x21, [sp, #-0x10]!
0000000000007218	adrp	x20, 0 ; 0x7000
000000000000721c	add	x20, x20, #0xce9 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Creating semaphore failed, possible port leak"
0000000000007220	adrp	x21, 9 ; 0x10000
0000000000007224	add	x21, x21, #0x0
0000000000007228	str	x20, [x21, #0x8]
000000000000722c	str	x8, [x21, #0x38]
0000000000007230	ldp	x20, x21, [sp], #0x10
0000000000007234	brk	#0x1
__os_semaphore_create.cold.2:
0000000000007238	mov	x8, #-0x12d
000000000000723c	stp	x20, x21, [sp, #-0x10]!
0000000000007240	adrp	x20, 0 ; 0x7000
0000000000007244	add	x20, x20, #0xc97 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Allocating semaphore failed with MIG_REPLY_MISMATCH"
0000000000007248	adrp	x21, 9 ; 0x10000
000000000000724c	add	x21, x21, #0x0
0000000000007250	str	x20, [x21, #0x8]
0000000000007254	str	x8, [x21, #0x38]
0000000000007258	ldp	x20, x21, [sp], #0x10
000000000000725c	brk	#0x1
__os_semaphore_dispose.cold.1:
0000000000007260	sxtw	x8, w0
0000000000007264	stp	x20, x21, [sp, #-0x10]!
0000000000007268	adrp	x20, 0 ; 0x7000
000000000000726c	add	x20, x20, #0xd35 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Destroying semaphore failed"
0000000000007270	adrp	x21, 9 ; 0x10000
0000000000007274	add	x21, x21, #0x0
0000000000007278	str	x20, [x21, #0x8]
000000000000727c	str	x8, [x21, #0x38]
0000000000007280	ldp	x20, x21, [sp], #0x10
0000000000007284	brk	#0x1
__os_semaphore_signal.cold.1:
0000000000007288	sxtw	x8, w0
000000000000728c	stp	x20, x21, [sp, #-0x10]!
0000000000007290	adrp	x20, 0 ; 0x7000
0000000000007294	add	x20, x20, #0xd6f ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Signaling semaphore failed"
0000000000007298	adrp	x21, 9 ; 0x10000
000000000000729c	add	x21, x21, #0x0
00000000000072a0	str	x20, [x21, #0x8]
00000000000072a4	str	x8, [x21, #0x38]
00000000000072a8	ldp	x20, x21, [sp], #0x10
00000000000072ac	brk	#0x1
__os_semaphore_wait.cold.1:
00000000000072b0	sxtw	x8, w0
00000000000072b4	stp	x20, x21, [sp, #-0x10]!
00000000000072b8	adrp	x20, 0 ; 0x7000
00000000000072bc	add	x20, x20, #0xda8 ; literal pool for: "BUG IN CLIENT OF LIBPLATFORM: Waiting on semaphore failed"
00000000000072c0	adrp	x21, 9 ; 0x10000
00000000000072c4	add	x21, x21, #0x0
00000000000072c8	str	x20, [x21, #0x8]
00000000000072cc	str	x8, [x21, #0x38]
00000000000072d0	ldp	x20, x21, [sp], #0x10
00000000000072d4	brk	#0x1
